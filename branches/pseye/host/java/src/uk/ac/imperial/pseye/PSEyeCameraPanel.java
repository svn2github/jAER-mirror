
package uk.ac.imperial.pseye;

import java.util.Observable;
import java.util.Observer;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SpinnerNumberModel;


/**
 * Controls camera parameters.
 * 
 * @author mlk
 */
public class PSEyeCameraPanel extends javax.swing.JPanel implements Observer {

    private final static Logger log = Logger.getLogger("PSEyeCamera");
    public PSEyeModelChip chip;

    /** Creates new form CLCameraControlPanel */
    public PSEyeCameraPanel(PSEyeModelChip chip) {
        this.chip = chip;
        initComponents();
        
        setComponentModels();
        setComponents();
        
        handleUpdate(null);
        chip.addObserver(this);
    }
    
    private void setFileModified() {
        if (chip != null && chip.getAeViewer() != null && chip.getAeViewer().getBiasgenFrame() != null) {
            chip.getAeViewer().getBiasgenFrame().setFileModified(true);
        }
    }
    
    private void setComponents() {
        camModeCB.setSelectedItem(chip.getMode().name());
        camResCB.setSelectedItem(chip.getResolution());
        camRateCB.setSelectedItem(chip.getFrameRate());
        
        agCB.setSelected(chip.getSupportsAutoGain() && chip.isAutoGain());
        aeCB.setSelected(chip.getSupportsAutoExposure() && chip.isAutoExposure());
        
        gainSp.setValue(chip.getGain());
        expSp.setValue(chip.getExposure());
        
        gainSp.setEnabled(!agCB.isSelected());
        expSp.setEnabled(!aeCB.isSelected());
    }
    
    /* Set the component models from the chip if model changed */
    private void setComponentModels() {
        Object[] modes = chip.getSupportedModes().toArray();
        Object[] resolutions = chip.getSupportedResolutions().toArray();
        
        camModeCB.setModel(new DefaultComboBoxModel(modes));
        camModeCB.setEnabled(modes.length > 1);
    
        camResCB.setModel(new DefaultComboBoxModel(resolutions));
        camResCB.setEnabled(resolutions.length > 1);
        
        PSEyeCamera.Resolution resolution = (PSEyeCamera.Resolution) camResCB.getSelectedItem();
        Integer[] frameRates = chip.getSupportedFrameRates().get(resolution).toArray(new Integer[0]);
        camRateCB.setModel(new DefaultComboBoxModel(frameRates));
        camRateCB.setEnabled(frameRates.length > 1);
        
        agCB.setEnabled(chip.getSupportsAutoGain());
        aeCB.setEnabled(chip.getSupportsAutoExposure());
        
        gainSp.setModel(new SpinnerNumberModel(chip.getGain(), chip.getMinGain(), 
                chip.getMaxGain(), 1));
        expSp.setModel(new SpinnerNumberModel(chip.getExposure(), chip.getMinExposure(), 
                chip.getMaxExposure(), 1));
    }

   /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        gainSp = new javax.swing.JSpinner();
        agCB = new javax.swing.JCheckBox();
        aeCB = new javax.swing.JCheckBox();
        expSp = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        camRateCB = new javax.swing.JComboBox();
        camResCB = new javax.swing.JComboBox();
        camModeCB = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("PS Eye Control"));
        setMinimumSize(new java.awt.Dimension(431, 282));

        statusLabel.setToolTipText("status output");

        gainSp.setToolTipText("CL eye gain (0-79)");
        gainSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gainSpStateChanged(evt);
            }
        });

        agCB.setText("Auto gain");
        agCB.setToolTipText("Enables AGC");
        agCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agCBActionPerformed(evt);
            }
        });

        aeCB.setText("Auto exposure");
        aeCB.setToolTipText("Enables automatic exposure control");
        aeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aeCBActionPerformed(evt);
            }
        });

        expSp.setToolTipText("CL eye exposure value (0-511)");
        expSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                expSpStateChanged(evt);
            }
        });

        jLabel1.setText("Gain");

        jLabel2.setText("Exposure");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gainSp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expSp, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(aeCB)
                    .addComponent(agCB))
                .addGap(120, 120, 120))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(agCB))
                    .addComponent(gainSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(aeCB))
                    .addComponent(expSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        camRateCB.setMaximumRowCount(30);
        camRateCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        camRateCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camRateCBActionPerformed(evt);
            }
        });

        camResCB.setMaximumRowCount(30);
        camResCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        camResCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camResCBActionPerformed(evt);
            }
        });

        camModeCB.setMaximumRowCount(30);
        camModeCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        camModeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camModeCBActionPerformed(evt);
            }
        });

        jLabel6.setText("Camera mode");

        jLabel11.setText("Resolution");

        jLabel12.setText("Framerate");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(403, 403, 403)
                        .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 6, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addContainerGap(359, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel12))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(camRateCB, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(camResCB, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(camModeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(112, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(camModeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(camResCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(camRateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(statusLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void agCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agCBActionPerformed
        chip.setAutoGain(agCB.isSelected());
        gainSp.setValue(chip.getGain());
        gainSp.setEnabled(!agCB.isSelected());
}//GEN-LAST:event_agCBActionPerformed

    private void aeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aeCBActionPerformed
        chip.setAutoExposure(aeCB.isSelected());
        expSp.setValue(chip.getExposure());
        expSp.setEnabled(!aeCB.isSelected());
}//GEN-LAST:event_aeCBActionPerformed

    private void camModeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camModeCBActionPerformed
        try {
            PSEyeCamera.Mode mode = (PSEyeCamera.Mode) camModeCB.getSelectedItem();
            chip.setMode(mode);
            statusLabel.setText("");
        } catch (Exception e) {
            log.warning(e.toString());
            statusLabel.setText(e.toString());
        }
    }//GEN-LAST:event_camModeCBActionPerformed

    private void camResCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camResCBActionPerformed
        try {
            PSEyeCamera.Resolution resolution = (PSEyeCamera.Resolution) camResCB.getSelectedItem();
            chip.setResolution(resolution);
            Integer[] frameRates = chip.getSupportedFrameRates().get(resolution).toArray(new Integer[0]);
            camRateCB.setModel(new DefaultComboBoxModel(frameRates));
            camRateCB.setSelectedItem(chip.getFrameRate());
            camRateCB.setEnabled(frameRates.length > 1);
            statusLabel.setText("");
        } catch (Exception e) {
            log.warning(e.toString());
            statusLabel.setText(e.toString());
        }
    }//GEN-LAST:event_camResCBActionPerformed

    private void camRateCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camRateCBActionPerformed
        try {
            int frameRate = (Integer) camRateCB.getSelectedItem();
            chip.setFrameRate(frameRate);
            statusLabel.setText("");
        } catch (Exception e) {
            log.warning(e.toString());
            statusLabel.setText(e.toString());
        }
    }//GEN-LAST:event_camRateCBActionPerformed

    private void gainSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gainSpStateChanged
        chip.setGain((Integer) gainSp.getValue());
    }//GEN-LAST:event_gainSpStateChanged

    private void expSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_expSpStateChanged
        chip.setExposure((Integer) expSp.getValue());
    }//GEN-LAST:event_expSpStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox aeCB;
    private javax.swing.JCheckBox agCB;
    private javax.swing.JComboBox camModeCB;
    private javax.swing.JComboBox camRateCB;
    private javax.swing.JComboBox camResCB;
    private javax.swing.JSpinner expSp;
    private javax.swing.JSpinner gainSp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the chip
     */
    public PSEyeModelChip getChip() {
        return chip;
    }

    /**
     * @param chip the chip to set
     */
    public void setChip(PSEyeModelChip chip) {
        this.chip = chip;
    }

    @Override
    public void update(Observable o, Object arg) {
        if (o != null && o == chip) {
            handleUpdate(arg);
        }
    }

    /** The update arg is the event
     * 
     * @param arg the event from the PSEyeCLModelRetina
     */
    private void handleUpdate(Object o) {
        PSEyeModelChip.EVENT event;
        if (o == null) {
            setComponents();
            return;
        }
        if (o instanceof PSEyeModelChip.EVENT) {
            event = (PSEyeModelChip.EVENT) o;
            switch (event) {
                case MODE: 
                    camModeCB.setSelectedItem(chip.getMode());
                    break;
                case RESOLUTION: 
                    camResCB.setSelectedItem(chip.getResolution());
                    break;
                case FRAMERATE:
                    camRateCB.setSelectedItem(chip.getFrameRate());
                    break;
                case GAIN: 
                    gainSp.setValue(chip.getGain());
                    break;
                case EXPOSURE: 
                    expSp.setValue(chip.getExposure());
                    break;
                case AUTO_GAIN: 
                    agCB.setSelected(chip.isAutoGain());
                    gainSp.setEnabled(!agCB.isSelected());
                    break;
                case AUTO_EXPOSURE: 
                    aeCB.setSelected(chip.isAutoExposure());
                    expSp.setEnabled(!aeCB.isSelected());
                    break;
            }
            setFileModified();
        }
    }
}
