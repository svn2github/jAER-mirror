
package uk.ac.imperial.pseye;

import java.util.Observable;
import java.util.Observer;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.JPanel;

/**
 * Controls camera parameters.
 * 
 * @author mlk
 */
public class PSEyeSettingPanel<H extends Observable & PSEyeDriverInterface> extends JPanel implements Observer {

    private final static Logger log = Logger.getLogger("PSEyeCamera");
    public H camera;

    /** Creates new form CLCameraControlPanel */
    public PSEyeSettingPanel(H camera) {
        this.camera = camera;
        initComponents();
        
        setComponentModels();
        setComponents();
        
        handleUpdate(null);
        camera.addObserver(this);
    }
    
    /*
    private void setFileModified() {
        if (camera != null && camera.getAeViewer() != null && camera.getAeViewer().getBiasgenFrame() != null) {
            camera.getAeViewer().getBiasgenFrame().setFileModified(true);
        }
    }
     */
    
    private void setComponents() {
        camModeCB.setSelectedItem(camera.getMode().name());
        camResCB.setSelectedItem(camera.getResolution());
        camRateCB.setSelectedItem(camera.getFrameRate());
        
        agCB.setSelected(camera.getAutoGain());
        aeCB.setSelected(camera.getAutoExposure());
        
        gainSp.setValue(camera.getGain());
        expSp.setValue(camera.getExposure());
        
        gainSp.setEnabled(!agCB.isSelected());
        expSp.setEnabled(!aeCB.isSelected());
    }
    
    /* Set the component models from the camera if model changed */
    private void setComponentModels() {
        Object[] modes = H.Mode.values();
        Object[] resolutions = H.Resolution.values();
        
        camModeCB.setModel(new DefaultComboBoxModel(modes));
        camModeCB.setEnabled(modes.length > 1);
    
        camResCB.setModel(new DefaultComboBoxModel(resolutions));
        camResCB.setEnabled(resolutions.length > 1);
        
        H.Resolution resolution = (H.Resolution) camResCB.getSelectedItem();
        Integer[] frameRates = camera.supportedFrameRate.get(resolution).toArray(new Integer[0]);
        camRateCB.setModel(new DefaultComboBoxModel(frameRates));
        camRateCB.setEnabled(frameRates.length > 1);
        
        agCB.setEnabled(camera.getAutoGain());
        aeCB.setEnabled(camera.getAutoExposure());
        
        gainSp.setModel(new SpinnerNumberModel(camera.getGain(), 
                PSEyeCamera.supportedGain.get(camera.getResolution()).min, 
                PSEyeCamera.supportedGain.get(camera.getResolution()).max, 
                1));
        expSp.setModel(new SpinnerNumberModel(camera.getExposure(), 
                PSEyeCamera.supportedExposure.get(camera.getResolution()).min,
                PSEyeCamera.supportedExposure.get(camera.getResolution()).max,
                1));
    }

   /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        camModeCB = new javax.swing.JComboBox();
        camResCB = new javax.swing.JComboBox();
        camRateCB = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        gainSp = new javax.swing.JSpinner();
        agCB = new javax.swing.JCheckBox();
        jSlider1 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        gainSp1 = new javax.swing.JSpinner();
        aeCB = new javax.swing.JCheckBox();
        expSp = new javax.swing.JSpinner();

        setBorder(javax.swing.BorderFactory.createTitledBorder("PS Eye Control"));
        setMaximumSize(new java.awt.Dimension(430, 280));
        setMinimumSize(new java.awt.Dimension(430, 280));
        setPreferredSize(new java.awt.Dimension(430, 280));

        statusLabel.setToolTipText("status output");

        jLabel6.setText("Mode");

        jLabel11.setText("Resolution");

        jLabel12.setText("Framerate");

        camModeCB.setMaximumRowCount(30);
        camModeCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        camModeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camModeCBActionPerformed(evt);
            }
        });

        camResCB.setMaximumRowCount(30);
        camResCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        camResCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camResCBActionPerformed(evt);
            }
        });

        camRateCB.setMaximumRowCount(30);
        camRateCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        camRateCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camRateCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(camRateCB, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(camResCB, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(camModeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(camModeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(camResCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(camRateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Camera", jPanel1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 127, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Exposure", jPanel3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 127, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Balance", jPanel4);

        gainSp.setToolTipText("CL eye gain (0-79)");
        gainSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gainSpStateChanged(evt);
            }
        });

        agCB.setText("Auto");
        agCB.setToolTipText("Enables AGC");
        agCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agCBActionPerformed(evt);
            }
        });

        jLabel2.setText("Value");

        jLabel3.setText("Value");

        gainSp1.setToolTipText("CL eye gain (0-79)");
        gainSp1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gainSp1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(gainSp1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(gainSp, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addComponent(agCB)
                .addGap(18, 18, 18))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agCB)
                    .addComponent(jLabel2)
                    .addComponent(gainSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(gainSp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Gain", jPanel2);

        aeCB.setText("Auto exposure");
        aeCB.setToolTipText("Enables automatic exposure control");
        aeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aeCBActionPerformed(evt);
            }
        });

        expSp.setToolTipText("CL eye exposure value (0-511)");
        expSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                expSpStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(553, 553, 553)
                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(aeCB)
                .addContainerGap(353, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(238, Short.MAX_VALUE)
                .addComponent(expSp, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(233, 233, 233))
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(218, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(aeCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(expSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(statusLabel)
                        .addGap(276, 276, 276))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void agCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agCBActionPerformed
        camera.setAutoGain(agCB.isSelected());
        gainSp.setValue(camera.getGain());
        gainSp.setEnabled(!agCB.isSelected());
}//GEN-LAST:event_agCBActionPerformed

    private void aeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aeCBActionPerformed
        camera.setAutoExposure(aeCB.isSelected());
        expSp.setValue(camera.getExposure());
        expSp.setEnabled(!aeCB.isSelected());
}//GEN-LAST:event_aeCBActionPerformed

    private void camModeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camModeCBActionPerformed
        try {
            PSEyeCamera.Mode mode = (PSEyeCamera.Mode) camModeCB.getSelectedItem();
            camera.setMode(mode);
            statusLabel.setText("");
        } catch (Exception e) {
            log.warning(e.toString());
            statusLabel.setText(e.toString());
        }
    }//GEN-LAST:event_camModeCBActionPerformed

    private void gainSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gainSpStateChanged
        camera.setGain((Integer) gainSp.getValue());
    }//GEN-LAST:event_gainSpStateChanged

    private void expSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_expSpStateChanged
        camera.setExposure((Integer) expSp.getValue());
    }//GEN-LAST:event_expSpStateChanged

    private void camResCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camResCBActionPerformed

        try {             PSEyeCamera.Resolution resolution = (PSEyeCamera.Resolution) camResCB.getSelectedItem();             camera.setResolution(resolution);             Integer[] frameRates = camera.supportedFrameRate.get(resolution).toArray(new Integer[0]);             camRateCB.setModel(new DefaultComboBoxModel(frameRates));             camRateCB.setSelectedItem(camera.getFrameRate());             camRateCB.setEnabled(frameRates.length > 1);             statusLabel.setText("");         } catch (Exception e) {             log.warning(e.toString());             statusLabel.setText(e.toString());         }     }//GEN-LAST:event_camResCBActionPerformed

    private void camRateCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camRateCBActionPerformed

        try {             int frameRate = (Integer) camRateCB.getSelectedItem();             camera.setFrameRate(frameRate);             statusLabel.setText("");         } catch (Exception e) {             log.warning(e.toString());             statusLabel.setText(e.toString());         }     }//GEN-LAST:event_camRateCBActionPerformed

    private void gainSp1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gainSp1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_gainSp1StateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox aeCB;
    private javax.swing.JCheckBox agCB;
    private javax.swing.JComboBox camModeCB;
    private javax.swing.JComboBox camRateCB;
    private javax.swing.JComboBox camResCB;
    private javax.swing.JSpinner expSp;
    private javax.swing.JSpinner gainSp;
    private javax.swing.JSpinner gainSp1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the camera
     */
    public PSEyeDriverInterface getcamera() {
        return camera;
    }

    /**
     * @param camera the camera to set
     */
    public void setcamera(H camera) {
        this.camera = camera;
    }

    @Override
    public void update(Observable o, Object arg) {
        if (o != null && o == camera) {
            handleUpdate(arg);
        }
    }

    /** The update arg is the event
     * 
     * @param arg the event from the PSEyeCLModelRetina
     */
    private void handleUpdate(Object o) {
        H.EVENT event;
        if (o == null) {
            setComponents();
            return;
        }
        if (o instanceof H.EVENT) {
            event = (H.EVENT) o;
            switch (event) {
                case MODE: 
                    camModeCB.setSelectedItem(camera.getMode());
                    break;
                case RESOLUTION: 
                    camResCB.setSelectedItem(camera.getResolution());
                    break;
                case FRAMERATE:
                    camRateCB.setSelectedItem(camera.getFrameRate());
                    break;
                case GAIN: 
                    gainSp.setValue(camera.getGain());
                    break;
                case EXPOSURE: 
                    expSp.setValue(camera.getExposure());
                    break;
                case AUTO_GAIN: 
                    agCB.setSelected(camera.getAutoGain());
                    gainSp.setEnabled(!agCB.isSelected());
                    break;
                case AUTO_EXPOSURE: 
                    aeCB.setSelected(camera.getAutoExposure());
                    expSp.setEnabled(!aeCB.isSelected());
                    break;
            }
            //setFileModified();
        }
    }
}
