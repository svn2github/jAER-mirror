/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AEViewerConsoleOutputFrame.java
 *
 * Created on Feb 1, 2009, 7:18:36 PM
 */
package net.sf.jaer.graphics;

import java.awt.Color;
import java.awt.EventQueue;
import java.beans.PropertyChangeSupport;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 * A window used to show Logger output.
 *<p>
 * Generates PropertyChangeEvent "cleared" when viewer is cleared.
 *
 * 
 * @author tobi
 */
public class AEViewerConsoleOutputFrame extends javax.swing.JFrame {

//    final Level[] levels = {Level.OFF, Level.INFO, Level.WARNING};
    private final MutableAttributeSet attr;
    private final StyledDocument doc;

    private PropertyChangeSupport support=new PropertyChangeSupport(this);

    /** Maximum document length in characters. If the document gets larger than this it is cleared.
     * This should prevent OutOfMemory errors during long runs.
     */
    public final int MAX_CHARS=80*80*100; // lines*lines/page*pages

    /** Creates new form AEViewerConsoleOutputFrame */
    public AEViewerConsoleOutputFrame() {
        initComponents();
        attr = pane.getInputAttributes();
        doc = pane.getStyledDocument();

//        levelComboxBox.removeAllItems();
//        for (Level l : levels) {
//            levelComboxBox.addItem(l.getName());
//        }
    }

    /** Applies to next append */
    private void setWarning() {
        StyleConstants.setForeground(attr, Color.red);
    }

    /** Applies to next append */
    private void setInfo() {
        StyleConstants.setForeground(attr, Color.black);
    }

    /** Appends the message using the level to set the style */
    public void append(final String s, final Level level) {
        EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    if(doc.getLength()>MAX_CHARS){
                        doc.remove(0, doc.getLength());
                        String s=new Date()+": cleared log to prevent OutOfMemory, increase MAX_CHARS (currently "+MAX_CHARS+") to save more logging";
                        doc.insertString(0, s, attr);
                    }
                    if(level.intValue()>Level.INFO.intValue()) setWarning(); else setInfo();
                    boolean tail = pane.getCaretPosition() == doc.getLength() ? true : false;
                    doc.insertString(doc.getLength(), s, attr);
                    if (tail) {
                        pane.setCaretPosition(doc.getLength());
                    }
                } catch (BadLocationException ex) {
                    Logger.getLogger(AEViewerConsoleOutputFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public void clear() {
        EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    support.firePropertyChange("cleared",null,null);
                    doc.remove(0, doc.getLength());
                //        txtTextLog.setText(null);
                } catch (BadLocationException ex) {
                    Logger.getLogger(AEViewerConsoleOutputFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pane = new javax.swing.JTextPane();

        setTitle("jAER Console");

        closeButton.setMnemonic('c');
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        clearButton.setMnemonic('r');
        clearButton.setText("Clear");
        clearButton.setToolTipText("Clear contents");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(pane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clearButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(closeButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AEViewerConsoleOutputFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane pane;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the support
     */
    public PropertyChangeSupport getSupport (){
        return support;
    }
}
