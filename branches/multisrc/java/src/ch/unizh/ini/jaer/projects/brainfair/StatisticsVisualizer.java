/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StatisticsVisualizer.java
 *
 * Created on Mar 6, 2012, 5:10:04 PM
 */
package ch.unizh.ini.jaer.projects.brainfair;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Insets;
import javax.media.opengl.GLCapabilities;

/**
 * Display of the statistics
 * @author Michael Pfeiffer
 */
public class StatisticsVisualizer extends javax.swing.JFrame {

    
    // Object to calculate statistics
    StatisticsCalculator statistics = null;
    
    // Open GL canvas to draw
    OrientationDisplay orientDisplay = null;
    OverallRateDisplay overallDisplay = null;
    // ISIDisplay isiDisplay = null;
    PixelDisplay pixelDisplay = null;
    TimeDisplay timeDisplay = null;
    
    /** Creates new form StatisticsVisualizer */
    public StatisticsVisualizer() {
        initComponents();
        statistics = null;
        createOpenGLCanvas();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OrientationPanel = new javax.swing.JPanel();
        OverallPanel = new javax.swing.JPanel();
        PixelPanel = new javax.swing.JPanel();
        LastTimePanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        OrientationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Orientation Statistics"));

        javax.swing.GroupLayout OrientationPanelLayout = new javax.swing.GroupLayout(OrientationPanel);
        OrientationPanel.setLayout(OrientationPanelLayout);
        OrientationPanelLayout.setHorizontalGroup(
            OrientationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 403, Short.MAX_VALUE)
        );
        OrientationPanelLayout.setVerticalGroup(
            OrientationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
        );

        OverallPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Overall Firing Rate"));

        javax.swing.GroupLayout OverallPanelLayout = new javax.swing.GroupLayout(OverallPanel);
        OverallPanel.setLayout(OverallPanelLayout);
        OverallPanelLayout.setHorizontalGroup(
            OverallPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 403, Short.MAX_VALUE)
        );
        OverallPanelLayout.setVerticalGroup(
            OverallPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 203, Short.MAX_VALUE)
        );

        PixelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Pixelwise Firing Rate"));

        javax.swing.GroupLayout PixelPanelLayout = new javax.swing.GroupLayout(PixelPanel);
        PixelPanel.setLayout(PixelPanelLayout);
        PixelPanelLayout.setHorizontalGroup(
            PixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 365, Short.MAX_VALUE)
        );
        PixelPanelLayout.setVerticalGroup(
            PixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 203, Short.MAX_VALUE)
        );

        LastTimePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Time of Last Spike")));

        javax.swing.GroupLayout LastTimePanelLayout = new javax.swing.GroupLayout(LastTimePanel);
        LastTimePanel.setLayout(LastTimePanelLayout);
        LastTimePanelLayout.setHorizontalGroup(
            LastTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 357, Short.MAX_VALUE)
        );
        LastTimePanelLayout.setVerticalGroup(
            LastTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 197, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PixelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LastTimePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OrientationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OverallPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OverallPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PixelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OrientationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LastTimePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        Insets orI = OrientationPanel.getInsets();
        Dimension orD = OrientationPanel.getSize();
        orD.setSize(orD.width-orI.left-orI.right, orD.height-orI.bottom-orI.top);
        orientDisplay.setSize(orD);
        orientDisplay.setLocation(orI.left, orI.top);
        
        Insets ovI = OverallPanel.getInsets();
        Dimension ovD = OverallPanel.getSize();
        ovD.setSize(ovD.width-ovI.left-ovI.right, ovD.height-ovI.bottom-ovI.top);
        overallDisplay.setSize(ovD);
        overallDisplay.setLocation(ovI.left, ovI.top);

        // isiDisplay.setSize(ISIPanel.getSize());

        Insets pxI = PixelPanel.getInsets();
        Dimension pxD = PixelPanel.getSize();
        pxD.setSize(pxD.width-pxI.left-pxI.right, pxD.height-pxI.bottom-pxI.top);
        pixelDisplay.setSize(pxD);
        pixelDisplay.setLocation(pxI.left, pxI.top);

        Insets tmI = LastTimePanel.getInsets();
        Dimension tmD = LastTimePanel.getSize();
        tmD.setSize(tmD.width-tmI.left-tmI.right, tmD.height-tmI.bottom-tmI.top);
        timeDisplay.setSize(tmD);
        timeDisplay.setLocation(tmI.left, tmI.top);
    }//GEN-LAST:event_formComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticsVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticsVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticsVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticsVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new StatisticsVisualizer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LastTimePanel;
    private javax.swing.JPanel OrientationPanel;
    private javax.swing.JPanel OverallPanel;
    private javax.swing.JPanel PixelPanel;
    // End of variables declaration//GEN-END:variables


    // Receive the object of data source
    public void setDataSource(StatisticsCalculator statistics) {
        this.statistics = statistics;
        if (orientDisplay != null)
            orientDisplay.setDataSource(statistics);
        if (overallDisplay != null)
            overallDisplay.setDataSource(statistics);
/*        if (isiDisplay != null)
            isiDisplay.setDataSource(statistics); */
        if (pixelDisplay != null)
            pixelDisplay.setDataSource(statistics);
        if (timeDisplay != null)
            timeDisplay.setDataSource(statistics);
    }

    /** Paint the statistics display */
    @Override
    public void paint(Graphics g) {
        super.paint(g);

        orientDisplay.update(g);
        overallDisplay.update(g);
        // isiDisplay.update(g);
        pixelDisplay.update(g);
        timeDisplay.update(g);
    }

    
    private void createOpenGLCanvas() {
        if (orientDisplay != null)
        {
            OrientationPanel.remove(orientDisplay);
        }
        else {
            // design capabilities of opengl canvas
            GLCapabilities caps = new GLCapabilities();
            caps.setDoubleBuffered(true);
            caps.setHardwareAccelerated(true);
            caps.setAlphaBits(8);
            caps.setRedBits(8);
            caps.setGreenBits(8);
            caps.setBlueBits(8);

            orientDisplay = new OrientationDisplay(caps);
            OrientationPanel.add(orientDisplay);
            orientDisplay.setVisible(true);
        }
    
        if (overallDisplay != null)
        {
            OverallPanel.remove(overallDisplay);
        }
        else {
            // design capabilities of opengl canvas
            GLCapabilities caps = new GLCapabilities();
            caps.setDoubleBuffered(true);
            caps.setHardwareAccelerated(true);
            caps.setAlphaBits(8);
            caps.setRedBits(8);
            caps.setGreenBits(8);
            caps.setBlueBits(8);

            overallDisplay = new OverallRateDisplay(caps);
            OverallPanel.add(overallDisplay);
            overallDisplay.setVisible(true);
        }
        
        /* if (isiDisplay != null)
        {
            ISIPanel.remove(isiDisplay);
        }
        else {
            // design capabilities of opengl canvas
            GLCapabilities caps = new GLCapabilities();
            caps.setDoubleBuffered(true);
            caps.setHardwareAccelerated(true);
            caps.setAlphaBits(8);
            caps.setRedBits(8);
            caps.setGreenBits(8);
            caps.setBlueBits(8);

            isiDisplay = new ISIDisplay(caps);
            ISIPanel.add(isiDisplay);
            isiDisplay.setVisible(true);
        } */

        if (pixelDisplay != null)
        {
            PixelPanel.remove(pixelDisplay);
        }
        else {
            // design capabilities of opengl canvas
            GLCapabilities caps = new GLCapabilities();
            caps.setDoubleBuffered(true);
            caps.setHardwareAccelerated(true);
            caps.setAlphaBits(8);
            caps.setRedBits(8);
            caps.setGreenBits(8);
            caps.setBlueBits(8);

            pixelDisplay = new PixelDisplay(caps);
            PixelPanel.add(pixelDisplay);
            pixelDisplay.setVisible(true);
        }

        if (timeDisplay != null)
        {
            LastTimePanel.remove(timeDisplay);
        }
        else {
            // design capabilities of opengl canvas
            GLCapabilities caps = new GLCapabilities();
            caps.setDoubleBuffered(true);
            caps.setHardwareAccelerated(true);
            caps.setAlphaBits(8);
            caps.setRedBits(8);
            caps.setGreenBits(8);
            caps.setBlueBits(8);

            timeDisplay = new TimeDisplay(caps);
            LastTimePanel.add(timeDisplay);
            timeDisplay.setVisible(true);
        }
    
    }
    
    public void resetDisplay() {
        if (overallDisplay != null) {
            overallDisplay.resetDisplay();
        }
        if (pixelDisplay != null)  {
            pixelDisplay.resetDisplay();
        }
    }
}
