/*
Copyright June 13, 2011 Andreas Steiner, Inst. of Neuroinformatics, UNI-ETH Zurich
*/

package ch.unizh.ini.jaer.projects.opticalflow.usbinterface;

import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import net.sf.jaer.hardwareinterface.HardwareInterfaceException;
import ch.unizh.ini.jaer.projects.opticalflow.mdc2d.MotionDataMDC2D;

/**
 *
 * this class is used by the <code>dsPIC33F_COM_OpticalFlowHardwareInterface</code> to
 * communicate important settings and show some diagnostic info via the GUI
 * <br /><br />
 * 
 * a variety of settings specific to this hardware interface (such as the delay
 * between two frames) as well as some handy shortcuts to already existing
 * configuration (such as the power-up and power-down of the on-chip bias-generator)
 * can be controlled via this interface
 * <br /><br />
 * 
 * at the same time, the controls serve as status indicators of the firmware's
 * current settings; this class also incorporates some buttons for recording
 * data from the interface...
 * 
 * @author andstein
 * @see dsPIC33F_COM_OpticalFlowHardwareInterface
 */
public class dsPIC33F_COM_ConfigurationPanel extends javax.swing.JPanel {

    private dsPIC33F_COM_OpticalFlowHardwareInterface hardwareInterface;
    private dsPIC33F_COM_CommandLineWindow commandLineWindow;
    private String lastAnalyseName= "";
    private boolean initializing;
    private boolean dontUpdateNow;
    
    static final Logger log=Logger.getLogger(dsPIC33F_COM_ConfigurationPanel.class.getName());

    /** Creates new form dsPIC33F_COM_ConfigurationPanel */
    public dsPIC33F_COM_ConfigurationPanel(dsPIC33F_COM_OpticalFlowHardwareInterface hardwareInterface) {
        initializing= true;
        this.hardwareInterface= hardwareInterface;
        
        initComponents();
        
        commandLineWindow= new dsPIC33F_COM_CommandLineWindow(hardwareInterface);

        comCombo.removeAllItems();
        comCombo.addItem("");
        for(String portName : hardwareInterface.getAvailablePortNames())
            comCombo.addItem(portName);

        delaysCB.setSelectedItem( Integer.toString(hardwareInterface.getDelayUs()/1000) ); // assume symmetric delays
        enableBiasgen.setSelected( hardwareInterface.isOnChipBiases() );
        comCombo.setSelectedItem( hardwareInterface.getPortName() );
        debuggingCB.setSelected( hardwareInterface.isDebugging() );
        pixelsCB.setSelected( hardwareInterface.isStreamPixels() );
        nthFrameCB.setSelectedItem( Integer.toString(hardwareInterface.getNthFrame()) );
        shiftAccCB.setSelectedItem( Integer.toString(hardwareInterface.getShiftAcc()) );
        
        dontUpdateNow= true;
        onChipADC.setSelected(hardwareInterface.isOnChipADC());            
        switch (hardwareInterface.getChannel()) {
            case MotionDataMDC2D.PHOTO:
                channelCB.setSelectedItem("photo");
                break;
            case MotionDataMDC2D.LMC1:
                channelCB.setSelectedItem("LMC1");
                break;
            case MotionDataMDC2D.LMC2:
                channelCB.setSelectedItem("LMC2");
                break;
            default:
                assert false;
        }
        dontUpdateNow= false;
        
        initializing= false;
    }

    public void setStatus(String status) {
        statusText.setText(status);
    }

    public void setStreaming(boolean b) {
        streamingCB.setSelected(b);
    }
    
    public void setOnChipBias(boolean b) {
        enableBiasgen.setSelected(b);
    }
    
    public void answerReceived(final String cmd,String answer)
    {
        final String str= answer.replace(";", "\n\t"); // 'format'
        
        Runnable doUpdate= new Runnable() {
            @Override
            public void run() {
                commandLineWindow.logString("("+cmd+") > " + str);
            }
        };
        SwingUtilities.invokeLater(doUpdate);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comCombo = new javax.swing.JComboBox();
        statusText = new javax.swing.JTextField();
        enableBiasgen = new javax.swing.JCheckBox();
        streamingCB = new javax.swing.JCheckBox();
        resetButton = new javax.swing.JButton();
        showCmdLineButton = new javax.swing.JButton();
        analysisPanel = new javax.swing.JPanel();
        frameSaveRateCB = new javax.swing.JComboBox();
        analyseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        delaysCB = new javax.swing.JComboBox();
        debuggingCB = new javax.swing.JCheckBox();
        fpnButton = new javax.swing.JButton();
        pixelsCB = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        nthFrameCB = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        channelCB = new javax.swing.JComboBox();
        onChipADC = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        shiftAccCB = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        cyclesPixelCB = new javax.swing.JComboBox();

        jLabel1.setText("port to use");

        comCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "COM10", "COM11", "COM12" }));
        comCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comComboActionPerformed(evt);
            }
        });

        statusText.setEditable(false);
        statusText.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        statusText.setText("(status)");

        enableBiasgen.setSelected(true);
        enableBiasgen.setText("enable biasgen");
        enableBiasgen.setToolTipText("activate on chip current bias generator (needs voltage biases either from on chip or off chip)");
        enableBiasgen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableBiasgenActionPerformed(evt);
            }
        });

        streamingCB.setText("streaming");
        streamingCB.setToolTipText("start streaming frames");
        streamingCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streamingCBActionPerformed(evt);
            }
        });

        resetButton.setText("reset");
        resetButton.setToolTipText("reset micro controller");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        showCmdLineButton.setText("cmds");
        showCmdLineButton.setToolTipText("show command window");
        showCmdLineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCmdLineButtonActionPerformed(evt);
            }
        });

        analysisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("log data"));

        frameSaveRateCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10000", "1000", "100", "50", "2" }));
        frameSaveRateCB.setToolTipText("specify how many frames should be saved (raw data)");
        frameSaveRateCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frameSaveRateCBActionPerformed(evt);
            }
        });

        analyseButton.setText("start");
        analyseButton.setToolTipText("start logging data (see log output where data is saved)");
        analyseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyseButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("store frame data : 2/");

        javax.swing.GroupLayout analysisPanelLayout = new javax.swing.GroupLayout(analysisPanel);
        analysisPanel.setLayout(analysisPanelLayout);
        analysisPanelLayout.setHorizontalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPanelLayout.createSequentialGroup()
                .addComponent(analyseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frameSaveRateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        analysisPanelLayout.setVerticalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(analyseButton)
                .addComponent(jLabel2)
                .addComponent(frameSaveRateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel3.setText("delays [ms]");

        delaysCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "5", "10", "15", "20", "30", "40" }));
        delaysCB.setToolTipText("delay (in milliseconds) to wait between acquiring consecutive frames; additional to the inherent delay due to calculation etc");
        delaysCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delaysCBActionPerformed(evt);
            }
        });

        debuggingCB.setText("dbg");
        debuggingCB.setToolTipText("enable debug output");
        debuggingCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debuggingCBActionPerformed(evt);
            }
        });

        fpnButton.setText("FPN");
        fpnButton.setToolTipText("remove fixed pattern noise using currently recorded image");
        fpnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpnButtonActionPerformed(evt);
            }
        });

        pixelsCB.setText("pixels");
        pixelsCB.setToolTipText("include pixel data into frames (vs only global motion vector)");
        pixelsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pixelsCBActionPerformed(evt);
            }
        });

        jLabel4.setText("every nth frame");

        nthFrameCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        nthFrameCB.setToolTipText("if set to one, every frame will be sent to the computer");
        nthFrameCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nthFrameCBActionPerformed(evt);
            }
        });

        jLabel5.setText("channel");

        channelCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "photo", "LMC1", "LMC2" }));
        channelCB.setToolTipText("what channel to sample values from");
        channelCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelCBActionPerformed(evt);
            }
        });

        onChipADC.setText("use on chip ADC");
        onChipADC.setToolTipText("whether to use on chip ADC (will probably crash firmware!)");
        onChipADC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onChipADCActionPerformed(evt);
            }
        });

        jLabel6.setText("reduce precision");

        shiftAccCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6" }));
        shiftAccCB.setToolTipText("increasing this value will prevent overflow errors and reduce the precision of the calculated value");
        shiftAccCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shiftAccCBActionPerformed(evt);
            }
        });

        jLabel7.setText("cycles/pixel");
        jLabel7.setToolTipText("");

        cyclesPixelCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "25", "50", "100", "150", "200", "250", "300", "350", "400" }));
        cyclesPixelCB.setToolTipText("specify period (clock cycles) to wait after moving the scanner before sampling analog values -- ");
        cyclesPixelCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cyclesPixelCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statusText))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(resetButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showCmdLineButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(debuggingCB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fpnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(58, 58, 58)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delaysCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(enableBiasgen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(streamingCB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pixelsCB)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(channelCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(onChipADC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nthFrameCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(shiftAccCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cyclesPixelCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analysisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(streamingCB)
                    .addComponent(enableBiasgen)
                    .addComponent(resetButton)
                    .addComponent(showCmdLineButton)
                    .addComponent(jLabel3)
                    .addComponent(delaysCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(debuggingCB)
                    .addComponent(fpnButton)
                    .addComponent(pixelsCB))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(analysisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(nthFrameCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(shiftAccCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(channelCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onChipADC))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cyclesPixelCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        comCombo.getAccessibleContext().setAccessibleDescription("select the port to which the MDC2Dv2 is connected");
        statusText.getAccessibleContext().setAccessibleDescription("indicates the status of the board");
        enableBiasgen.getAccessibleContext().setAccessibleDescription("switches between external DAC and on-chip bias generator -- be sure to DISCONNECT the jumpers before selecting");
        streamingCB.getAccessibleContext().setAccessibleDescription("starts/stops the actual transmission of frame data");
        resetButton.getAccessibleContext().setAccessibleDescription("re-initialize the device -- click after reset of the microcontroller");
    }// </editor-fold>//GEN-END:initComponents

    private void comComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comComboActionPerformed
        if (initializing)
            return;
        
        String portName= (String) comCombo.getSelectedItem();

        if (portName == null)
            return;

        try {
            if (portName.length() == 0)
                hardwareInterface.setPortName(null);
            else
                hardwareInterface.setPortName(portName);
        } catch (HardwareInterfaceException ex) {
            Logger.getLogger(dsPIC33F_COM_ConfigurationPanel.class.getName())
                    .warning("could not set portname : " + ex);
        }

    }//GEN-LAST:event_comComboActionPerformed

    /**
     * toggles streaming (i.e. stops streaming data if was streaming before
     * and vice versa)
     */
    public void toggleStreaming() {
        streamingCB.setSelected(!streamingCB.isSelected());
        streamingCBActionPerformed(null);
    }
    
    private void streamingCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streamingCBActionPerformed
        if (streamingCB.isSelected())
            hardwareInterface.startStreaming();
        else
            hardwareInterface.stopStreaming();
    }//GEN-LAST:event_streamingCBActionPerformed

    private void enableBiasgenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableBiasgenActionPerformed
        try {
            hardwareInterface.getChip().getBiasgen().setPowerDown(!enableBiasgen.isSelected());
        } catch (HardwareInterfaceException ex) {
            Logger.getLogger(dsPIC33F_COM_ConfigurationPanel.class.getName()).log(Level.WARNING, null, ex);
        }
    }//GEN-LAST:event_enableBiasgenActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        try {
            hardwareInterface.doReset();
        } catch (HardwareInterfaceException ex) {
            Logger.getLogger(dsPIC33F_COM_ConfigurationPanel.class.getName()).warning("could not reset interface : " + ex);
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    private void analyseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyseButtonActionPerformed
        if (hardwareInterface.isAnalysing()) {
            hardwareInterface.stopAnalysis();
            analyseButton.setText("analyse");
        } else {
            String name = (String) JOptionPane.showInputDialog(this, "name of analysis", lastAnalyseName);
            if (name==null)
                return;
            hardwareInterface.startAnalysis(name,Integer.parseInt((String) frameSaveRateCB.getSelectedItem()));
            analyseButton.setText("stop");
            lastAnalyseName= name;
        }
    }//GEN-LAST:event_analyseButtonActionPerformed

    private void showCmdLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCmdLineButtonActionPerformed
        commandLineWindow.setVisible(true);
    }//GEN-LAST:event_showCmdLineButtonActionPerformed

    private void frameSaveRateCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frameSaveRateCBActionPerformed
        // do nothing
    }//GEN-LAST:event_frameSaveRateCBActionPerformed

    private void delaysCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delaysCBActionPerformed
        int ms= Integer.parseInt((String) delaysCB.getSelectedItem());
        
        ms= Integer.parseInt((String) delaysCB.getSelectedItem());
        
        hardwareInterface.setDelayUs(ms*1000);
    }//GEN-LAST:event_delaysCBActionPerformed

    private void debuggingCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debuggingCBActionPerformed
        hardwareInterface.setDebugging(debuggingCB.isSelected());
    }//GEN-LAST:event_debuggingCBActionPerformed

    private void fpnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpnButtonActionPerformed
        hardwareInterface.setFPN();
    }//GEN-LAST:event_fpnButtonActionPerformed

    private void pixelsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pixelsCBActionPerformed
        hardwareInterface.setStreamPixels(pixelsCB.isSelected());
    }//GEN-LAST:event_pixelsCBActionPerformed

    protected void updateChannelADC() {
        if (dontUpdateNow)
            return;
        try {
            String which= (String)channelCB.getSelectedItem();
            if (which.equals("photo"))
                hardwareInterface.setChannel(MotionDataMDC2D.PHOTO, onChipADC.isSelected());
            else if (which.equals("LMC1"))
                hardwareInterface.setChannel(MotionDataMDC2D.LMC1, onChipADC.isSelected());
            else if (which.equals("LMC2"))
                hardwareInterface.setChannel(MotionDataMDC2D.LMC2, onChipADC.isSelected());
            else assert false;
        } catch (HardwareInterfaceException e) {
            log.warning("could not set channel : "+e);
        }
    }
    
    private void channelCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelCBActionPerformed
        updateChannelADC();
    }//GEN-LAST:event_channelCBActionPerformed

    private void onChipADCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onChipADCActionPerformed
        updateChannelADC();
    }//GEN-LAST:event_onChipADCActionPerformed

    private void nthFrameCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nthFrameCBActionPerformed
        int nth = Integer.parseInt((String) nthFrameCB.getSelectedItem());
        hardwareInterface.setNthFrame(nth);
    }//GEN-LAST:event_nthFrameCBActionPerformed

    private void shiftAccCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shiftAccCBActionPerformed
        int shiftAcc = Integer.parseInt((String) shiftAccCB.getSelectedItem());
        hardwareInterface.setShiftAcc(shiftAcc);
    }//GEN-LAST:event_shiftAccCBActionPerformed

    private void cyclesPixelCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cyclesPixelCBActionPerformed
        int cyclesPixel = Integer.parseInt((String) cyclesPixelCB.getSelectedItem());
        hardwareInterface.setCyclesPixel(cyclesPixel);
    }//GEN-LAST:event_cyclesPixelCBActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyseButton;
    private javax.swing.JPanel analysisPanel;
    private javax.swing.JComboBox channelCB;
    private javax.swing.JComboBox comCombo;
    private javax.swing.JComboBox cyclesPixelCB;
    private javax.swing.JCheckBox debuggingCB;
    private javax.swing.JComboBox delaysCB;
    private javax.swing.JCheckBox enableBiasgen;
    private javax.swing.JButton fpnButton;
    private javax.swing.JComboBox frameSaveRateCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox nthFrameCB;
    private javax.swing.JCheckBox onChipADC;
    private javax.swing.JCheckBox pixelsCB;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox shiftAccCB;
    private javax.swing.JButton showCmdLineButton;
    private javax.swing.JTextField statusText;
    private javax.swing.JCheckBox streamingCB;
    // End of variables declaration//GEN-END:variables

}
