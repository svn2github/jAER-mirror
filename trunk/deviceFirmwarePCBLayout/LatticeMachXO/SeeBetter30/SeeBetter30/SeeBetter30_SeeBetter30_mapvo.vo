
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 2.1.0.103

// ldbanno -n Verilog -o SeeBetter30_SeeBetter30_mapvo.vo -w -neg SeeBetter30_SeeBetter30_map.ncd 
// Netlist created on Mon Feb 25 15:16:15 2013
// Netlist written on Mon Feb 25 15:16:20 2013
// Design is for device LCMXO2280C
// Design is for package FTBGA256
// Design is for performance grade 3

`timescale 1 ns / 1 ps

module USBAER_top_level ( FX2FifoDataxDIO, FX2FifoInFullxSBI, FX2FifoWritexEBO, 
                          FX2FifoReadxEBO, FX2FifoPktEndxSBO, 
                          FX2FifoAddressxDO, IfClockxCI, ResetxRBI, Sync1xABI, 
                          SynchOutxSBO, PC0xSIO, PC1xSIO, PC2xSIO, PC3xSIO, 
                          PA0xSIO, PA1xSIO, PA3xSIO, PA7xSIO, PE2xSI, PE3xSI, 
                          FXLEDxSI, ADCclockxCO, ADCwordxDIO, ADCwritexEBO, 
                          ADCreadxEBO, ADCconvstxEBO, ADCbusyxSI, 
                          CDVSTestSRRowClockxSO, CDVSTestSRColClockxSO, 
                          CDVSTestSRRowInxSO, CDVSTestSRColInxSO, 
                          CDVSTestBiasEnablexEO, CDVSTestChipResetxRBO, 
                          CDVSTestColMode0xSO, CDVSTestColMode1xSO, 
                          CDVSTestBiasDiagSelxSO, CDVSTestBiasBitOutxSI, 
                          LED1xSO, LED2xSO, LED3xSO, DebugxSIO, 
                          AERMonitorREQxABI, AERMonitorACKxSBO, 
                          AERMonitorAddressxDI );
  input  FX2FifoInFullxSBI, IfClockxCI, ResetxRBI, Sync1xABI, PC0xSIO, PC1xSIO, 
         PC2xSIO, PC3xSIO, PA0xSIO, PA1xSIO, PA3xSIO, PA7xSIO, PE2xSI, PE3xSI, 
         FXLEDxSI, ADCbusyxSI, CDVSTestBiasBitOutxSI, AERMonitorREQxABI;
  input  [8:0] AERMonitorAddressxDI;
  output [15:0] FX2FifoDataxDIO;
  output FX2FifoWritexEBO, FX2FifoReadxEBO, FX2FifoPktEndxSBO;
  output [1:0] FX2FifoAddressxDO;
  output SynchOutxSBO, ADCclockxCO, ADCwritexEBO, ADCreadxEBO, ADCconvstxEBO, 
         CDVSTestSRRowClockxSO, CDVSTestSRColClockxSO, CDVSTestSRRowInxSO, 
         CDVSTestSRColInxSO, CDVSTestBiasEnablexEO, CDVSTestChipResetxRBO, 
         CDVSTestColMode0xSO, CDVSTestColMode1xSO, CDVSTestBiasDiagSelxSO, 
         LED1xSO, LED2xSO, LED3xSO, AERMonitorACKxSBO;
  inout  [11:0] ADCwordxDIO;
  inout  [15:0] DebugxSIO;
  wire   \ADCStateMachine_2/CountColxDP[17] , 
         \ADCStateMachine_2/CountColxDP[16] , 
         \ADCStateMachine_2/un6_countcolxdp_0_data_tmp[7] , 
         \ADCStateMachine_2/un6_countcolxdp_0_data_tmp[8] , 
         \ADCStateMachine_2/un19_nobxs_axb_15 , 
         \ADCStateMachine_2/un19_nobxs_axb_14 , 
         \ADCStateMachine_2/CountColxDP[15] , 
         \ADCStateMachine_2/CountColxDP[14] , 
         \ADCStateMachine_2/un19_nobxs_axb_13 , 
         \ADCStateMachine_2/un19_nobxs_axb_12 , 
         \ADCStateMachine_2/CountColxDP[13] , 
         \ADCStateMachine_2/CountColxDP[12] , 
         \ADCStateMachine_2/un6_countcolxdp_0_data_tmp[5] , 
         \ADCStateMachine_2/un19_nobxs_axb_11 , 
         \ADCStateMachine_2/un19_nobxs_axb_10 , 
         \ADCStateMachine_2/CountColxDP[11] , 
         \ADCStateMachine_2/CountColxDP[10] , 
         \ADCStateMachine_2/un19_nobxs_axb_9 , 
         \ADCStateMachine_2/un19_nobxs_axb_8 , 
         \ADCStateMachine_2/CountColxDP[9] , 
         \ADCStateMachine_2/CountColxDP[8] , 
         \ADCStateMachine_2/un6_countcolxdp_0_data_tmp[3] , 
         \ADCStateMachine_2/un19_nobxs_axb_7 , 
         \ADCStateMachine_2/un19_nobxs_axb_6 , 
         \ADCStateMachine_2/CountColxDP[7] , 
         \ADCStateMachine_2/CountColxDP[6] , 
         \ADCStateMachine_2/un19_nobxs_axb_5 , 
         \ADCStateMachine_2/un19_nobxs_axb_4 , 
         \ADCStateMachine_2/CountColxDP[5] , 
         \ADCStateMachine_2/CountColxDP[4] , 
         \ADCStateMachine_2/un6_countcolxdp_0_data_tmp[1] , 
         \ADCStateMachine_2/un19_nobxs_axb_3 , 
         \ADCStateMachine_2/un19_nobxs_axb_2 , 
         \ADCStateMachine_2/CountColxDP[3] , 
         \ADCStateMachine_2/CountColxDP[2] , \ADCStateMachine_2/un27_nobxs , 
         \ADCStateMachine_2/un19_nobxs_axb_0 , 
         \ADCStateMachine_2/CountColxDP[1] , 
         \ADCStateMachine_2/CountColxDP[0] , 
         \ADCStateMachine_2/un1_countcolxdp_0_data_tmp[7] , 
         \ADCStateMachine_2/un1_countcolxdp_0_data_tmp[8] , \SRDataOutxD[31] , 
         \SRDataOutxD[30] , \SRDataOutxD[29] , \SRDataOutxD[28] , 
         \ADCStateMachine_2/un1_countcolxdp_0_data_tmp[5] , \SRDataOutxD[27] , 
         \SRDataOutxD[26] , \SRDataOutxD[25] , \SRDataOutxD[24] , 
         \ADCStateMachine_2/un1_countcolxdp_0_data_tmp[3] , \SRDataOutxD[23] , 
         \SRDataOutxD[22] , \SRDataOutxD[21] , \SRDataOutxD[20] , 
         \ADCStateMachine_2/un1_countcolxdp_0_data_tmp[1] , \SRDataOutxD[19] , 
         \SRDataOutxD[18] , \SRDataOutxD[17] , \SRDataOutxD[16] , 
         \ADCStateMachine_2/DividerColxDP[32] , 
         \ADCStateMachine_2/DividerColxDP[31] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[29] , 
         \ADCStateMachine_2/un1_DividerColxDP_2 , 
         \ADCStateMachine_2/DividerColxDP[30] , 
         \ADCStateMachine_2/DividerColxDP[29] , 
         \ADCStateMachine_2/DividerColxDP[28] , 
         \ADCStateMachine_2/DividerColxDP[27] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[25] , 
         \ADCStateMachine_2/DividerColxDP[26] , 
         \ADCStateMachine_2/DividerColxDP[25] , 
         \ADCStateMachine_2/DividerColxDP[24] , 
         \ADCStateMachine_2/DividerColxDP[23] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[21] , 
         \ADCStateMachine_2/DividerColxDP[22] , 
         \ADCStateMachine_2/DividerColxDP[21] , 
         \ADCStateMachine_2/DividerColxDP[20] , 
         \ADCStateMachine_2/DividerColxDP[19] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[17] , 
         \ADCStateMachine_2/DividerColxDP[18] , 
         \ADCStateMachine_2/DividerColxDP[17] , 
         \ADCStateMachine_2/DividerColxDP[16] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[15] , 
         \ADCStateMachine_2/DividerColxDP[15] , 
         \ADCStateMachine_2/DividerColxDP[14] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[13] , 
         \ADCStateMachine_2/DividerColxDP[13] , 
         \ADCStateMachine_2/DividerColxDP[12] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[11] , 
         \ADCStateMachine_2/DividerColxDP[11] , 
         \ADCStateMachine_2/DividerColxDP[10] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[9] , 
         \ADCStateMachine_2/DividerColxDP[9] , 
         \ADCStateMachine_2/DividerColxDP[8] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[7] , 
         \ADCStateMachine_2/DividerColxDP[7] , 
         \ADCStateMachine_2/DividerColxDP[6] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[5] , 
         \ADCStateMachine_2/DividerColxDP[5] , 
         \ADCStateMachine_2/DividerColxDP[4] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[3] , 
         \ADCStateMachine_2/DividerColxDP[3] , 
         \ADCStateMachine_2/DividerColxDP[2] , 
         \ADCStateMachine_2/un1_DividerColxDP_10_cry[1] , 
         \ADCStateMachine_2/DividerColxDP[1] , 
         \ADCStateMachine_2/DividerColxDP[0] , 
         \ADCStateMachine_2/un1_DividerColxDP_11_cry[29] , 
         \ADCStateMachine_2/un1_DividerColxDP_4 , 
         \ADCStateMachine_2/un1_DividerColxDP_11_cry[25] , 
         \ADCStateMachine_2/un1_DividerColxDP_11_lt25 , 
         \ADCStateMachine_2/un1_DividerColxDP_11_df25 , 
         \ADCStateMachine_2/un1_DividerColxDP_11_lt23 , 
         \ADCStateMachine_2/un1_DividerColxDP_11_df23 , 
         \ADCStateMachine_2/un1_DividerColxDP_11_cry[21] , 
         \ADCStateMachine_2/un1_DividerColxDP_11_lt21 , 
         \ADCStateMachine_2/un1_DividerColxDP_11_df21 , 
         \ADCStateMachine_2/un1_DividerColxDP_11_lt19 , 
         \ADCStateMachine_2/un1_DividerColxDP_11_df19 , 
         \ADCStateMachine_2/un1_DividerColxDP_11_cry[17] , 
         \ADCStateMachine_2/un1_DividerColxDP_11_lt17 , 
         \ADCStateMachine_2/un1_DividerColxDP_11_df17 , \DebugxSIO_c[6] , 
         \ADCStateMachine_2/un1_DividerColxDP_11_cry[15] , \DebugxSIO_c[5] , 
         \DebugxSIO_c[4] , \ADCStateMachine_2/un1_DividerColxDP_11_cry[13] , 
         \DebugxSIO_c[3] , \DebugxSIO_c[2] , 
         \ADCStateMachine_2/un1_DividerColxDP_11_cry[11] , \DebugxSIO_c[1] , 
         \DebugxSIO_c[0] , \ADCStateMachine_2/un1_DividerColxDP_11_cry[9] , 
         \ADCStateMachine_2/un1_DividerColxDP_11_cry[7] , 
         \ADCStateMachine_2/un1_DividerColxDP_11_cry[5] , 
         \ADCStateMachine_2/un1_DividerColxDP_11_cry[3] , 
         \ADCStateMachine_2/un1_DividerColxDP_11_cry[1] , 
         \ADCStateMachine_2/VCC , 
         \ADCStateMachine_2/un1_DividerColxDP_0_cry[29] , 
         \ADCStateMachine_2/un1_DividerColxDP_3 , 
         \ADCStateMachine_2/un1_DividerColxDP_0_cry[25] , 
         \ADCStateMachine_2/un1_DividerColxDP_0_cry[21] , 
         \ADCStateMachine_2/un1_DividerColxDP_0_cry[17] , 
         \ADCStateMachine_2/un1_DividerColxDP_0_cry[15] , \SRDataOutxD[79] , 
         \SRDataOutxD[78] , \ADCStateMachine_2/un1_DividerColxDP_0_cry[13] , 
         \SRDataOutxD[77] , \SRDataOutxD[76] , 
         \ADCStateMachine_2/un1_DividerColxDP_0_cry[11] , \SRDataOutxD[75] , 
         \SRDataOutxD[74] , \ADCStateMachine_2/un1_DividerColxDP_0_cry[9] , 
         \SRDataOutxD[73] , \SRDataOutxD[72] , 
         \ADCStateMachine_2/un1_DividerColxDP_0_cry[7] , \SRDataOutxD[71] , 
         \SRDataOutxD[70] , \ADCStateMachine_2/un1_DividerColxDP_0_cry[5] , 
         \SRDataOutxD[69] , \SRDataOutxD[68] , 
         \ADCStateMachine_2/un1_DividerColxDP_0_cry[3] , \SRDataOutxD[67] , 
         \SRDataOutxD[66] , \ADCStateMachine_2/un1_DividerColxDP_0_cry[1] , 
         \SRDataOutxD[65] , \SRDataOutxD[64] , 
         \ADCStateMachine_2/un6_usecxei_cry_15 , 
         \ADCStateMachine_2/un6_usecxei , 
         \ADCStateMachine_2/un3_usecxei_cry_8_0_S1 , 
         \ADCStateMachine_2/un3_usecxei_cry_8_0_S0 , 
         \ADCStateMachine_2/un6_usecxei_cry_13 , 
         \ADCStateMachine_2/un3_usecxei_cry_6_0_S1 , 
         \ADCStateMachine_2/un3_usecxei_cry_6_0_S0 , 
         \ADCStateMachine_2/un6_usecxei_cry_11 , 
         \ADCStateMachine_2/un3_usecxei_cry_4_0_S1 , 
         \ADCStateMachine_2/un3_usecxei_cry_4_0_S0 , 
         \ADCStateMachine_2/un6_usecxei_cry_9 , 
         \ADCStateMachine_2/un3_usecxei_cry_2_0_S1 , 
         \ADCStateMachine_2/un3_usecxei_cry_2_0_S0 , 
         \ADCStateMachine_2/un6_usecxei_cry_7 , 
         \ADCStateMachine_2/un3_usecxei_cry_0_0_S1 , 
         \ADCStateMachine_2/un6_usecxei_cry_5 , 
         \ADCStateMachine_2/un6_usecxei_cry_3 , 
         \ADCStateMachine_2/un6_usecxei_cry_1 , 
         \ADCStateMachine_2/un13_nobxs_cry_15 , \ADCStateMachine_2/un13_nobxs , 
         \ADCStateMachine_2/un13_nobxs_15 , \ADCStateMachine_2/un13_nobxs_14 , 
         \ADCStateMachine_2/un13_nobxs_cry_13 , 
         \ADCStateMachine_2/un13_nobxs_13 , \ADCStateMachine_2/un13_nobxs_12 , 
         \ADCStateMachine_2/un13_nobxs_cry_11 , 
         \ADCStateMachine_2/un13_nobxs_11 , \ADCStateMachine_2/un13_nobxs_10 , 
         \ADCStateMachine_2/un13_nobxs_cry_9 , 
         \ADCStateMachine_2/un13_nobxs_9 , \ADCStateMachine_2/un13_nobxs_8 , 
         \ADCStateMachine_2/un13_nobxs_cry_7 , 
         \ADCStateMachine_2/un13_nobxs_7 , \ADCStateMachine_2/un13_nobxs_6 , 
         \ADCStateMachine_2/un13_nobxs_cry_5 , 
         \ADCStateMachine_2/un13_nobxs_5 , \ADCStateMachine_2/un13_nobxs_4 , 
         \ADCStateMachine_2/un13_nobxs_cry_3 , 
         \ADCStateMachine_2/un13_nobxs_3 , \ADCStateMachine_2/un13_nobxs_2 , 
         \ADCStateMachine_2/un13_nobxs_cry_1 , 
         \ADCStateMachine_2/un6_nobxs_cry_15 , \ADCStateMachine_2/un6_nobxs , 
         \ADCStateMachine_2/un3_nobxs_cry_14_0_S1 , 
         \ADCStateMachine_2/un3_nobxs_cry_14_0_S0 , 
         \ADCStateMachine_2/un6_nobxs_cry_13 , 
         \ADCStateMachine_2/un3_nobxs_cry_12_0_S1 , 
         \ADCStateMachine_2/un3_nobxs_cry_12_0_S0 , 
         \ADCStateMachine_2/un6_nobxs_cry_11 , 
         \ADCStateMachine_2/un3_nobxs_cry_10_0_S1 , 
         \ADCStateMachine_2/un3_nobxs_cry_10_0_S0 , 
         \ADCStateMachine_2/un6_nobxs_cry_9 , 
         \ADCStateMachine_2/un3_nobxs_cry_8_0_S1 , 
         \ADCStateMachine_2/un3_nobxs_cry_8_0_S0 , 
         \ADCStateMachine_2/un6_nobxs_cry_7 , 
         \ADCStateMachine_2/un3_nobxs_cry_6_0_S1 , 
         \ADCStateMachine_2/un3_nobxs_cry_6_0_S0 , 
         \ADCStateMachine_2/un6_nobxs_cry_5 , 
         \ADCStateMachine_2/un3_nobxs_cry_4_0_S1 , 
         \ADCStateMachine_2/un3_nobxs_cry_4_0_S0 , 
         \ADCStateMachine_2/un6_nobxs_cry_3 , 
         \ADCStateMachine_2/un3_nobxs_cry_2_0_S1 , 
         \ADCStateMachine_2/un3_nobxs_cry_2_0_S0 , 
         \ADCStateMachine_2/un6_nobxs_cry_1 , 
         \ADCStateMachine_2/un3_nobxs_cry_0_0_S1 , 
         \ADCStateMachine_2/un30_nobxs_cry_15 , \ADCStateMachine_2/un30_nobxs , 
         \ADCStateMachine_2/un30_nobxs_15 , \ADCStateMachine_2/un30_nobxs_14 , 
         \ADCStateMachine_2/un30_nobxs_cry_13 , 
         \ADCStateMachine_2/un30_nobxs_13 , \ADCStateMachine_2/un30_nobxs_12 , 
         \ADCStateMachine_2/un30_nobxs_cry_11 , 
         \ADCStateMachine_2/un30_nobxs_11 , \ADCStateMachine_2/un30_nobxs_10 , 
         \ADCStateMachine_2/un30_nobxs_cry_9 , 
         \ADCStateMachine_2/un30_nobxs_9 , \ADCStateMachine_2/un30_nobxs_8 , 
         \ADCStateMachine_2/un30_nobxs_cry_7 , 
         \ADCStateMachine_2/un30_nobxs_7 , \ADCStateMachine_2/un30_nobxs_6 , 
         \ADCStateMachine_2/un30_nobxs_cry_5 , 
         \ADCStateMachine_2/un30_nobxs_5 , \ADCStateMachine_2/un30_nobxs_4 , 
         \ADCStateMachine_2/un30_nobxs_cry_3 , 
         \ADCStateMachine_2/un30_nobxs_3 , \ADCStateMachine_2/un30_nobxs_2 , 
         \ADCStateMachine_2/un30_nobxs_cry_1 , \SRDataOutxD[32] , 
         \ADCStateMachine_2/un22_nobxs_cry_15 , \ADCStateMachine_2/un22_nobxs , 
         \ADCStateMachine_2/un19_nobxs_cry_14_0_S1 , 
         \ADCStateMachine_2/un19_nobxs_cry_14_0_S0 , 
         \ADCStateMachine_2/un22_nobxs_cry_13 , 
         \ADCStateMachine_2/un19_nobxs_cry_12_0_S1 , 
         \ADCStateMachine_2/un19_nobxs_cry_12_0_S0 , 
         \ADCStateMachine_2/un22_nobxs_cry_11 , 
         \ADCStateMachine_2/un19_nobxs_cry_10_0_S1 , 
         \ADCStateMachine_2/un19_nobxs_cry_10_0_S0 , 
         \ADCStateMachine_2/un22_nobxs_cry_9 , 
         \ADCStateMachine_2/un19_nobxs_cry_8_0_S1 , 
         \ADCStateMachine_2/un19_nobxs_cry_8_0_S0 , 
         \ADCStateMachine_2/un22_nobxs_cry_7 , 
         \ADCStateMachine_2/un19_nobxs_cry_6_0_S1 , 
         \ADCStateMachine_2/un19_nobxs_cry_6_0_S0 , 
         \ADCStateMachine_2/un22_nobxs_cry_5 , 
         \ADCStateMachine_2/un19_nobxs_cry_4_0_S1 , 
         \ADCStateMachine_2/un19_nobxs_cry_4_0_S0 , 
         \ADCStateMachine_2/un22_nobxs_cry_3 , 
         \ADCStateMachine_2/un19_nobxs_cry_2_0_S1 , 
         \ADCStateMachine_2/un19_nobxs_cry_2_0_S0 , 
         \ADCStateMachine_2/un22_nobxs_cry_1 , 
         \ADCStateMachine_2/un19_nobxs_cry_0_0_S1 , 
         \ADCStateMachine_2/un15_usecxei_cry_15 , 
         \ADCStateMachine_2/un15_usecxei , 
         \ADCStateMachine_2/un12_usecxei_cry_14_0_S1 , 
         \ADCStateMachine_2/un12_usecxei_cry_14_0_S0 , 
         \ADCStateMachine_2/un15_usecxei_cry_13 , 
         \ADCStateMachine_2/un12_usecxei_cry_12_0_S1 , 
         \ADCStateMachine_2/un12_usecxei_cry_12_0_S0 , 
         \ADCStateMachine_2/un15_usecxei_cry_11 , 
         \ADCStateMachine_2/un12_usecxei_cry_10_0_S1 , 
         \ADCStateMachine_2/un12_usecxei_cry_10_0_S0 , 
         \ADCStateMachine_2/un15_usecxei_cry_9 , 
         \ADCStateMachine_2/un12_usecxei_cry_8_0_S1 , 
         \ADCStateMachine_2/un12_usecxei_cry_8_0_S0 , 
         \ADCStateMachine_2/un15_usecxei_cry_7 , 
         \ADCStateMachine_2/un12_usecxei_cry_6_0_S1 , 
         \ADCStateMachine_2/un12_usecxei_cry_6_0_S0 , 
         \ADCStateMachine_2/un15_usecxei_cry_5 , 
         \ADCStateMachine_2/un12_usecxei_cry_4_0_S1 , 
         \ADCStateMachine_2/un12_usecxei_cry_4_0_S0 , 
         \ADCStateMachine_2/un15_usecxei_cry_3 , 
         \ADCStateMachine_2/un12_usecxei_cry_2_0_S1 , 
         \ADCStateMachine_2/un12_usecxei_cry_2_0_S0 , 
         \ADCStateMachine_2/un15_usecxei_cry_1 , 
         \ADCStateMachine_2/un12_usecxei_cry_0_0_S1 , 
         \ADCStateMachine_2/DividerRowxDP[16] , 
         \ADCStateMachine_2/un1_DividerRowxDP_cry_15 , 
         \ADCStateMachine_2/staterowxdn16_li , 
         \ADCStateMachine_2/DividerRowxDP[15] , \SRDataOutxD[63] , 
         \ADCStateMachine_2/DividerRowxDP[14] , \SRDataOutxD[62] , 
         \ADCStateMachine_2/un1_DividerRowxDP_cry_13 , 
         \ADCStateMachine_2/DividerRowxDP[13] , \SRDataOutxD[61] , 
         \ADCStateMachine_2/DividerRowxDP[12] , \SRDataOutxD[60] , 
         \ADCStateMachine_2/un1_DividerRowxDP_cry_11 , 
         \ADCStateMachine_2/DividerRowxDP[11] , \SRDataOutxD[59] , 
         \ADCStateMachine_2/DividerRowxDP[10] , \SRDataOutxD[58] , 
         \ADCStateMachine_2/un1_DividerRowxDP_cry_9 , 
         \ADCStateMachine_2/DividerRowxDP[9] , \SRDataOutxD[57] , 
         \ADCStateMachine_2/DividerRowxDP[8] , \SRDataOutxD[56] , 
         \ADCStateMachine_2/un1_DividerRowxDP_cry_7 , 
         \ADCStateMachine_2/DividerRowxDP[7] , \SRDataOutxD[55] , 
         \ADCStateMachine_2/DividerRowxDP[6] , \SRDataOutxD[54] , 
         \ADCStateMachine_2/un1_DividerRowxDP_cry_5 , 
         \ADCStateMachine_2/DividerRowxDP[5] , \SRDataOutxD[53] , 
         \ADCStateMachine_2/DividerRowxDP[4] , \SRDataOutxD[52] , 
         \ADCStateMachine_2/un1_DividerRowxDP_cry_3 , 
         \ADCStateMachine_2/DividerRowxDP[3] , \SRDataOutxD[51] , 
         \ADCStateMachine_2/DividerRowxDP[2] , \SRDataOutxD[50] , 
         \ADCStateMachine_2/un1_DividerRowxDP_cry_1 , 
         \ADCStateMachine_2/DividerRowxDP[1] , \SRDataOutxD[49] , 
         \ADCStateMachine_2/DividerRowxDP[0] , \SRDataOutxD[48] , 
         \ADCStateMachine_2/un1_DividerRowxDP_1_cry_15 , 
         \ADCStateMachine_2/staterowxdn22_li , 
         \ADCStateMachine_2/un1_DividerRowxDP_1_cry_13 , 
         \ADCStateMachine_2/un1_DividerRowxDP_1_cry_11 , 
         \ADCStateMachine_2/un1_DividerRowxDP_1_cry_9 , 
         \ADCStateMachine_2/un1_DividerRowxDP_1_cry_7 , 
         \ADCStateMachine_2/un1_DividerRowxDP_1_cry_5 , 
         \ADCStateMachine_2/un1_DividerRowxDP_1_cry_3 , 
         \ADCStateMachine_2/un1_DividerRowxDP_1_cry_1 , 
         \ADCStateMachine_2/un1_DividerColxDP_cry[29] , 
         \ADCStateMachine_2/un1_DividerColxDP , 
         \ADCStateMachine_2/un1_DividerColxDP_cry[25] , 
         \ADCStateMachine_2/un1_DividerColxDP_cry[21] , 
         \ADCStateMachine_2/un1_DividerColxDP_cry[17] , 
         \ADCStateMachine_2/un1_DividerColxDP_cry[15] , \SRDataOutxD[95] , 
         \SRDataOutxD[94] , \ADCStateMachine_2/un1_DividerColxDP_cry[13] , 
         \SRDataOutxD[93] , \SRDataOutxD[92] , 
         \ADCStateMachine_2/un1_DividerColxDP_cry[11] , \SRDataOutxD[91] , 
         \SRDataOutxD[90] , \ADCStateMachine_2/un1_DividerColxDP_cry[9] , 
         \SRDataOutxD[89] , \SRDataOutxD[88] , 
         \ADCStateMachine_2/un1_DividerColxDP_cry[7] , \SRDataOutxD[87] , 
         \SRDataOutxD[86] , \ADCStateMachine_2/un1_DividerColxDP_cry[5] , 
         \SRDataOutxD[85] , \SRDataOutxD[84] , 
         \ADCStateMachine_2/un1_DividerColxDP_cry[3] , \SRDataOutxD[83] , 
         \SRDataOutxD[82] , \ADCStateMachine_2/un1_DividerColxDP_cry[1] , 
         \SRDataOutxD[81] , \SRDataOutxD[80] , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[29] , 
         \ADCStateMachine_2/un1_DividerColxDP_1 , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[25] , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[21] , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[17] , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[15] , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[13] , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[11] , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[9] , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[7] , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[5] , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[3] , 
         \ADCStateMachine_2/un1_DividerColxDP_1_cry[1] , 
         \ADCStateMachine_2/un3_usecxei_cry_7 , 
         \ADCStateMachine_2/un3_usecxei_cry_5 , 
         \ADCStateMachine_2/un3_usecxei_cry_3 , 
         \ADCStateMachine_2/un3_usecxei_cry_1 , 
         \ADCStateMachine_2/un10_nobxs_cry_13 , 
         \ADCStateMachine_2/un10_nobxs_cry_11 , 
         \ADCStateMachine_2/un10_nobxs_cry_9 , 
         \ADCStateMachine_2/un10_nobxs_cry_7 , 
         \ADCStateMachine_2/un10_nobxs_cry_5 , 
         \ADCStateMachine_2/un10_nobxs_cry_3 , 
         \ADCStateMachine_2/un10_nobxs_cry_1 , \SRDataOutxD[47] , 
         \SRDataOutxD[46] , \ADCStateMachine_2/un16_nobxs_cry_13 , 
         \SRDataOutxD[45] , \SRDataOutxD[44] , 
         \ADCStateMachine_2/un16_nobxs_cry_11 , \SRDataOutxD[43] , 
         \SRDataOutxD[42] , \ADCStateMachine_2/un16_nobxs_cry_9 , 
         \SRDataOutxD[41] , \SRDataOutxD[40] , 
         \ADCStateMachine_2/un16_nobxs_cry_7 , \SRDataOutxD[39] , 
         \SRDataOutxD[38] , \ADCStateMachine_2/un16_nobxs_cry_5 , 
         \SRDataOutxD[37] , \SRDataOutxD[36] , 
         \ADCStateMachine_2/un16_nobxs_cry_3 , \SRDataOutxD[35] , 
         \SRDataOutxD[34] , \ADCStateMachine_2/un16_nobxs_cry_1 , 
         \SRDataOutxD[33] , \ADCStateMachine_2/un3_nobxs_cry_13 , 
         \ADCStateMachine_2/un3_nobxs_cry_11 , 
         \ADCStateMachine_2/un3_nobxs_cry_9 , 
         \ADCStateMachine_2/un3_nobxs_cry_7 , 
         \ADCStateMachine_2/un3_nobxs_cry_5 , 
         \ADCStateMachine_2/un3_nobxs_cry_3 , 
         \ADCStateMachine_2/un3_nobxs_cry_1 , 
         \ADCStateMachine_2/un19_nobxs_cry_13 , 
         \ADCStateMachine_2/un19_nobxs_cry_11 , 
         \ADCStateMachine_2/un19_nobxs_cry_9 , 
         \ADCStateMachine_2/un19_nobxs_cry_7 , 
         \ADCStateMachine_2/un19_nobxs_cry_5 , 
         \ADCStateMachine_2/un19_nobxs_cry_3 , 
         \ADCStateMachine_2/un19_nobxs_cry_1 , 
         \ADCStateMachine_2/un12_usecxei_cry_13 , 
         \ADCStateMachine_2/un12_usecxei_cry_11 , 
         \ADCStateMachine_2/un12_usecxei_cry_9 , 
         \ADCStateMachine_2/un12_usecxei_cry_7 , 
         \ADCStateMachine_2/un12_usecxei_cry_5 , 
         \ADCStateMachine_2/un12_usecxei_cry_3 , 
         \ADCStateMachine_2/un12_usecxei_cry_1 , 
         \ADCStateMachine_2/un27_nobxs_cry_14 , 
         \ADCStateMachine_2/un27_nobxs_cry_12 , 
         \ADCStateMachine_2/un27_nobxs_cry_10 , 
         \ADCStateMachine_2/un27_nobxs_cry_8 , 
         \ADCStateMachine_2/un27_nobxs_cry_6 , 
         \ADCStateMachine_2/un27_nobxs_cry_4 , 
         \ADCStateMachine_2/un27_nobxs_cry_2 , 
         \ADCStateMachine_2/DividerColxDP_cry[31] , 
         \ADCStateMachine_2/DividerColxDP_s[32] , 
         \ADCStateMachine_2/DividerColxDP_cry[29] , 
         \ADCStateMachine_2/DividerColxDP_s[30] , 
         \ADCStateMachine_2/DividerColxDP_s[31] , 
         \ADCStateMachine_2/DividerColxDP_cry[27] , 
         \ADCStateMachine_2/DividerColxDP_s[28] , 
         \ADCStateMachine_2/DividerColxDP_s[29] , 
         \ADCStateMachine_2/DividerColxDP_cry[25] , 
         \ADCStateMachine_2/DividerColxDP_s[26] , 
         \ADCStateMachine_2/DividerColxDP_s[27] , 
         \ADCStateMachine_2/DividerColxDP_cry[23] , 
         \ADCStateMachine_2/DividerColxDP_s[24] , 
         \ADCStateMachine_2/DividerColxDP_s[25] , 
         \ADCStateMachine_2/DividerColxDP_cry[21] , 
         \ADCStateMachine_2/DividerColxDP_s[22] , 
         \ADCStateMachine_2/DividerColxDP_s[23] , 
         \ADCStateMachine_2/DividerColxDP_cry[19] , 
         \ADCStateMachine_2/DividerColxDP_s[20] , 
         \ADCStateMachine_2/DividerColxDP_s[21] , 
         \ADCStateMachine_2/DividerColxDP_cry[17] , 
         \ADCStateMachine_2/DividerColxDP_s[18] , 
         \ADCStateMachine_2/DividerColxDP_s[19] , 
         \ADCStateMachine_2/DividerColxDP_cry[15] , 
         \ADCStateMachine_2/DividerColxDP_s[16] , 
         \ADCStateMachine_2/DividerColxDP_s[17] , 
         \ADCStateMachine_2/DividerColxDP_cry[13] , 
         \ADCStateMachine_2/DividerColxDP_s[14] , 
         \ADCStateMachine_2/DividerColxDP_s[15] , 
         \ADCStateMachine_2/DividerColxDP_cry[11] , 
         \ADCStateMachine_2/DividerColxDP_s[12] , 
         \ADCStateMachine_2/DividerColxDP_s[13] , 
         \ADCStateMachine_2/DividerColxDP_cry[9] , 
         \ADCStateMachine_2/DividerColxDP_s[10] , 
         \ADCStateMachine_2/DividerColxDP_s[11] , 
         \ADCStateMachine_2/DividerColxDP_cry[7] , 
         \ADCStateMachine_2/DividerColxDP_s[8] , 
         \ADCStateMachine_2/DividerColxDP_s[9] , 
         \ADCStateMachine_2/DividerColxDP_cry[5] , 
         \ADCStateMachine_2/DividerColxDP_s[6] , 
         \ADCStateMachine_2/DividerColxDP_s[7] , 
         \ADCStateMachine_2/DividerColxDP_cry[3] , 
         \ADCStateMachine_2/DividerColxDP_s[4] , 
         \ADCStateMachine_2/DividerColxDP_s[5] , 
         \ADCStateMachine_2/DividerColxDP_cry[1] , 
         \ADCStateMachine_2/DividerColxDP_s[2] , 
         \ADCStateMachine_2/DividerColxDP_s[3] , 
         \ADCStateMachine_2/DividerColxDP_s[0] , 
         \ADCStateMachine_2/DividerColxDP_s[1] , 
         \ADCStateMachine_2/CountRowxDP[4] , 
         \ADCStateMachine_2/CountRowxDP_cry[3] , 
         \ADCStateMachine_2/CountRowxDP_s[4] , 
         \ADCStateMachine_2/CountRowxDP[3] , 
         \ADCStateMachine_2/CountRowxDP[2] , 
         \ADCStateMachine_2/CountRowxDP_cry[1] , 
         \ADCStateMachine_2/CountRowxDP_s[2] , 
         \ADCStateMachine_2/CountRowxDP_s[3] , 
         \ADCStateMachine_2/CountRowxDP[1] , 
         \ADCStateMachine_2/CountRowxDP[0] , \ADCStateMachine_2/CountRowxDP , 
         \ADCStateMachine_2/CountRowxDP_s[0] , 
         \ADCStateMachine_2/CountRowxDP_s[1] , 
         \ADCStateMachine_2/StateColxDP[17] , 
         \ADCStateMachine_2/StartColxSP_cnv_0 , ADCsmRstxE_i, IfClockxCI_c, 
         \ADCStateMachine_2/CountColxDP_cry[15] , 
         \ADCStateMachine_2/CountColxDP_cry[13] , 
         \ADCStateMachine_2/CountColxDP_cry[11] , 
         \ADCStateMachine_2/CountColxDP_cry[9] , 
         \ADCStateMachine_2/CountColxDP_cry[7] , 
         \ADCStateMachine_2/CountColxDP_cry[5] , 
         \ADCStateMachine_2/CountColxDP_cry[3] , 
         \ADCStateMachine_2/CountColxDP_cry[1] , 
         \ADCStateMachine_2/StateColxDP_i_0[17] , 
         \ADCStateMachine_2/DividerRowxDP_cry_s1[15] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[16] , 
         \ADCStateMachine_2/DividerRowxDP_cry_s1[13] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[14] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[15] , 
         \ADCStateMachine_2/DividerRowxDP_cry_s1[11] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[12] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[13] , 
         \ADCStateMachine_2/DividerRowxDP_cry_s1[9] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[10] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[11] , 
         \ADCStateMachine_2/DividerRowxDP_cry_s1[7] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[8] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[9] , 
         \ADCStateMachine_2/DividerRowxDP_cry_s1[5] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[6] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[7] , 
         \ADCStateMachine_2/DividerRowxDP_cry_s1[3] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[4] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[5] , 
         \ADCStateMachine_2/DividerRowxDP_cry_s1[1] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[2] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[3] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[0] , 
         \ADCStateMachine_2/DividerRowxDP_s_s1[1] , 
         \cDVSResetStateMachine_1/CountxDP[18] , 
         \cDVSResetStateMachine_1/CountxDP_cry[17] , 
         \cDVSResetStateMachine_1/CountxDP_s[18] , 
         \cDVSResetStateMachine_1/CountxDP[17] , 
         \cDVSResetStateMachine_1/CountxDP[16] , 
         \cDVSResetStateMachine_1/CountxDP_cry[15] , 
         \cDVSResetStateMachine_1/CountxDP_s[16] , 
         \cDVSResetStateMachine_1/CountxDP_s[17] , 
         \cDVSResetStateMachine_1/CountxDP[15] , 
         \cDVSResetStateMachine_1/CountxDP[14] , 
         \cDVSResetStateMachine_1/CountxDP_cry[13] , 
         \cDVSResetStateMachine_1/CountxDP_s[14] , 
         \cDVSResetStateMachine_1/CountxDP_s[15] , 
         \cDVSResetStateMachine_1/CountxDP[13] , 
         \cDVSResetStateMachine_1/CountxDP[12] , 
         \cDVSResetStateMachine_1/CountxDP_cry[11] , 
         \cDVSResetStateMachine_1/CountxDP_s[12] , 
         \cDVSResetStateMachine_1/CountxDP_s[13] , 
         \cDVSResetStateMachine_1/CountxDP[11] , 
         \cDVSResetStateMachine_1/CountxDP[10] , 
         \cDVSResetStateMachine_1/CountxDP_cry[9] , 
         \cDVSResetStateMachine_1/CountxDP_s[10] , 
         \cDVSResetStateMachine_1/CountxDP_s[11] , 
         \cDVSResetStateMachine_1/CountxDP[9] , 
         \cDVSResetStateMachine_1/CountxDP[8] , 
         \cDVSResetStateMachine_1/CountxDP_cry[7] , 
         \cDVSResetStateMachine_1/CountxDP_s[8] , 
         \cDVSResetStateMachine_1/CountxDP_s[9] , 
         \cDVSResetStateMachine_1/CountxDP[7] , 
         \cDVSResetStateMachine_1/CountxDP[6] , 
         \cDVSResetStateMachine_1/CountxDP_cry[5] , 
         \cDVSResetStateMachine_1/CountxDP_s[6] , 
         \cDVSResetStateMachine_1/CountxDP_s[7] , 
         \cDVSResetStateMachine_1/CountxDP[5] , 
         \cDVSResetStateMachine_1/CountxDP[4] , 
         \cDVSResetStateMachine_1/CountxDP_cry[3] , 
         \cDVSResetStateMachine_1/CountxDP_s[4] , 
         \cDVSResetStateMachine_1/CountxDP_s[5] , 
         \cDVSResetStateMachine_1/CountxDP[3] , 
         \cDVSResetStateMachine_1/CountxDP[2] , 
         \cDVSResetStateMachine_1/CountxDP_cry[1] , 
         \cDVSResetStateMachine_1/CountxDP_s[2] , 
         \cDVSResetStateMachine_1/CountxDP_s[3] , 
         \cDVSResetStateMachine_1/CountxDP[1] , 
         \cDVSResetStateMachine_1/CountxDP[0] , 
         \cDVSResetStateMachine_1/CountxDP_s[0] , 
         \cDVSResetStateMachine_1/CountxDP_s[1] , 
         \monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] , 
         TimestampOverflowxS, \monitorStateMachine_1/TimestampOverflowxDP[15] , 
         \monitorStateMachine_1/TimestampOverflowxDP[14] , 
         \monitorStateMachine_1/TimestampOverflowxDP_cry[13] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[14] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[15] , 
         \monitorStateMachine_1/TimestampOverflowxDP[13] , 
         \monitorStateMachine_1/TimestampOverflowxDP[12] , 
         \monitorStateMachine_1/TimestampOverflowxDP_cry[11] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[12] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[13] , 
         \monitorStateMachine_1/TimestampOverflowxDP[11] , 
         \monitorStateMachine_1/TimestampOverflowxDP[10] , 
         \monitorStateMachine_1/TimestampOverflowxDP_cry[9] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[10] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[11] , 
         \monitorStateMachine_1/TimestampOverflowxDP[9] , 
         \monitorStateMachine_1/TimestampOverflowxDP[8] , 
         \monitorStateMachine_1/TimestampOverflowxDP_cry[7] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[8] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[9] , 
         \monitorStateMachine_1/TimestampOverflowxDP[7] , 
         \monitorStateMachine_1/TimestampOverflowxDP[6] , 
         \monitorStateMachine_1/TimestampOverflowxDP_cry[5] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[6] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[7] , 
         \monitorStateMachine_1/TimestampOverflowxDP[5] , 
         \monitorStateMachine_1/TimestampOverflowxDP[4] , 
         \monitorStateMachine_1/TimestampOverflowxDP_cry[3] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[4] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[5] , 
         \monitorStateMachine_1/TimestampOverflowxDP[3] , 
         \monitorStateMachine_1/TimestampOverflowxDP[2] , 
         \monitorStateMachine_1/TimestampOverflowxDP_cry[1] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[2] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[3] , 
         \monitorStateMachine_1/TimestampOverflowxDP[1] , 
         \monitorStateMachine_1/TimestampOverflowxDP[0] , 
         \monitorStateMachine_1/TimestampOverflowxDP , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[0] , 
         \monitorStateMachine_1/TimestampOverflowxDP_s[1] , 
         \monitorStateMachine_1/CountxDP[7] , \monitorStateMachine_1/CountxDP , 
         \monitorStateMachine_1/CountxDP[6] , ClockxC_c, 
         \monitorStateMachine_1/CountxDP_cry[5] , 
         \monitorStateMachine_1/CountxDP[5] , 
         \monitorStateMachine_1/CountxDP[4] , 
         \monitorStateMachine_1/CountxDP_cry[3] , 
         \monitorStateMachine_1/CountxDP[3] , 
         \monitorStateMachine_1/CountxDP[2] , 
         \monitorStateMachine_1/CountxDP_cry[1] , 
         \monitorStateMachine_1/CountxDP[1] , 
         \monitorStateMachine_1/CountxDP[0] , 
         \uSynchronizerStateMachine_1.CounterxDP[13] , 
         \uSynchronizerStateMachine_1.CounterxDP[12] , 
         \uSynchronizerStateMachine_1/CounterxDP_cry[11] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[12] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[13] , 
         \uSynchronizerStateMachine_1.CounterxDP[11] , 
         \uSynchronizerStateMachine_1/CounterxDP[10] , 
         \uSynchronizerStateMachine_1/CounterxDP_cry[9] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[10] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[11] , 
         \uSynchronizerStateMachine_1/CounterxDP[9] , 
         \uSynchronizerStateMachine_1.CounterxDP[8] , 
         \uSynchronizerStateMachine_1/CounterxDP_cry[7] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[8] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[9] , 
         \uSynchronizerStateMachine_1.CounterxDP[7] , 
         \uSynchronizerStateMachine_1/CounterxDP[6] , 
         \uSynchronizerStateMachine_1/CounterxDP_cry[5] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[6] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[7] , 
         \uSynchronizerStateMachine_1/CounterxDP[5] , 
         \uSynchronizerStateMachine_1/CounterxDP[4] , 
         \uSynchronizerStateMachine_1/CounterxDP_cry[3] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[4] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[5] , 
         \uSynchronizerStateMachine_1/CounterxDP[3] , 
         \uSynchronizerStateMachine_1/CounterxDP[2] , 
         \uSynchronizerStateMachine_1/CounterxDP_cry[1] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[2] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[3] , 
         \uSynchronizerStateMachine_1/CounterxDP[1] , 
         \uSynchronizerStateMachine_1/CounterxDP[0] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[0] , 
         \uSynchronizerStateMachine_1/CounterxDP_s[1] , 
         \uSynchronizerStateMachine_1/DividerxDP[6] , 
         \uSynchronizerStateMachine_1/DividerxDP_cry[5] , 
         \uSynchronizerStateMachine_1/DividerxDP_s[6] , 
         \uSynchronizerStateMachine_1/DividerxDP[5] , 
         \uSynchronizerStateMachine_1/DividerxDP[4] , 
         \uSynchronizerStateMachine_1/DividerxDP_cry[3] , 
         \uSynchronizerStateMachine_1/DividerxDP_s[4] , 
         \uSynchronizerStateMachine_1/DividerxDP_s[5] , 
         \uSynchronizerStateMachine_1/DividerxDP[3] , 
         \uSynchronizerStateMachine_1/DividerxDP[2] , 
         \uSynchronizerStateMachine_1/DividerxDP_cry[1] , 
         \uSynchronizerStateMachine_1/DividerxDP_s[2] , 
         \uSynchronizerStateMachine_1/DividerxDP_s[3] , 
         \uSynchronizerStateMachine_1/DividerxDP[1] , 
         \uSynchronizerStateMachine_1/DividerxDP[0] , 
         \uSynchronizerStateMachine_1/DividerxDP_s[0] , 
         \uSynchronizerStateMachine_1/DividerxDP_s[1] , 
         \uTimestampCounter.CountxDP[14] , 
         \uTimestampCounter/CountxDP_cry[13] , 
         \uTimestampCounter/CountxDP_s[14] , \ActualTimestampxD[13] , 
         \ActualTimestampxD[12] , IncxS, ResetTimestampxSBO_i_0_o2_2_RNICSNV, 
         \uTimestampCounter/CountxDP_cry[11] , \ActualTimestampxD[11] , 
         \ActualTimestampxD[10] , \uTimestampCounter/CountxDP_cry[9] , 
         \ActualTimestampxD[9] , \ActualTimestampxD[8] , 
         \uTimestampCounter/CountxDP_cry[7] , \ActualTimestampxD[7] , 
         \ActualTimestampxD[6] , \uTimestampCounter/CountxDP_cry[5] , 
         \ActualTimestampxD[5] , \ActualTimestampxD[4] , 
         \uTimestampCounter/CountxDP_cry[3] , \ActualTimestampxD[3] , 
         \ActualTimestampxD[2] , \uTimestampCounter/CountxDP_cry[1] , 
         \ActualTimestampxD[1] , \ActualTimestampxD[0] , 
         \uEventCounter/CountxDP[8] , \uEventCounter/CountxDP_cry[7] , 
         \uEventCounter/CountxDP_s[8] , \uEventCounter/CountxDP[7] , 
         \uEventCounter/CountxDP[6] , \uEventCounter/CountxDP_cry[5] , 
         \uEventCounter/CountxDP_s[6] , \uEventCounter/CountxDP_s[7] , 
         \uEventCounter/CountxDP[5] , \uEventCounter/CountxDP[4] , 
         \uEventCounter/CountxDP_cry[3] , \uEventCounter/CountxDP_s[4] , 
         \uEventCounter/CountxDP_s[5] , \uEventCounter/CountxDP[3] , 
         \uEventCounter/CountxDP[2] , \uEventCounter/CountxDP_cry[1] , 
         \uEventCounter/CountxDP_s[2] , \uEventCounter/CountxDP_s[3] , 
         \uEventCounter/CountxDP[1] , \uEventCounter/CountxDP[0] , 
         \uEventCounter/CountxDP_s[0] , \uEventCounter/CountxDP_s[1] , 
         \uEarlyPaketTimer/CountxDP[1] , \uEarlyPaketTimer/CountxDP[0] , 
         \uEarlyPaketTimer/CountxDP_s[0] , \uEarlyPaketTimer/CountxDP_s[1] , 
         \uEarlyPaketTimer/CountxDP_cry[1] , \uEarlyPaketTimer.CountxDP[20] , 
         \uEarlyPaketTimer/CountxDP_cry[19] , 
         \uEarlyPaketTimer/CountxDP_s[20] , \uEarlyPaketTimer/CountxDP[19] , 
         \uEarlyPaketTimer/CountxDP[18] , \uEarlyPaketTimer/CountxDP_cry[17] , 
         \uEarlyPaketTimer/CountxDP_s[18] , \uEarlyPaketTimer/CountxDP_s[19] , 
         \uEarlyPaketTimer/CountxDP[17] , \uEarlyPaketTimer/CountxDP[16] , 
         \uEarlyPaketTimer/CountxDP_cry[15] , 
         \uEarlyPaketTimer/CountxDP_s[16] , \uEarlyPaketTimer/CountxDP_s[17] , 
         \uEarlyPaketTimer/CountxDP[15] , \uEarlyPaketTimer/CountxDP[14] , 
         \uEarlyPaketTimer/CountxDP_cry[13] , 
         \uEarlyPaketTimer/CountxDP_s[14] , \uEarlyPaketTimer/CountxDP_s[15] , 
         \uEarlyPaketTimer/CountxDP[13] , \uEarlyPaketTimer/CountxDP[12] , 
         \uEarlyPaketTimer/CountxDP_cry[11] , 
         \uEarlyPaketTimer/CountxDP_s[12] , \uEarlyPaketTimer/CountxDP_s[13] , 
         \uEarlyPaketTimer/CountxDP[11] , \uEarlyPaketTimer/CountxDP[10] , 
         \uEarlyPaketTimer/CountxDP_cry[9] , \uEarlyPaketTimer/CountxDP_s[10] , 
         \uEarlyPaketTimer/CountxDP_s[11] , \uEarlyPaketTimer/CountxDP[9] , 
         \uEarlyPaketTimer/CountxDP[8] , \uEarlyPaketTimer/CountxDP_cry[7] , 
         \uEarlyPaketTimer/CountxDP_s[8] , \uEarlyPaketTimer/CountxDP_s[9] , 
         \uEarlyPaketTimer/CountxDP[7] , \uEarlyPaketTimer/CountxDP[6] , 
         \uEarlyPaketTimer/CountxDP_cry[5] , \uEarlyPaketTimer/CountxDP_s[6] , 
         \uEarlyPaketTimer/CountxDP_s[7] , \uEarlyPaketTimer/CountxDP[5] , 
         \uEarlyPaketTimer/CountxDP[4] , \uEarlyPaketTimer/CountxDP_cry[3] , 
         \uEarlyPaketTimer/CountxDP_s[4] , \uEarlyPaketTimer/CountxDP_s[5] , 
         \uEarlyPaketTimer/CountxDP[3] , \uEarlyPaketTimer/CountxDP[2] , 
         \uEarlyPaketTimer/CountxDP_s[2] , \uEarlyPaketTimer/CountxDP_s[3] , 
         \ADCStateMachine_2/StartColxSP_RNO , \ADCStateMachine_2.StartColxSP , 
         \ADCStateMachine_2/StartRowxSN , \ADCStateMachine_2/ClockxC , 
         \ADCStateMachine_2.StartRowxSP , \ADCStateMachine_2/StateRowxDP[11] , 
         \ADCStateMachine_2/CountRowxDP_lm[1] , 
         \ADCStateMachine_2/CountRowxDP_lm[0] , 
         \ADCStateMachine_2/CountRowxDP_lm[3] , 
         \ADCStateMachine_2/CountRowxDP_lm[2] , 
         \ADCStateMachine_2/CountRowxDP_lm[4] , 
         \ADCStateMachine_2/un1_CountRowxDPlto4_2 , 
         \ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 , 
         \ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 , 
         \ADCStateMachine_2/un1_StateColxDP_9_2 , 
         \ADCStateMachine_2/DividerColxDP_lm[1] , 
         \ADCStateMachine_2/DividerColxDP_lm[0] , 
         \ADCStateMachine_2/ClockxC_RNI4URR2 , 
         \ADCStateMachine_2/DividerColxDP_lm[3] , 
         \ADCStateMachine_2/DividerColxDP_lm[2] , 
         \ADCStateMachine_2/DividerColxDP_lm[5] , 
         \ADCStateMachine_2/DividerColxDP_lm[4] , 
         \ADCStateMachine_2/DividerColxDP_lm[7] , 
         \ADCStateMachine_2/DividerColxDP_lm[6] , 
         \ADCStateMachine_2/DividerColxDP_lm[9] , 
         \ADCStateMachine_2/DividerColxDP_lm[8] , 
         \ADCStateMachine_2/DividerColxDP_lm[11] , 
         \ADCStateMachine_2/DividerColxDP_lm[10] , 
         \ADCStateMachine_2/DividerColxDP_lm[13] , 
         \ADCStateMachine_2/DividerColxDP_lm[12] , 
         \ADCStateMachine_2/DividerColxDP_lm[15] , 
         \ADCStateMachine_2/DividerColxDP_lm[14] , 
         \ADCStateMachine_2/DividerColxDP_lm[17] , 
         \ADCStateMachine_2/DividerColxDP_lm[16] , 
         \ADCStateMachine_2/DividerColxDP_lm[19] , 
         \ADCStateMachine_2/DividerColxDP_lm[18] , 
         \ADCStateMachine_2/DividerColxDP_lm[21] , 
         \ADCStateMachine_2/DividerColxDP_lm[20] , 
         \ADCStateMachine_2/DividerColxDP_lm[23] , 
         \ADCStateMachine_2/DividerColxDP_lm[22] , 
         \ADCStateMachine_2/DividerColxDP_lm[25] , 
         \ADCStateMachine_2/DividerColxDP_lm[24] , 
         \ADCStateMachine_2/DividerColxDP_lm[27] , 
         \ADCStateMachine_2/DividerColxDP_lm[26] , 
         \ADCStateMachine_2/DividerColxDP_lm[29] , 
         \ADCStateMachine_2/DividerColxDP_lm[28] , 
         \ADCStateMachine_2/DividerColxDP_lm[31] , 
         \ADCStateMachine_2/DividerColxDP_lm[30] , 
         \ADCStateMachine_2/StateColxDP[6] , 
         \ADCStateMachine_2/StateColxDP[2] , 
         \ADCStateMachine_2/DividerColxDP_lm[32] , 
         \ADCStateMachine_2/StateRowxDP_ns_a2_2[0] , 
         \ADCStateMachine_2/un1_StateRowxDP_3_i , 
         \ADCStateMachine_2/DividerRowxDP_lm[1] , 
         \ADCStateMachine_2/DividerRowxDP_lm[0] , 
         \ADCStateMachine_2/DividerRowxDP_lm[3] , 
         \ADCStateMachine_2/DividerRowxDP_lm[2] , 
         \ADCStateMachine_2/DividerRowxDP_lm[5] , 
         \ADCStateMachine_2/DividerRowxDP_lm[4] , 
         \ADCStateMachine_2/DividerRowxDP_lm[7] , 
         \ADCStateMachine_2/DividerRowxDP_lm[6] , 
         \ADCStateMachine_2/DividerRowxDP_lm[9] , 
         \ADCStateMachine_2/DividerRowxDP_lm[8] , 
         \ADCStateMachine_2/DividerRowxDP_lm[11] , 
         \ADCStateMachine_2/DividerRowxDP_lm[10] , 
         \ADCStateMachine_2/DividerRowxDP_lm[13] , 
         \ADCStateMachine_2/DividerRowxDP_lm[12] , 
         \ADCStateMachine_2/DividerRowxDP_lm[15] , 
         \ADCStateMachine_2/DividerRowxDP_lm[14] , 
         \ADCStateMachine_2/un1_StateRowxDP_3_i_1 , 
         \ADCStateMachine_2/StateRowxDP[7] , 
         \ADCStateMachine_2/un1_StateRowxDP_3_i_a2 , 
         \ADCStateMachine_2/DividerRowxDP_lm[16] , \ADCStateMachine_2/NoBxS , 
         \ADCStateMachine_2/VCC\001/BUF1 , 
         \ADCStateMachine_2/StateColxDN_2_sqmuxa_2 , 
         \ADCStateMachine_2/un7_nobxs , \ADCdataxD[11] , 
         \ADCStateMachine_2/StateRowxDP[2] , CDVSTestSRRowInxSO_c, 
         \ADCStateMachine_2/StateColxDP_cnv_0[9] , 
         \ADCStateMachine_2/StateColxDP[13] , 
         \ADCStateMachine_2/DividerColxDN_1_sqmuxa_2 , 
         \ADCStateMachine_2/StateColxDN_0_sqmuxa_8 , 
         \ADCStateMachine_2/StateColxDN[11] , 
         \ADCStateMachine_2/StateColxDP_cnv_2[9] , 
         \ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9 , 
         \ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_8 , 
         \ADCStateMachine_2/StateColxDP[1] , 
         \ADCStateMachine_2/StateColxDP[0] , 
         \ADCStateMachine_2/StateColxDN[1] , 
         \ADCStateMachine_2/StateColxDN[0] , 
         \ADCStateMachine_2/StateColxDP[4] , 
         \ADCStateMachine_2/StateColxDP[3] , 
         \ADCStateMachine_2/StateColxDN[3] , 
         \ADCStateMachine_2/StateColxDN[2] , 
         \ADCStateMachine_2/StateColxDP[5] , \ADCStateMachine_2/N_347 , 
         \ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9_1_0 , 
         \ADCStateMachine_2/g1_0 , \ADCStateMachine_2/g0_1_5 , 
         \ADCStateMachine_2/StateColxDN[5] , 
         \ADCStateMachine_2/StateColxDN[4] , 
         \ADCStateMachine_2/un15_usecxei_cry_16_0_RNIHVDP , 
         \ADCStateMachine_2/StateColxDP[8] , \ADCStateMachine_2/g0_1_2 , 
         \ADCStateMachine_2/g0_1 , \ADCStateMachine_2/StateColxDN_2_sqmuxa_1 , 
         \ADCStateMachine_2/StateColxDN_3_sqmuxa , 
         \ADCStateMachine_2/StateColxDN[6] , 
         \ADCStateMachine_2/StateColxDP[7] , 
         \ADCStateMachine_2/StateRowxDP[1] , 
         \ADCStateMachine_2/StateColxDP[9] , 
         \ADCStateMachine_2/StateColxDN_0_sqmuxa , 
         \ADCStateMachine_2/StateColxDP[10] , 
         \ADCStateMachine_2/StateColxDP[11] , 
         \ADCStateMachine_2/StateColxDN_0_sqmuxa_1 , 
         \ADCStateMachine_2/G_33_0 , 
         \ADCStateMachine_2.p_col.op_lt.op_lt.colmodexd4 , 
         \ADCStateMachine_2/StateColxDP[14] , 
         \ADCStateMachine_2/StateColxDN[13] , 
         \ADCStateMachine_2/ClockxC_RNIU9VN5 , \ADCStateMachine_2/N_3 , 
         \ADCStateMachine_2/StateColxDP[15] , 
         \ADCStateMachine_2/un1_StateColxDP_11 , 
         \ADCStateMachine_2/StateColxDP[16] , \DebugxSIO_c[11] , PC0xSIO_c, 
         \ADCStateMachine_2/StateColxDN_0_sqmuxa_4 , CDVSTestSRColInxSO_c, 
         \ADCStateMachine_2/StateColxDN_0_sqmuxa_3 , 
         \ADCStateMachine_2/StateColxDP_RNO[17] , 
         \ADCStateMachine_2/StateColxDP_RNO_0[17] , 
         \ADCStateMachine_2/StateRowxDP[0] , 
         \ADCStateMachine_2/StateRowxDP_ns[10] , 
         \ADCStateMachine_2/StateRowxDP_ns[11] , 
         \ADCStateMachine_2/StateRowxDP[4] , 
         \ADCStateMachine_2.StateRowxDP[3] , ADCbusyxSI_c, 
         \ADCStateMachine_2/StateRowxDP[6] , 
         \ADCStateMachine_2/StateRowxDP[5] , \ADCStateMachine_2/N_237_i , 
         \ADCStateMachine_2/StateRowxDP_ns[7] , \ADCStateMachine_2/N_269 , 
         \ADCStateMachine_2/StateRowxDP_ns[4] , 
         \ADCStateMachine_2/StateRowxDP_ns[5] , 
         \ADCStateMachine_2/StateRowxDP[10] , 
         \ADCStateMachine_2/StateRowxDP[9] , 
         \ADCStateMachine_2/StateRowxDP_0[10] , \ADCStateMachine_2/N_297 , 
         \ADCStateMachine_2/un11_doreadxs , \ADCStateMachine_2/N_266_1 , 
         \ADCStateMachine_2/StateRowxDP_ns[0] , 
         \ADCStateMachine_2/VCC\000/BUF1 , 
         \ADCStateMachine_2/RegisterWritexEO_i_0 , \ADCwordxDIO_in[2] , 
         \ADCwordxDIO_in[1] , \ADCStateMachine_2.N_321_i , \ADCregOutxD[0] , 
         \ADCregOutxD[1] , \ADCwordxDIO_in[4] , \ADCwordxDIO_in[3] , 
         \ADCregOutxD[2] , \ADCregOutxD[3] , \ADCwordxDIO_in[6] , 
         \ADCwordxDIO_in[5] , \ADCregOutxD[4] , \ADCregOutxD[5] , 
         \ADCwordxDIO_in[8] , \ADCwordxDIO_in[7] , \ADCregOutxD[6] , 
         \ADCregOutxD[7] , \ADCwordxDIO_in[10] , \ADCwordxDIO_in[9] , 
         \ADCregOutxD[8] , \ADCregOutxD[9] , \ADCwordxDIO_in[11] , 
         \ADCregOutxD[10] , \ADCregOutxD[11] , \ADCregOutxD[13] , 
         \uADCRegister/StatexDP_en[12] , \ADCregOutxD[12] , 
         \uADCRegister/StatexDP_ldmx[13] , \uADCRegister/StatexDP_ldmx[12] , 
         \ADCStateMachine_2.N_323_i , \monitorStateMachine_1/N_112 , AERREQxSB, 
         \AERMonitorAddressxDI_c[8] , ADCvalueReadyxS, ReadADCvaluexE, 
         \ADCvalueReady_1/StatexDP[1] , RegisterWritexEO_i, 
         \ADCvalueReady_1/StatexDP_ns[1] , 
         \monitorStateMachine_1/StatexDP_ns_0_a2_1[1] , 
         \ADCStateMachine_2/un23_nobxs , \ADCvalueReady_1/StatexDP_ns[0] , 
         \ADCStateMachine_2/un1_statecolxdn9_1 , ADCwritexEBO_c, 
         \ADCStateMachine_2/N_3282_0 , 
         \ADCStateMachine_2/StateColxDP_cnv_1[17] , AERReqSyncxSBN, 
         AERMonitorREQxABI_c, \ADCStateMachine_2/N_355_i , 
         CDVSTestSRColClockxSO_c, \ADCStateMachine_2/G_33_3 , 
         \ADCStateMachine_2/N_359_i , CDVSTestSRRowClockxSO_c, 
         \ADCStateMachine_2/DividerColxDN_1_sqmuxa , 
         \ADCStateMachine_2/StateRowxDP_ns[3] , \shiftRegister_1/StatexD[97] , 
         \shiftRegister_1/StatexD[96] , PC2xSIO_c, 
         \shiftRegister_1/StatexD[99] , \shiftRegister_1/StatexD[98] , 
         \shiftRegister_1/StatexD[101] , \shiftRegister_1/StatexD[100] , 
         \shiftRegister_1/StatexD[103] , \shiftRegister_1/StatexD[102] , 
         \DebugxSIO_c[7] , \uEarlyPaketTimer.CountxDPe , 
         \fifoStatemachine_1/N_10_mux , FifoEmptyxS, 
         \fifoStatemachine_1/N_11_mux , \fifoStatemachine_1.StatexDP[0] , 
         FifoReadxE, \fifoStatemachine_1/StatexDP_ns[1] , 
         \monitorStateMachine_1.N_256_i , \MonitorTimestampxD[0] , 
         \MonitorTimestampxD[1] , \MonitorTimestampxD[2] , 
         \MonitorTimestampxD[3] , \MonitorTimestampxD[4] , 
         \MonitorTimestampxD[5] , \MonitorTimestampxD[6] , 
         \MonitorTimestampxD[7] , \MonitorTimestampxD[8] , 
         \MonitorTimestampxD[9] , \MonitorTimestampxD[10] , 
         \MonitorTimestampxD[11] , \MonitorTimestampxD[12] , 
         \MonitorTimestampxD[13] , \shiftRegister_1/StatexD[17] , 
         \shiftRegister_1/StatexD[16] , \shiftRegister_1/StatexD[19] , 
         \shiftRegister_1/StatexD[18] , \shiftRegister_1/StatexD[21] , 
         \shiftRegister_1/StatexD[20] , \shiftRegister_1/StatexD[23] , 
         \shiftRegister_1/StatexD[22] , \shiftRegister_1/StatexD[25] , 
         \shiftRegister_1/StatexD[24] , \shiftRegister_1/StatexD[27] , 
         \shiftRegister_1/StatexD[26] , \shiftRegister_1/StatexD[29] , 
         \shiftRegister_1/StatexD[28] , \shiftRegister_1/StatexD[31] , 
         \shiftRegister_1/StatexD[30] , \shiftRegister_1/StatexD[33] , 
         \shiftRegister_1/StatexD[32] , \shiftRegister_1/StatexD[35] , 
         \shiftRegister_1/StatexD[34] , \shiftRegister_1/StatexD[37] , 
         \shiftRegister_1/StatexD[36] , \shiftRegister_1/StatexD[39] , 
         \shiftRegister_1/StatexD[38] , \shiftRegister_1/StatexD[41] , 
         \shiftRegister_1/StatexD[40] , \shiftRegister_1/StatexD[43] , 
         \shiftRegister_1/StatexD[42] , \shiftRegister_1/StatexD[45] , 
         \shiftRegister_1/StatexD[44] , \shiftRegister_1/StatexD[47] , 
         \shiftRegister_1/StatexD[46] , \shiftRegister_1/StatexD[49] , 
         \shiftRegister_1/StatexD[48] , \shiftRegister_1/StatexD[51] , 
         \shiftRegister_1/StatexD[50] , \shiftRegister_1/StatexD[53] , 
         \shiftRegister_1/StatexD[52] , \shiftRegister_1/StatexD[55] , 
         \shiftRegister_1/StatexD[54] , \shiftRegister_1/StatexD[57] , 
         \shiftRegister_1/StatexD[56] , \shiftRegister_1/StatexD[59] , 
         \shiftRegister_1/StatexD[58] , \shiftRegister_1/StatexD[61] , 
         \shiftRegister_1/StatexD[60] , \shiftRegister_1/StatexD[63] , 
         \shiftRegister_1/StatexD[62] , \shiftRegister_1/StatexD[65] , 
         \shiftRegister_1/StatexD[64] , \shiftRegister_1/StatexD[67] , 
         \shiftRegister_1/StatexD[66] , \shiftRegister_1/StatexD[69] , 
         \shiftRegister_1/StatexD[68] , \shiftRegister_1/StatexD[71] , 
         \shiftRegister_1/StatexD[70] , \shiftRegister_1/StatexD[73] , 
         \shiftRegister_1/StatexD[72] , \shiftRegister_1/StatexD[75] , 
         \shiftRegister_1/StatexD[74] , \shiftRegister_1/StatexD[77] , 
         \shiftRegister_1/StatexD[76] , \shiftRegister_1/StatexD[79] , 
         \shiftRegister_1/StatexD[78] , \shiftRegister_1/StatexD[81] , 
         \shiftRegister_1/StatexD[80] , \shiftRegister_1/StatexD[83] , 
         \shiftRegister_1/StatexD[82] , \shiftRegister_1/StatexD[85] , 
         \shiftRegister_1/StatexD[84] , \shiftRegister_1/StatexD[87] , 
         \shiftRegister_1/StatexD[86] , \shiftRegister_1/StatexD[89] , 
         \shiftRegister_1/StatexD[88] , \shiftRegister_1/StatexD[91] , 
         \shiftRegister_1/StatexD[90] , \shiftRegister_1/StatexD[93] , 
         \shiftRegister_1/StatexD[92] , \shiftRegister_1/StatexD[95] , 
         \shiftRegister_1/StatexD[94] , \shiftRegister_1/StatexD[105] , 
         \shiftRegister_1/StatexD[104] , \SRDataOutxD[104] , 
         \SRDataOutxD[105] , \shiftRegister_1/StatexD[107] , 
         \shiftRegister_1/StatexD[106] , \SRDataOutxD[106] , 
         \SRDataOutxD[107] , \shiftRegister_1/StatexD[109] , 
         \shiftRegister_1/StatexD[108] , \SRDataOutxD[108] , 
         \SRDataOutxD[109] , \shiftRegister_1/StatexD[111] , 
         \shiftRegister_1/StatexD[110] , \SRDataOutxD[110] , 
         \SRDataOutxD[111] , \cDVSResetStateMachine_1/StatexDP_ns_0_1_0[1] , 
         \cDVSResetStateMachine_1/N_142 , \cDVSResetStateMachine_1/N_135 , 
         \cDVSResetStateMachine_1/N_134 , 
         \cDVSResetStateMachine_1.StatexDP[1] , 
         \cDVSResetStateMachine_1/StatexDP_ns[1] , 
         \cDVSResetStateMachine_1/StatexDP_ns[0] , 
         \cDVSResetStateMachine_1.StatexDP[0] , 
         \cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 , 
         \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 , 
         \cDVSResetStateMachine_1/CountxDP_lm[1] , 
         \cDVSResetStateMachine_1/CountxDP_lm[0] , 
         \cDVSResetStateMachine_1/CountxDP_lm[3] , 
         \cDVSResetStateMachine_1/CountxDP_lm[2] , 
         \cDVSResetStateMachine_1/CountxDP_lm[5] , 
         \cDVSResetStateMachine_1/CountxDP_lm[4] , 
         \cDVSResetStateMachine_1/CountxDP_lm[7] , 
         \cDVSResetStateMachine_1/CountxDP_lm[6] , 
         \cDVSResetStateMachine_1/CountxDP_lm[9] , 
         \cDVSResetStateMachine_1/CountxDP_lm[8] , 
         \cDVSResetStateMachine_1/CountxDP_lm[11] , 
         \cDVSResetStateMachine_1/CountxDP_lm[10] , 
         \cDVSResetStateMachine_1/CountxDP_lm[13] , 
         \cDVSResetStateMachine_1/CountxDP_lm[12] , 
         \cDVSResetStateMachine_1/CountxDP_lm[15] , 
         \cDVSResetStateMachine_1/CountxDP_lm[14] , 
         \cDVSResetStateMachine_1/CountxDP_lm[17] , 
         \cDVSResetStateMachine_1/CountxDP_lm[16] , 
         \cDVSResetStateMachine_1/un3lto15_2 , 
         \cDVSResetStateMachine_1/N_132_1 , 
         \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0_1 , 
         \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_0 , 
         \cDVSResetStateMachine_1/CountxDP_lm[18] , ECResetEarlyPaketTimerxS, 
         \fifoStatemachine_1/StatexDP_ns[0] , 
         \monitorStateMachine_1/TriggerxDP , 
         \monitorStateMachine_1/StatexDP_ns_i_0_a2[3] , 
         \monitorStateMachine_1/StatexDP_ns[8] , 
         \monitorStateMachine_1/StatexDP_ns[9] , 
         \monitorStateMachine_1.StatexDP[1] , 
         \monitorStateMachine_1.StatexDP[2] , 
         \monitorStateMachine_1.StatexDP[8] , 
         \monitorStateMachine_1/StatexDP[6] , 
         \monitorStateMachine_1/TimestampRegWritexEO_i_0_a2_0 , 
         \monitorStateMachine_1/StatexDP_ns[2] , N_17, 
         \monitorStateMachine_1/un12_aerreqxsblt7 , \DebugxSIO_in[14] , 
         \monitorStateMachine_1/N_147 , \monitorStateMachine_1/StatexDP[9] , 
         \monitorStateMachine_1/StatexDP_RNO[4] , FifoFullxS, 
         \monitorStateMachine_1/StatexDP[10] , 
         \monitorStateMachine_1/TimestampResetxDP , 
         \monitorStateMachine_1/N_168_i , 
         \monitorStateMachine_1/StatexDP_ns[4] , 
         \monitorStateMachine_1/StatexDP[7] , 
         \monitorStateMachine_1/StatexDP_ns_0_a2_0[0] , 
         \monitorStateMachine_1/StatexDP_ns_0_0[0] , 
         \monitorStateMachine_1/N_130 , \monitorStateMachine_1/StatexDP_ns[0] , 
         \monitorStateMachine_1/StatexDP_ns[1] , 
         \monitorStateMachine_1/StatexDP_0[5] , N_141, 
         \monitorStateMachine_1/N_171_i , \monitorStateMachine_1/N_168_i_fast , 
         \monitorStateMachine_1/StatexDP_ns_fast[4] , 
         \monitorStateMachine_1/StatexDP_fast[6] , 
         \monitorStateMachine_1/StatexDP_fast[7] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[1] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[0] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[3] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[2] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[5] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[4] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[7] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[6] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[9] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[8] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[11] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[10] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[13] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[12] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[15] , 
         \monitorStateMachine_1/TimestampOverflowxDP_lm[14] , 
         \uSynchronizerStateMachine_1.ResetTimestampxSBO_i_0_a2_1_1_0 , 
         \uSynchronizerStateMachine_1.N_209 , 
         \monitorStateMachine_1/TimestampResetxDN_0_a2_a1_0_0 , 
         \monitorStateMachine_1/TimestampResetxDN_0_a2_0_0 , 
         \monitorStateMachine_1/TimestampResetxDN_0_a2_a2 , 
         \monitorStateMachine_1/TimestampResetxDN_0_a2_a1 , 
         \monitorStateMachine_1/TimestampResetxDN_0_a2_0_RNO , 
         \monitorStateMachine_1/TimestampResetxDN , 
         \monitorStateMachine_1/StatexDP_ns_0_a2_1_5[0] , 
         \monitorStateMachine_1/N_157 , 
         \uSynchronizerStateMachine_1.SyncInxSB , 
         \uSynchronizerStateMachine_1.StatexDP[4] , 
         \monitorStateMachine_1.StatexDP[0] , 
         \monitorStateMachine_1/TriggerxDN , \shiftRegister_1/StatexD[0] , 
         PC3xSIO_c, PC1xSIO_c, \shiftRegister_1/StatexD[1] , 
         \shiftRegister_1/StatexD[2] , \shiftRegister_1/StatexD[3] , 
         \shiftRegister_1/StatexD[4] , \shiftRegister_1/StatexD[5] , 
         \shiftRegister_1/StatexD[6] , \shiftRegister_1/StatexD[7] , 
         \shiftRegister_1/StatexD[8] , \shiftRegister_1/StatexD[9] , 
         \shiftRegister_1/StatexD[10] , \shiftRegister_1/StatexD[11] , 
         \shiftRegister_1/StatexD[12] , \shiftRegister_1/StatexD[13] , 
         \shiftRegister_1/StatexD[14] , \shiftRegister_1/StatexD[15] , 
         \shiftRegister_1/StatexD[112] , \shiftRegister_1/StatexD[113] , 
         \shiftRegister_1/StatexD[114] , \shiftRegister_1/StatexD[115] , 
         \shiftRegister_1/StatexD[116] , \shiftRegister_1/StatexD[117] , 
         \shiftRegister_1/StatexD[118] , \shiftRegister_1/SRoutxD , 
         \uEarlyPaketTimer/CountxDP_lm[20] , \uEarlyPaketTimer/CountxDP_lm[1] , 
         \uEarlyPaketTimer/CountxDP_lm[0] , \uEarlyPaketTimer/CountxDP_lm[3] , 
         \uEarlyPaketTimer/CountxDP_lm[2] , \uEarlyPaketTimer/CountxDP_lm[5] , 
         \uEarlyPaketTimer/CountxDP_lm[4] , \uEarlyPaketTimer/CountxDP_lm[7] , 
         \uEarlyPaketTimer/CountxDP_lm[6] , \uEarlyPaketTimer/CountxDP_lm[9] , 
         \uEarlyPaketTimer/CountxDP_lm[8] , \uEarlyPaketTimer/CountxDP_lm[11] , 
         \uEarlyPaketTimer/CountxDP_lm[10] , 
         \uEarlyPaketTimer/CountxDP_lm[13] , 
         \uEarlyPaketTimer/CountxDP_lm[12] , 
         \uEarlyPaketTimer/CountxDP_lm[15] , 
         \uEarlyPaketTimer/CountxDP_lm[14] , 
         \uEarlyPaketTimer/CountxDP_lm[17] , 
         \uEarlyPaketTimer/CountxDP_lm[16] , 
         \uEarlyPaketTimer/CountxDP_lm[19] , 
         \uEarlyPaketTimer/CountxDP_lm[18] , \uEventCounter/CountxDP_lm[1] , 
         \uEventCounter/CountxDP_lm[0] , \uEventCounter/CountxDPe , 
         \uEventCounter/CountxDP_lm[3] , \uEventCounter/CountxDP_lm[2] , 
         \uEventCounter/CountxDP_lm[5] , \uEventCounter/CountxDP_lm[4] , 
         \uEventCounter/CountxDP_lm[7] , \uEventCounter/CountxDP_lm[6] , 
         \uEventCounter/countxdn15_5 , \uEventCounter/countxdn15_4 , 
         \uEventCounter/CountxDP_lm[8] , 
         \uSynchronizerStateMachine_1.StatexDP[5] , 
         \uSynchronizerStateMachine_1/N_259 , 
         \uSynchronizerStateMachine_1/N_195 , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[8] , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[7] , 
         \uSynchronizerStateMachine_1/CounterxDPe , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[12] , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[11] , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[13] , 
         \uSynchronizerStateMachine_1.StatexDP[2] , 
         \uSynchronizerStateMachine_1/N_199 , 
         \uSynchronizerStateMachine_1/N_110 , LED2xSO_c, 
         \uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] , 
         \uSynchronizerStateMachine_1/N_185_i , 
         \uSynchronizerStateMachine_1/StatexDP_ns[3] , 
         \monitorStateMachine_1/TimestampResetxDN_0_a2_a0_1 , 
         \uSynchronizerStateMachine_1.p_memless.op_gt.op_gt.counterxdn5lt7 , 
         \uSynchronizerStateMachine_1/StatexDP[3] , 
         \uSynchronizerStateMachine_1/N_183_i , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[1] , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[0] , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[3] , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[2] , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[5] , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[4] , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[9] , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[6] , 
         \uSynchronizerStateMachine_1/un1_StatexDP_7_0_78_i_a3_6 , 
         \uSynchronizerStateMachine_1/counterxdn21lt6 , 
         \uSynchronizerStateMachine_1/CounterxDP_lm[10] , 
         \uSynchronizerStateMachine_1/dividerxdn10 , 
         \uSynchronizerStateMachine_1/DividerxDP_lm[1] , 
         \uSynchronizerStateMachine_1/DividerxDP_lm[0] , 
         \uSynchronizerStateMachine_1/DividerxDP_lm[3] , 
         \uSynchronizerStateMachine_1/DividerxDP_lm[2] , 
         \uSynchronizerStateMachine_1/DividerxDP_lm[5] , 
         \uSynchronizerStateMachine_1/DividerxDP_lm[4] , PA7xSIO_c, 
         \uSynchronizerStateMachine_1/DividerxDP_lm[6] , 
         \uSynchronizerStateMachine_1/N_187_i , 
         \uSynchronizerStateMachine_1/SyncInxSBN , Sync1xABI_c, 
         \uTimestampCounter/CountxDP_fast[14] , \monitorStateMachine_1/N_12 , 
         \FifoDataInxD[8] , \AERMonitorAddressxDI_c[6] , \FifoDataInxD[6] , 
         \AERMonitorAddressxDI_c[4] , \FifoDataInxD[4] , 
         \ADCStateMachine_2/un7_nobxs_x , 
         \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_3_1 , 
         \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_0_0_tz , 
         \uSynchronizerStateMachine_1/N_144 , N_136_i, 
         \uSynchronizerStateMachine_1/N_177 , 
         \uSynchronizerStateMachine_1/N_142 , \FifoDataInxD[12] , 
         \ADCStateMachine_2/g2 , \ADCStateMachine_2/g0_1_1 , 
         \ADCStateMachine_2/g0_6_1 , \ADCStateMachine_2/un6_countcolxdp_0_N_2 , 
         \ADCStateMachine_2/colmodexd4lto17_6 , 
         \ADCStateMachine_2/colmodexd4lto17_5 , 
         \ADCStateMachine_2/colmodexd4lto17_4 , \ADCStateMachine_2/g0_3_sx_0 , 
         \ADCStateMachine_2/g0_3_sx , \ADCStateMachine_2/g0_0_0_0 , 
         \ADCStateMachine_2/N_2 , PA1xSIO_c, 
         \ADCStateMachine_2/CDVSTestColMode1xSO_c_1 , CDVSTestColMode1xSO_c, 
         \ADCStateMachine_2/g0_6_sx , 
         \ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_4_6_0 , 
         \ADCStateMachine_2/StateColxDP_RNO[9] , ADCreadxEBO_c, 
         ADCconvstxEBO_c, \ADCStateMachine_2/g1 , 
         \ADCStateMachine_2/g0_0_3_sx , \SRDataOutxD[119] , 
         \ADCStateMachine_2/g0_1_0 , \ADCStateMachine_2/N_4 , 
         \ADCStateMachine_2/g0_1_5_sx , \ADCStateMachine_2/g0_1_5_sx_0 , 
         \ADCStateMachine_2/g0_0_1 , 
         \ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0_sx , 
         \ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1_sx , 
         \cDVSResetStateMachine_1/StatexDP_ns_0_o7_1_2[1] , 
         \cDVSResetStateMachine_1/StatexDP_ns_0_2_tz[1] , 
         \cDVSResetStateMachine_1/N_126 , 
         \cDVSResetStateMachine_1/StatexDP_ns_0_3_tz[1] , 
         \cDVSResetStateMachine_1/statexdn15lt18 , 
         \cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_9[1] , 
         \cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_6[1] , 
         \cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_5[1] , 
         \cDVSResetStateMachine_1/un3lt6_3 , 
         \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a1_0 , 
         \monitorStateMachine_1/StatexDP_ns_i_0_a2_11[3] , 
         \monitorStateMachine_1/StatexDP_ns_i_0_a2_10[3] , 
         \monitorStateMachine_1/StatexDP_ns_i_0_a2_9[3] , 
         \monitorStateMachine_1/StatexDP_ns_i_0_a2_8[3] , 
         \monitorStateMachine_1/StatexDP_ns_0_a2_1_3[0] , 
         \monitorStateMachine_1/un12_aerreqxsblto6_1 , 
         \uSynchronizerStateMachine_1/ResetTimestampxSBO_i_0_o2_2_1 , 
         \uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_8 , 
         \uSynchronizerStateMachine_1/SyncInxABI_i_m , SynchOutxSBO_c, 
         \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[0] , 
         \uSynchronizerStateMachine_1/N_189 , \AERMonitorAddressxDI_c[0] , 
         N_66_i, \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[1] , 
         \AERMonitorAddressxDI_c[1] , N_68_i, 
         \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[2] , 
         \AERMonitorAddressxDI_c[2] , N_70_i, 
         \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[3] , 
         \AERMonitorAddressxDI_c[3] , N_72_i, 
         \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[5] , 
         \AERMonitorAddressxDI_c[5] , N_134_i, 
         \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[7] , 
         \AERMonitorAddressxDI_c[7] , N_135_i, 
         \uSynchronizerStateMachine_1/dividerxdn10lto6_1 , 
         \uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_7 , 
         \uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_2 , 
         \uSynchronizerStateMachine_1/un1_StatexDP_7_0_78_i_a3_4 , 
         \uSynchronizerStateMachine_1/un1_StatexDP_7_0_78_i_a3_3 , 
         \uSynchronizerStateMachine_1/syncoutxsbo4lt5 , 
         \uSynchronizerStateMachine_1/counterxdn5lt6 , 
         \uSynchronizerStateMachine_1/counterxdn5lto3_1 , ADCwordWritexE_i_a2, 
         FX2FifoWritexEBO_c, FX2FifoPktEndxSBO_c, FifoWritexE, LED3xSO_c, 
         AERMonitorACKxSBO_c, ADCclockxCO_c, FX2FifoInFullxSBI_c, N_139_i, 
         PE3xSI_c, \DebugxSIO_in[9] , LED1xSO_c, N_205_i, N_138_i, N_137_i, 
         CDVSTestColMode0xSO_c, \uTimestampCounter.MSbDelayedxDP , ResetxRBI_c, 
         PE2xSI_c, PE2xSI_c_i, VCC, ResetxRBI_c_i, \FX2FifoDataxDIO_c[0] , 
         PA0xSIO_c, \FX2FifoDataxDIO_c[15] , \FX2FifoDataxDIO_c[14] , 
         \FX2FifoDataxDIO_c[13] , \FX2FifoDataxDIO_c[12] , 
         \FX2FifoDataxDIO_c[11] , \FX2FifoDataxDIO_c[10] , 
         \FX2FifoDataxDIO_c[9] , \FX2FifoDataxDIO_c[8] , 
         \FX2FifoDataxDIO_c[7] , \FX2FifoDataxDIO_c[6] , 
         \FX2FifoDataxDIO_c[5] , \FX2FifoDataxDIO_c[4] , 
         \FX2FifoDataxDIO_c[3] , \FX2FifoDataxDIO_c[2] , 
         \FX2FifoDataxDIO_c[1] , VCCI, GNDI_TSALL;

  ADCStateMachine_2_SLICE_0 \ADCStateMachine_2/SLICE_0 ( 
    .B0(\ADCStateMachine_2/CountColxDP[17] ), 
    .A0(\ADCStateMachine_2/CountColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un6_countcolxdp_0_data_tmp[7] ), 
    .OFX0(\ADCStateMachine_2/un6_countcolxdp_0_data_tmp[8] ));
  ADCStateMachine_2_SLICE_1 \ADCStateMachine_2/SLICE_1 ( 
    .D1(\ADCStateMachine_2/un19_nobxs_axb_15 ), 
    .C1(\ADCStateMachine_2/un19_nobxs_axb_14 ), 
    .B1(\ADCStateMachine_2/CountColxDP[15] ), 
    .A1(\ADCStateMachine_2/CountColxDP[14] ), 
    .D0(\ADCStateMachine_2/un19_nobxs_axb_13 ), 
    .C0(\ADCStateMachine_2/un19_nobxs_axb_12 ), 
    .B0(\ADCStateMachine_2/CountColxDP[13] ), 
    .A0(\ADCStateMachine_2/CountColxDP[12] ), 
    .FCI(\ADCStateMachine_2/un6_countcolxdp_0_data_tmp[5] ), 
    .FCO(\ADCStateMachine_2/un6_countcolxdp_0_data_tmp[7] ));
  ADCStateMachine_2_SLICE_2 \ADCStateMachine_2/SLICE_2 ( 
    .D1(\ADCStateMachine_2/un19_nobxs_axb_11 ), 
    .C1(\ADCStateMachine_2/un19_nobxs_axb_10 ), 
    .B1(\ADCStateMachine_2/CountColxDP[11] ), 
    .A1(\ADCStateMachine_2/CountColxDP[10] ), 
    .D0(\ADCStateMachine_2/un19_nobxs_axb_9 ), 
    .C0(\ADCStateMachine_2/un19_nobxs_axb_8 ), 
    .B0(\ADCStateMachine_2/CountColxDP[9] ), 
    .A0(\ADCStateMachine_2/CountColxDP[8] ), 
    .FCI(\ADCStateMachine_2/un6_countcolxdp_0_data_tmp[3] ), 
    .FCO(\ADCStateMachine_2/un6_countcolxdp_0_data_tmp[5] ));
  ADCStateMachine_2_SLICE_3 \ADCStateMachine_2/SLICE_3 ( 
    .D1(\ADCStateMachine_2/un19_nobxs_axb_7 ), 
    .C1(\ADCStateMachine_2/un19_nobxs_axb_6 ), 
    .B1(\ADCStateMachine_2/CountColxDP[7] ), 
    .A1(\ADCStateMachine_2/CountColxDP[6] ), 
    .D0(\ADCStateMachine_2/un19_nobxs_axb_5 ), 
    .C0(\ADCStateMachine_2/un19_nobxs_axb_4 ), 
    .B0(\ADCStateMachine_2/CountColxDP[5] ), 
    .A0(\ADCStateMachine_2/CountColxDP[4] ), 
    .FCI(\ADCStateMachine_2/un6_countcolxdp_0_data_tmp[1] ), 
    .FCO(\ADCStateMachine_2/un6_countcolxdp_0_data_tmp[3] ));
  ADCStateMachine_2_SLICE_4 \ADCStateMachine_2/SLICE_4 ( 
    .D1(\ADCStateMachine_2/un19_nobxs_axb_3 ), 
    .C1(\ADCStateMachine_2/un19_nobxs_axb_2 ), 
    .B1(\ADCStateMachine_2/CountColxDP[3] ), 
    .A1(\ADCStateMachine_2/CountColxDP[2] ), 
    .D0(\ADCStateMachine_2/un27_nobxs ), 
    .C0(\ADCStateMachine_2/un19_nobxs_axb_0 ), 
    .B0(\ADCStateMachine_2/CountColxDP[1] ), 
    .A0(\ADCStateMachine_2/CountColxDP[0] ), 
    .FCO(\ADCStateMachine_2/un6_countcolxdp_0_data_tmp[1] ));
  ADCStateMachine_2_SLICE_5 \ADCStateMachine_2/SLICE_5 ( 
    .B0(\ADCStateMachine_2/CountColxDP[17] ), 
    .A0(\ADCStateMachine_2/CountColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un1_countcolxdp_0_data_tmp[7] ), 
    .OFX0(\ADCStateMachine_2/un1_countcolxdp_0_data_tmp[8] ));
  ADCStateMachine_2_SLICE_6 \ADCStateMachine_2/SLICE_6 ( 
    .D1(\SRDataOutxD[31] ), .C1(\SRDataOutxD[30] ), 
    .B1(\ADCStateMachine_2/CountColxDP[15] ), 
    .A1(\ADCStateMachine_2/CountColxDP[14] ), .D0(\SRDataOutxD[29] ), 
    .C0(\SRDataOutxD[28] ), .B0(\ADCStateMachine_2/CountColxDP[13] ), 
    .A0(\ADCStateMachine_2/CountColxDP[12] ), 
    .FCI(\ADCStateMachine_2/un1_countcolxdp_0_data_tmp[5] ), 
    .FCO(\ADCStateMachine_2/un1_countcolxdp_0_data_tmp[7] ));
  ADCStateMachine_2_SLICE_7 \ADCStateMachine_2/SLICE_7 ( 
    .D1(\SRDataOutxD[27] ), .C1(\SRDataOutxD[26] ), 
    .B1(\ADCStateMachine_2/CountColxDP[11] ), 
    .A1(\ADCStateMachine_2/CountColxDP[10] ), .D0(\SRDataOutxD[25] ), 
    .C0(\SRDataOutxD[24] ), .B0(\ADCStateMachine_2/CountColxDP[9] ), 
    .A0(\ADCStateMachine_2/CountColxDP[8] ), 
    .FCI(\ADCStateMachine_2/un1_countcolxdp_0_data_tmp[3] ), 
    .FCO(\ADCStateMachine_2/un1_countcolxdp_0_data_tmp[5] ));
  ADCStateMachine_2_SLICE_8 \ADCStateMachine_2/SLICE_8 ( 
    .D1(\SRDataOutxD[23] ), .C1(\SRDataOutxD[22] ), 
    .B1(\ADCStateMachine_2/CountColxDP[7] ), 
    .A1(\ADCStateMachine_2/CountColxDP[6] ), .D0(\SRDataOutxD[21] ), 
    .C0(\SRDataOutxD[20] ), .B0(\ADCStateMachine_2/CountColxDP[5] ), 
    .A0(\ADCStateMachine_2/CountColxDP[4] ), 
    .FCI(\ADCStateMachine_2/un1_countcolxdp_0_data_tmp[1] ), 
    .FCO(\ADCStateMachine_2/un1_countcolxdp_0_data_tmp[3] ));
  ADCStateMachine_2_SLICE_9 \ADCStateMachine_2/SLICE_9 ( 
    .D1(\SRDataOutxD[19] ), .C1(\SRDataOutxD[18] ), 
    .B1(\ADCStateMachine_2/CountColxDP[3] ), 
    .A1(\ADCStateMachine_2/CountColxDP[2] ), .D0(\SRDataOutxD[17] ), 
    .C0(\SRDataOutxD[16] ), .B0(\ADCStateMachine_2/CountColxDP[1] ), 
    .A0(\ADCStateMachine_2/CountColxDP[0] ), 
    .FCO(\ADCStateMachine_2/un1_countcolxdp_0_data_tmp[1] ));
  ADCStateMachine_2_SLICE_10 \ADCStateMachine_2/SLICE_10 ( 
    .B0(\ADCStateMachine_2/DividerColxDP[32] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[31] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[29] ), 
    .OFX0(\ADCStateMachine_2/un1_DividerColxDP_2 ));
  ADCStateMachine_2_SLICE_11 \ADCStateMachine_2/SLICE_11 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[30] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[29] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[28] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[27] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[25] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[29] ));
  ADCStateMachine_2_SLICE_12 \ADCStateMachine_2/SLICE_12 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[26] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[25] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[24] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[23] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[21] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[25] ));
  ADCStateMachine_2_SLICE_13 \ADCStateMachine_2/SLICE_13 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[22] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[21] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[20] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[19] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[17] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[21] ));
  ADCStateMachine_2_SLICE_14 \ADCStateMachine_2/SLICE_14 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[18] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[17] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[15] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[17] ));
  ADCStateMachine_2_SLICE_15 \ADCStateMachine_2/SLICE_15 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[15] ), .A1(\SRDataOutxD[31] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[14] ), .A0(\SRDataOutxD[30] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[13] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[15] ));
  ADCStateMachine_2_SLICE_16 \ADCStateMachine_2/SLICE_16 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[13] ), .A1(\SRDataOutxD[29] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[12] ), .A0(\SRDataOutxD[28] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[11] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[13] ));
  ADCStateMachine_2_SLICE_17 \ADCStateMachine_2/SLICE_17 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[11] ), .A1(\SRDataOutxD[27] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[10] ), .A0(\SRDataOutxD[26] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[9] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[11] ));
  ADCStateMachine_2_SLICE_18 \ADCStateMachine_2/SLICE_18 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[9] ), .A1(\SRDataOutxD[25] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[8] ), .A0(\SRDataOutxD[24] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[7] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[9] ));
  ADCStateMachine_2_SLICE_19 \ADCStateMachine_2/SLICE_19 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[7] ), .A1(\SRDataOutxD[23] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[6] ), .A0(\SRDataOutxD[22] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[5] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[7] ));
  ADCStateMachine_2_SLICE_20 \ADCStateMachine_2/SLICE_20 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[5] ), .A1(\SRDataOutxD[21] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[4] ), .A0(\SRDataOutxD[20] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[3] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[5] ));
  ADCStateMachine_2_SLICE_21 \ADCStateMachine_2/SLICE_21 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[3] ), .A1(\SRDataOutxD[19] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[2] ), .A0(\SRDataOutxD[18] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_10_cry[1] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[3] ));
  ADCStateMachine_2_SLICE_22 \ADCStateMachine_2/SLICE_22 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[1] ), .A1(\SRDataOutxD[17] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[0] ), .A0(\SRDataOutxD[16] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_10_cry[1] ));
  ADCStateMachine_2_SLICE_23 \ADCStateMachine_2/SLICE_23 ( 
    .B0(\ADCStateMachine_2/DividerColxDP[32] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[31] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[29] ), 
    .OFX0(\ADCStateMachine_2/un1_DividerColxDP_4 ));
  ADCStateMachine_2_SLICE_24 \ADCStateMachine_2/SLICE_24 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[30] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[29] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[28] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[27] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[25] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[29] ));
  ADCStateMachine_2_SLICE_25 \ADCStateMachine_2/SLICE_25 ( 
    .B1(\ADCStateMachine_2/un1_DividerColxDP_11_lt25 ), 
    .A1(\ADCStateMachine_2/un1_DividerColxDP_11_df25 ), 
    .B0(\ADCStateMachine_2/un1_DividerColxDP_11_lt23 ), 
    .A0(\ADCStateMachine_2/un1_DividerColxDP_11_df23 ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[21] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[25] ));
  ADCStateMachine_2_SLICE_26 \ADCStateMachine_2/SLICE_26 ( 
    .B1(\ADCStateMachine_2/un1_DividerColxDP_11_lt21 ), 
    .A1(\ADCStateMachine_2/un1_DividerColxDP_11_df21 ), 
    .B0(\ADCStateMachine_2/un1_DividerColxDP_11_lt19 ), 
    .A0(\ADCStateMachine_2/un1_DividerColxDP_11_df19 ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[17] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[21] ));
  ADCStateMachine_2_SLICE_27 \ADCStateMachine_2/SLICE_27 ( 
    .B1(\ADCStateMachine_2/un1_DividerColxDP_11_lt17 ), 
    .A1(\ADCStateMachine_2/un1_DividerColxDP_11_df17 ), 
    .B0(\ADCStateMachine_2/DividerColxDP[16] ), .A0(\DebugxSIO_c[6] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[15] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[17] ));
  ADCStateMachine_2_SLICE_28 \ADCStateMachine_2/SLICE_28 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[15] ), .A1(\DebugxSIO_c[5] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[14] ), .A0(\DebugxSIO_c[4] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[13] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[15] ));
  ADCStateMachine_2_SLICE_29 \ADCStateMachine_2/SLICE_29 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[13] ), .A1(\DebugxSIO_c[3] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[12] ), .A0(\DebugxSIO_c[2] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[11] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[13] ));
  ADCStateMachine_2_SLICE_30 \ADCStateMachine_2/SLICE_30 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[11] ), .A1(\DebugxSIO_c[1] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[10] ), .A0(\DebugxSIO_c[0] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[9] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[11] ));
  ADCStateMachine_2_SLICE_31 \ADCStateMachine_2/SLICE_31 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[9] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[8] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[7] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[9] ));
  ADCStateMachine_2_SLICE_32 \ADCStateMachine_2/SLICE_32 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[7] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[6] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[5] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[7] ));
  ADCStateMachine_2_SLICE_33 \ADCStateMachine_2/SLICE_33 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[5] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[4] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[3] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[5] ));
  ADCStateMachine_2_SLICE_34 \ADCStateMachine_2/SLICE_34 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[3] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[2] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_11_cry[1] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[3] ));
  ADCStateMachine_2_SLICE_35 \ADCStateMachine_2/SLICE_35 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[1] ), .B0(\ADCStateMachine_2/VCC ), 
    .A0(\ADCStateMachine_2/DividerColxDP[0] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_11_cry[1] ));
  ADCStateMachine_2_SLICE_36 \ADCStateMachine_2/SLICE_36 ( 
    .B0(\ADCStateMachine_2/DividerColxDP[32] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[31] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[29] ), 
    .OFX0(\ADCStateMachine_2/un1_DividerColxDP_3 ));
  ADCStateMachine_2_SLICE_37 \ADCStateMachine_2/SLICE_37 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[30] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[29] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[28] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[27] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[25] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[29] ));
  ADCStateMachine_2_SLICE_38 \ADCStateMachine_2/SLICE_38 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[26] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[25] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[24] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[23] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[21] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[25] ));
  ADCStateMachine_2_SLICE_39 \ADCStateMachine_2/SLICE_39 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[22] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[21] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[20] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[19] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[17] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[21] ));
  ADCStateMachine_2_SLICE_40 \ADCStateMachine_2/SLICE_40 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[18] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[17] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[15] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[17] ));
  ADCStateMachine_2_SLICE_41 \ADCStateMachine_2/SLICE_41 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[15] ), .A1(\SRDataOutxD[79] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[14] ), .A0(\SRDataOutxD[78] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[13] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[15] ));
  ADCStateMachine_2_SLICE_42 \ADCStateMachine_2/SLICE_42 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[13] ), .A1(\SRDataOutxD[77] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[12] ), .A0(\SRDataOutxD[76] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[11] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[13] ));
  ADCStateMachine_2_SLICE_43 \ADCStateMachine_2/SLICE_43 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[11] ), .A1(\SRDataOutxD[75] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[10] ), .A0(\SRDataOutxD[74] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[9] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[11] ));
  ADCStateMachine_2_SLICE_44 \ADCStateMachine_2/SLICE_44 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[9] ), .A1(\SRDataOutxD[73] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[8] ), .A0(\SRDataOutxD[72] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[7] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[9] ));
  ADCStateMachine_2_SLICE_45 \ADCStateMachine_2/SLICE_45 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[7] ), .A1(\SRDataOutxD[71] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[6] ), .A0(\SRDataOutxD[70] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[5] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[7] ));
  ADCStateMachine_2_SLICE_46 \ADCStateMachine_2/SLICE_46 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[5] ), .A1(\SRDataOutxD[69] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[4] ), .A0(\SRDataOutxD[68] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[3] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[5] ));
  ADCStateMachine_2_SLICE_47 \ADCStateMachine_2/SLICE_47 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[3] ), .A1(\SRDataOutxD[67] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[2] ), .A0(\SRDataOutxD[66] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_0_cry[1] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[3] ));
  ADCStateMachine_2_SLICE_48 \ADCStateMachine_2/SLICE_48 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[1] ), .A1(\SRDataOutxD[65] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[0] ), .A0(\SRDataOutxD[64] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_0_cry[1] ));
  ADCStateMachine_2_SLICE_49 \ADCStateMachine_2/SLICE_49 ( 
    .A1(\ADCStateMachine_2/CountColxDP[17] ), 
    .A0(\ADCStateMachine_2/CountColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un6_usecxei_cry_15 ), 
    .FCO(\ADCStateMachine_2/un6_usecxei ));
  ADCStateMachine_2_SLICE_50 \ADCStateMachine_2/SLICE_50 ( 
    .B1(\ADCStateMachine_2/un3_usecxei_cry_8_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[15] ), 
    .B0(\ADCStateMachine_2/un3_usecxei_cry_8_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[14] ), 
    .FCI(\ADCStateMachine_2/un6_usecxei_cry_13 ), 
    .FCO(\ADCStateMachine_2/un6_usecxei_cry_15 ));
  ADCStateMachine_2_SLICE_51 \ADCStateMachine_2/SLICE_51 ( 
    .B1(\ADCStateMachine_2/un3_usecxei_cry_6_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[13] ), 
    .B0(\ADCStateMachine_2/un3_usecxei_cry_6_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[12] ), 
    .FCI(\ADCStateMachine_2/un6_usecxei_cry_11 ), 
    .FCO(\ADCStateMachine_2/un6_usecxei_cry_13 ));
  ADCStateMachine_2_SLICE_52 \ADCStateMachine_2/SLICE_52 ( 
    .B1(\ADCStateMachine_2/un3_usecxei_cry_4_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[11] ), 
    .B0(\ADCStateMachine_2/un3_usecxei_cry_4_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[10] ), 
    .FCI(\ADCStateMachine_2/un6_usecxei_cry_9 ), 
    .FCO(\ADCStateMachine_2/un6_usecxei_cry_11 ));
  ADCStateMachine_2_SLICE_53 \ADCStateMachine_2/SLICE_53 ( 
    .B1(\ADCStateMachine_2/un3_usecxei_cry_2_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[9] ), 
    .B0(\ADCStateMachine_2/un3_usecxei_cry_2_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[8] ), 
    .FCI(\ADCStateMachine_2/un6_usecxei_cry_7 ), 
    .FCO(\ADCStateMachine_2/un6_usecxei_cry_9 ));
  ADCStateMachine_2_SLICE_54 \ADCStateMachine_2/SLICE_54 ( 
    .B1(\ADCStateMachine_2/un3_usecxei_cry_0_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[7] ), .B0(\SRDataOutxD[22] ), 
    .A0(\ADCStateMachine_2/CountColxDP[6] ), 
    .FCI(\ADCStateMachine_2/un6_usecxei_cry_5 ), 
    .FCO(\ADCStateMachine_2/un6_usecxei_cry_7 ));
  ADCStateMachine_2_SLICE_55 \ADCStateMachine_2/SLICE_55 ( 
    .B1(\SRDataOutxD[21] ), .A1(\ADCStateMachine_2/CountColxDP[5] ), 
    .B0(\SRDataOutxD[20] ), .A0(\ADCStateMachine_2/CountColxDP[4] ), 
    .FCI(\ADCStateMachine_2/un6_usecxei_cry_3 ), 
    .FCO(\ADCStateMachine_2/un6_usecxei_cry_5 ));
  ADCStateMachine_2_SLICE_56 \ADCStateMachine_2/SLICE_56 ( 
    .B1(\SRDataOutxD[19] ), .A1(\ADCStateMachine_2/CountColxDP[3] ), 
    .B0(\SRDataOutxD[18] ), .A0(\ADCStateMachine_2/CountColxDP[2] ), 
    .FCI(\ADCStateMachine_2/un6_usecxei_cry_1 ), 
    .FCO(\ADCStateMachine_2/un6_usecxei_cry_3 ));
  ADCStateMachine_2_SLICE_57 \ADCStateMachine_2/SLICE_57 ( 
    .B1(\SRDataOutxD[17] ), .A1(\ADCStateMachine_2/CountColxDP[1] ), 
    .B0(\SRDataOutxD[16] ), .A0(\ADCStateMachine_2/CountColxDP[0] ), 
    .FCO(\ADCStateMachine_2/un6_usecxei_cry_1 ));
  ADCStateMachine_2_SLICE_58 \ADCStateMachine_2/SLICE_58 ( 
    .A1(\ADCStateMachine_2/CountColxDP[17] ), 
    .B0(\ADCStateMachine_2/CountColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un13_nobxs_cry_15 ), 
    .FCO(\ADCStateMachine_2/un13_nobxs ));
  ADCStateMachine_2_SLICE_59 \ADCStateMachine_2/SLICE_59 ( 
    .B1(\ADCStateMachine_2/CountColxDP[15] ), 
    .A1(\ADCStateMachine_2/un13_nobxs_15 ), 
    .B0(\ADCStateMachine_2/CountColxDP[14] ), 
    .A0(\ADCStateMachine_2/un13_nobxs_14 ), 
    .FCI(\ADCStateMachine_2/un13_nobxs_cry_13 ), 
    .FCO(\ADCStateMachine_2/un13_nobxs_cry_15 ));
  ADCStateMachine_2_SLICE_60 \ADCStateMachine_2/SLICE_60 ( 
    .B1(\ADCStateMachine_2/CountColxDP[13] ), 
    .A1(\ADCStateMachine_2/un13_nobxs_13 ), 
    .B0(\ADCStateMachine_2/CountColxDP[12] ), 
    .A0(\ADCStateMachine_2/un13_nobxs_12 ), 
    .FCI(\ADCStateMachine_2/un13_nobxs_cry_11 ), 
    .FCO(\ADCStateMachine_2/un13_nobxs_cry_13 ));
  ADCStateMachine_2_SLICE_61 \ADCStateMachine_2/SLICE_61 ( 
    .B1(\ADCStateMachine_2/CountColxDP[11] ), 
    .A1(\ADCStateMachine_2/un13_nobxs_11 ), 
    .B0(\ADCStateMachine_2/CountColxDP[10] ), 
    .A0(\ADCStateMachine_2/un13_nobxs_10 ), 
    .FCI(\ADCStateMachine_2/un13_nobxs_cry_9 ), 
    .FCO(\ADCStateMachine_2/un13_nobxs_cry_11 ));
  ADCStateMachine_2_SLICE_62 \ADCStateMachine_2/SLICE_62 ( 
    .B1(\ADCStateMachine_2/CountColxDP[9] ), 
    .A1(\ADCStateMachine_2/un13_nobxs_9 ), 
    .B0(\ADCStateMachine_2/CountColxDP[8] ), 
    .A0(\ADCStateMachine_2/un13_nobxs_8 ), 
    .FCI(\ADCStateMachine_2/un13_nobxs_cry_7 ), 
    .FCO(\ADCStateMachine_2/un13_nobxs_cry_9 ));
  ADCStateMachine_2_SLICE_63 \ADCStateMachine_2/SLICE_63 ( 
    .B1(\ADCStateMachine_2/CountColxDP[7] ), 
    .A1(\ADCStateMachine_2/un13_nobxs_7 ), 
    .B0(\ADCStateMachine_2/CountColxDP[6] ), 
    .A0(\ADCStateMachine_2/un13_nobxs_6 ), 
    .FCI(\ADCStateMachine_2/un13_nobxs_cry_5 ), 
    .FCO(\ADCStateMachine_2/un13_nobxs_cry_7 ));
  ADCStateMachine_2_SLICE_64 \ADCStateMachine_2/SLICE_64 ( 
    .B1(\ADCStateMachine_2/CountColxDP[5] ), 
    .A1(\ADCStateMachine_2/un13_nobxs_5 ), 
    .B0(\ADCStateMachine_2/CountColxDP[4] ), 
    .A0(\ADCStateMachine_2/un13_nobxs_4 ), 
    .FCI(\ADCStateMachine_2/un13_nobxs_cry_3 ), 
    .FCO(\ADCStateMachine_2/un13_nobxs_cry_5 ));
  ADCStateMachine_2_SLICE_65 \ADCStateMachine_2/SLICE_65 ( 
    .B1(\ADCStateMachine_2/CountColxDP[3] ), 
    .A1(\ADCStateMachine_2/un13_nobxs_3 ), 
    .B0(\ADCStateMachine_2/CountColxDP[2] ), 
    .A0(\ADCStateMachine_2/un13_nobxs_2 ), 
    .FCI(\ADCStateMachine_2/un13_nobxs_cry_1 ), 
    .FCO(\ADCStateMachine_2/un13_nobxs_cry_3 ));
  ADCStateMachine_2_SLICE_66 \ADCStateMachine_2/SLICE_66 ( 
    .C1(\ADCStateMachine_2/CountColxDP[1] ), .B1(\SRDataOutxD[17] ), 
    .A1(\SRDataOutxD[17] ), .B0(\ADCStateMachine_2/CountColxDP[0] ), 
    .A0(\SRDataOutxD[16] ), .FCO(\ADCStateMachine_2/un13_nobxs_cry_1 ));
  ADCStateMachine_2_SLICE_67 \ADCStateMachine_2/SLICE_67 ( 
    .A1(\ADCStateMachine_2/CountColxDP[17] ), 
    .A0(\ADCStateMachine_2/CountColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un6_nobxs_cry_15 ), 
    .FCO(\ADCStateMachine_2/un6_nobxs ));
  ADCStateMachine_2_SLICE_68 \ADCStateMachine_2/SLICE_68 ( 
    .B1(\ADCStateMachine_2/un3_nobxs_cry_14_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[15] ), 
    .B0(\ADCStateMachine_2/un3_nobxs_cry_14_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[14] ), 
    .FCI(\ADCStateMachine_2/un6_nobxs_cry_13 ), 
    .FCO(\ADCStateMachine_2/un6_nobxs_cry_15 ));
  ADCStateMachine_2_SLICE_69 \ADCStateMachine_2/SLICE_69 ( 
    .B1(\ADCStateMachine_2/un3_nobxs_cry_12_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[13] ), 
    .B0(\ADCStateMachine_2/un3_nobxs_cry_12_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[12] ), 
    .FCI(\ADCStateMachine_2/un6_nobxs_cry_11 ), 
    .FCO(\ADCStateMachine_2/un6_nobxs_cry_13 ));
  ADCStateMachine_2_SLICE_70 \ADCStateMachine_2/SLICE_70 ( 
    .B1(\ADCStateMachine_2/un3_nobxs_cry_10_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[11] ), 
    .B0(\ADCStateMachine_2/un3_nobxs_cry_10_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[10] ), 
    .FCI(\ADCStateMachine_2/un6_nobxs_cry_9 ), 
    .FCO(\ADCStateMachine_2/un6_nobxs_cry_11 ));
  ADCStateMachine_2_SLICE_71 \ADCStateMachine_2/SLICE_71 ( 
    .B1(\ADCStateMachine_2/un3_nobxs_cry_8_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[9] ), 
    .B0(\ADCStateMachine_2/un3_nobxs_cry_8_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[8] ), 
    .FCI(\ADCStateMachine_2/un6_nobxs_cry_7 ), 
    .FCO(\ADCStateMachine_2/un6_nobxs_cry_9 ));
  ADCStateMachine_2_SLICE_72 \ADCStateMachine_2/SLICE_72 ( 
    .B1(\ADCStateMachine_2/un3_nobxs_cry_6_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[7] ), 
    .B0(\ADCStateMachine_2/un3_nobxs_cry_6_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[6] ), 
    .FCI(\ADCStateMachine_2/un6_nobxs_cry_5 ), 
    .FCO(\ADCStateMachine_2/un6_nobxs_cry_7 ));
  ADCStateMachine_2_SLICE_73 \ADCStateMachine_2/SLICE_73 ( 
    .B1(\ADCStateMachine_2/un3_nobxs_cry_4_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[5] ), 
    .B0(\ADCStateMachine_2/un3_nobxs_cry_4_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[4] ), 
    .FCI(\ADCStateMachine_2/un6_nobxs_cry_3 ), 
    .FCO(\ADCStateMachine_2/un6_nobxs_cry_5 ));
  ADCStateMachine_2_SLICE_74 \ADCStateMachine_2/SLICE_74 ( 
    .B1(\ADCStateMachine_2/un3_nobxs_cry_2_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[3] ), 
    .B0(\ADCStateMachine_2/un3_nobxs_cry_2_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[2] ), 
    .FCI(\ADCStateMachine_2/un6_nobxs_cry_1 ), 
    .FCO(\ADCStateMachine_2/un6_nobxs_cry_3 ));
  ADCStateMachine_2_SLICE_75 \ADCStateMachine_2/SLICE_75 ( 
    .B1(\ADCStateMachine_2/un3_nobxs_cry_0_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[1] ), .B0(\SRDataOutxD[16] ), 
    .A0(\ADCStateMachine_2/CountColxDP[0] ), 
    .FCO(\ADCStateMachine_2/un6_nobxs_cry_1 ));
  ADCStateMachine_2_SLICE_76 \ADCStateMachine_2/SLICE_76 ( 
    .A1(\ADCStateMachine_2/CountColxDP[17] ), 
    .B0(\ADCStateMachine_2/CountColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un30_nobxs_cry_15 ), 
    .FCO(\ADCStateMachine_2/un30_nobxs ));
  ADCStateMachine_2_SLICE_77 \ADCStateMachine_2/SLICE_77 ( 
    .B1(\ADCStateMachine_2/CountColxDP[15] ), 
    .A1(\ADCStateMachine_2/un30_nobxs_15 ), 
    .B0(\ADCStateMachine_2/CountColxDP[14] ), 
    .A0(\ADCStateMachine_2/un30_nobxs_14 ), 
    .FCI(\ADCStateMachine_2/un30_nobxs_cry_13 ), 
    .FCO(\ADCStateMachine_2/un30_nobxs_cry_15 ));
  ADCStateMachine_2_SLICE_78 \ADCStateMachine_2/SLICE_78 ( 
    .B1(\ADCStateMachine_2/CountColxDP[13] ), 
    .A1(\ADCStateMachine_2/un30_nobxs_13 ), 
    .B0(\ADCStateMachine_2/CountColxDP[12] ), 
    .A0(\ADCStateMachine_2/un30_nobxs_12 ), 
    .FCI(\ADCStateMachine_2/un30_nobxs_cry_11 ), 
    .FCO(\ADCStateMachine_2/un30_nobxs_cry_13 ));
  ADCStateMachine_2_SLICE_79 \ADCStateMachine_2/SLICE_79 ( 
    .B1(\ADCStateMachine_2/CountColxDP[11] ), 
    .A1(\ADCStateMachine_2/un30_nobxs_11 ), 
    .B0(\ADCStateMachine_2/CountColxDP[10] ), 
    .A0(\ADCStateMachine_2/un30_nobxs_10 ), 
    .FCI(\ADCStateMachine_2/un30_nobxs_cry_9 ), 
    .FCO(\ADCStateMachine_2/un30_nobxs_cry_11 ));
  ADCStateMachine_2_SLICE_80 \ADCStateMachine_2/SLICE_80 ( 
    .B1(\ADCStateMachine_2/CountColxDP[9] ), 
    .A1(\ADCStateMachine_2/un30_nobxs_9 ), 
    .B0(\ADCStateMachine_2/CountColxDP[8] ), 
    .A0(\ADCStateMachine_2/un30_nobxs_8 ), 
    .FCI(\ADCStateMachine_2/un30_nobxs_cry_7 ), 
    .FCO(\ADCStateMachine_2/un30_nobxs_cry_9 ));
  ADCStateMachine_2_SLICE_81 \ADCStateMachine_2/SLICE_81 ( 
    .B1(\ADCStateMachine_2/CountColxDP[7] ), 
    .A1(\ADCStateMachine_2/un30_nobxs_7 ), 
    .B0(\ADCStateMachine_2/CountColxDP[6] ), 
    .A0(\ADCStateMachine_2/un30_nobxs_6 ), 
    .FCI(\ADCStateMachine_2/un30_nobxs_cry_5 ), 
    .FCO(\ADCStateMachine_2/un30_nobxs_cry_7 ));
  ADCStateMachine_2_SLICE_82 \ADCStateMachine_2/SLICE_82 ( 
    .B1(\ADCStateMachine_2/CountColxDP[5] ), 
    .A1(\ADCStateMachine_2/un30_nobxs_5 ), 
    .B0(\ADCStateMachine_2/CountColxDP[4] ), 
    .A0(\ADCStateMachine_2/un30_nobxs_4 ), 
    .FCI(\ADCStateMachine_2/un30_nobxs_cry_3 ), 
    .FCO(\ADCStateMachine_2/un30_nobxs_cry_5 ));
  ADCStateMachine_2_SLICE_83 \ADCStateMachine_2/SLICE_83 ( 
    .B1(\ADCStateMachine_2/CountColxDP[3] ), 
    .A1(\ADCStateMachine_2/un30_nobxs_3 ), 
    .B0(\ADCStateMachine_2/CountColxDP[2] ), 
    .A0(\ADCStateMachine_2/un30_nobxs_2 ), 
    .FCI(\ADCStateMachine_2/un30_nobxs_cry_1 ), 
    .FCO(\ADCStateMachine_2/un30_nobxs_cry_3 ));
  ADCStateMachine_2_SLICE_84 \ADCStateMachine_2/SLICE_84 ( 
    .C1(\ADCStateMachine_2/CountColxDP[1] ), 
    .B1(\ADCStateMachine_2/un27_nobxs ), .A1(\ADCStateMachine_2/un27_nobxs ), 
    .C0(\ADCStateMachine_2/CountColxDP[0] ), .B0(\SRDataOutxD[32] ), 
    .A0(\SRDataOutxD[16] ), .FCO(\ADCStateMachine_2/un30_nobxs_cry_1 ));
  ADCStateMachine_2_SLICE_85 \ADCStateMachine_2/SLICE_85 ( 
    .A1(\ADCStateMachine_2/CountColxDP[17] ), 
    .A0(\ADCStateMachine_2/CountColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un22_nobxs_cry_15 ), 
    .FCO(\ADCStateMachine_2/un22_nobxs ));
  ADCStateMachine_2_SLICE_86 \ADCStateMachine_2/SLICE_86 ( 
    .B1(\ADCStateMachine_2/un19_nobxs_cry_14_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[15] ), 
    .B0(\ADCStateMachine_2/un19_nobxs_cry_14_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[14] ), 
    .FCI(\ADCStateMachine_2/un22_nobxs_cry_13 ), 
    .FCO(\ADCStateMachine_2/un22_nobxs_cry_15 ));
  ADCStateMachine_2_SLICE_87 \ADCStateMachine_2/SLICE_87 ( 
    .B1(\ADCStateMachine_2/un19_nobxs_cry_12_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[13] ), 
    .B0(\ADCStateMachine_2/un19_nobxs_cry_12_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[12] ), 
    .FCI(\ADCStateMachine_2/un22_nobxs_cry_11 ), 
    .FCO(\ADCStateMachine_2/un22_nobxs_cry_13 ));
  ADCStateMachine_2_SLICE_88 \ADCStateMachine_2/SLICE_88 ( 
    .B1(\ADCStateMachine_2/un19_nobxs_cry_10_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[11] ), 
    .B0(\ADCStateMachine_2/un19_nobxs_cry_10_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[10] ), 
    .FCI(\ADCStateMachine_2/un22_nobxs_cry_9 ), 
    .FCO(\ADCStateMachine_2/un22_nobxs_cry_11 ));
  ADCStateMachine_2_SLICE_89 \ADCStateMachine_2/SLICE_89 ( 
    .B1(\ADCStateMachine_2/un19_nobxs_cry_8_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[9] ), 
    .B0(\ADCStateMachine_2/un19_nobxs_cry_8_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[8] ), 
    .FCI(\ADCStateMachine_2/un22_nobxs_cry_7 ), 
    .FCO(\ADCStateMachine_2/un22_nobxs_cry_9 ));
  ADCStateMachine_2_SLICE_90 \ADCStateMachine_2/SLICE_90 ( 
    .B1(\ADCStateMachine_2/un19_nobxs_cry_6_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[7] ), 
    .B0(\ADCStateMachine_2/un19_nobxs_cry_6_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[6] ), 
    .FCI(\ADCStateMachine_2/un22_nobxs_cry_5 ), 
    .FCO(\ADCStateMachine_2/un22_nobxs_cry_7 ));
  ADCStateMachine_2_SLICE_91 \ADCStateMachine_2/SLICE_91 ( 
    .B1(\ADCStateMachine_2/un19_nobxs_cry_4_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[5] ), 
    .B0(\ADCStateMachine_2/un19_nobxs_cry_4_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[4] ), 
    .FCI(\ADCStateMachine_2/un22_nobxs_cry_3 ), 
    .FCO(\ADCStateMachine_2/un22_nobxs_cry_5 ));
  ADCStateMachine_2_SLICE_92 \ADCStateMachine_2/SLICE_92 ( 
    .B1(\ADCStateMachine_2/un19_nobxs_cry_2_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[3] ), 
    .B0(\ADCStateMachine_2/un19_nobxs_cry_2_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[2] ), 
    .FCI(\ADCStateMachine_2/un22_nobxs_cry_1 ), 
    .FCO(\ADCStateMachine_2/un22_nobxs_cry_3 ));
  ADCStateMachine_2_SLICE_93 \ADCStateMachine_2/SLICE_93 ( 
    .B1(\ADCStateMachine_2/un19_nobxs_cry_0_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[1] ), .C0(\SRDataOutxD[32] ), 
    .B0(\SRDataOutxD[16] ), .A0(\ADCStateMachine_2/CountColxDP[0] ), 
    .FCO(\ADCStateMachine_2/un22_nobxs_cry_1 ));
  ADCStateMachine_2_SLICE_94 \ADCStateMachine_2/SLICE_94 ( 
    .A1(\ADCStateMachine_2/CountColxDP[17] ), 
    .A0(\ADCStateMachine_2/CountColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un15_usecxei_cry_15 ), 
    .FCO(\ADCStateMachine_2/un15_usecxei ));
  ADCStateMachine_2_SLICE_95 \ADCStateMachine_2/SLICE_95 ( 
    .B1(\ADCStateMachine_2/un12_usecxei_cry_14_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[15] ), 
    .B0(\ADCStateMachine_2/un12_usecxei_cry_14_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[14] ), 
    .FCI(\ADCStateMachine_2/un15_usecxei_cry_13 ), 
    .FCO(\ADCStateMachine_2/un15_usecxei_cry_15 ));
  ADCStateMachine_2_SLICE_96 \ADCStateMachine_2/SLICE_96 ( 
    .B1(\ADCStateMachine_2/un12_usecxei_cry_12_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[13] ), 
    .B0(\ADCStateMachine_2/un12_usecxei_cry_12_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[12] ), 
    .FCI(\ADCStateMachine_2/un15_usecxei_cry_11 ), 
    .FCO(\ADCStateMachine_2/un15_usecxei_cry_13 ));
  ADCStateMachine_2_SLICE_97 \ADCStateMachine_2/SLICE_97 ( 
    .B1(\ADCStateMachine_2/un12_usecxei_cry_10_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[11] ), 
    .B0(\ADCStateMachine_2/un12_usecxei_cry_10_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[10] ), 
    .FCI(\ADCStateMachine_2/un15_usecxei_cry_9 ), 
    .FCO(\ADCStateMachine_2/un15_usecxei_cry_11 ));
  ADCStateMachine_2_SLICE_98 \ADCStateMachine_2/SLICE_98 ( 
    .B1(\ADCStateMachine_2/un12_usecxei_cry_8_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[9] ), 
    .B0(\ADCStateMachine_2/un12_usecxei_cry_8_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[8] ), 
    .FCI(\ADCStateMachine_2/un15_usecxei_cry_7 ), 
    .FCO(\ADCStateMachine_2/un15_usecxei_cry_9 ));
  ADCStateMachine_2_SLICE_99 \ADCStateMachine_2/SLICE_99 ( 
    .B1(\ADCStateMachine_2/un12_usecxei_cry_6_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[7] ), 
    .B0(\ADCStateMachine_2/un12_usecxei_cry_6_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[6] ), 
    .FCI(\ADCStateMachine_2/un15_usecxei_cry_5 ), 
    .FCO(\ADCStateMachine_2/un15_usecxei_cry_7 ));
  ADCStateMachine_2_SLICE_100 \ADCStateMachine_2/SLICE_100 ( 
    .B1(\ADCStateMachine_2/un12_usecxei_cry_4_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[5] ), 
    .B0(\ADCStateMachine_2/un12_usecxei_cry_4_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[4] ), 
    .FCI(\ADCStateMachine_2/un15_usecxei_cry_3 ), 
    .FCO(\ADCStateMachine_2/un15_usecxei_cry_5 ));
  ADCStateMachine_2_SLICE_101 \ADCStateMachine_2/SLICE_101 ( 
    .B1(\ADCStateMachine_2/un12_usecxei_cry_2_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[3] ), 
    .B0(\ADCStateMachine_2/un12_usecxei_cry_2_0_S0 ), 
    .A0(\ADCStateMachine_2/CountColxDP[2] ), 
    .FCI(\ADCStateMachine_2/un15_usecxei_cry_1 ), 
    .FCO(\ADCStateMachine_2/un15_usecxei_cry_3 ));
  ADCStateMachine_2_SLICE_102 \ADCStateMachine_2/SLICE_102 ( 
    .B1(\ADCStateMachine_2/un12_usecxei_cry_0_0_S1 ), 
    .A1(\ADCStateMachine_2/CountColxDP[1] ), .C0(\SRDataOutxD[32] ), 
    .B0(\SRDataOutxD[16] ), .A0(\ADCStateMachine_2/CountColxDP[0] ), 
    .FCO(\ADCStateMachine_2/un15_usecxei_cry_1 ));
  ADCStateMachine_2_SLICE_103 \ADCStateMachine_2/SLICE_103 ( 
    .B0(\ADCStateMachine_2/DividerRowxDP[16] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_cry_15 ), 
    .OFX0(\ADCStateMachine_2/staterowxdn16_li ));
  ADCStateMachine_2_SLICE_104 \ADCStateMachine_2/SLICE_104 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[15] ), .A1(\SRDataOutxD[63] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[14] ), .A0(\SRDataOutxD[62] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_cry_13 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_cry_15 ));
  ADCStateMachine_2_SLICE_105 \ADCStateMachine_2/SLICE_105 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[13] ), .A1(\SRDataOutxD[61] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[12] ), .A0(\SRDataOutxD[60] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_cry_11 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_cry_13 ));
  ADCStateMachine_2_SLICE_106 \ADCStateMachine_2/SLICE_106 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[11] ), .A1(\SRDataOutxD[59] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[10] ), .A0(\SRDataOutxD[58] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_cry_9 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_cry_11 ));
  ADCStateMachine_2_SLICE_107 \ADCStateMachine_2/SLICE_107 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[9] ), .A1(\SRDataOutxD[57] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[8] ), .A0(\SRDataOutxD[56] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_cry_7 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_cry_9 ));
  ADCStateMachine_2_SLICE_108 \ADCStateMachine_2/SLICE_108 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[7] ), .A1(\SRDataOutxD[55] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[6] ), .A0(\SRDataOutxD[54] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_cry_5 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_cry_7 ));
  ADCStateMachine_2_SLICE_109 \ADCStateMachine_2/SLICE_109 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[5] ), .A1(\SRDataOutxD[53] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[4] ), .A0(\SRDataOutxD[52] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_cry_3 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_cry_5 ));
  ADCStateMachine_2_SLICE_110 \ADCStateMachine_2/SLICE_110 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[3] ), .A1(\SRDataOutxD[51] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[2] ), .A0(\SRDataOutxD[50] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_cry_1 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_cry_3 ));
  ADCStateMachine_2_SLICE_111 \ADCStateMachine_2/SLICE_111 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[1] ), .A1(\SRDataOutxD[49] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[0] ), .A0(\SRDataOutxD[48] ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_cry_1 ));
  ADCStateMachine_2_SLICE_112 \ADCStateMachine_2/SLICE_112 ( 
    .B0(\ADCStateMachine_2/DividerRowxDP[16] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_15 ), 
    .OFX0(\ADCStateMachine_2/staterowxdn22_li ));
  ADCStateMachine_2_SLICE_113 \ADCStateMachine_2/SLICE_113 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[15] ), .A1(\SRDataOutxD[79] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[14] ), .A0(\SRDataOutxD[78] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_13 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_15 ));
  ADCStateMachine_2_SLICE_114 \ADCStateMachine_2/SLICE_114 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[13] ), .A1(\SRDataOutxD[77] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[12] ), .A0(\SRDataOutxD[76] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_11 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_13 ));
  ADCStateMachine_2_SLICE_115 \ADCStateMachine_2/SLICE_115 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[11] ), .A1(\SRDataOutxD[75] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[10] ), .A0(\SRDataOutxD[74] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_9 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_11 ));
  ADCStateMachine_2_SLICE_116 \ADCStateMachine_2/SLICE_116 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[9] ), .A1(\SRDataOutxD[73] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[8] ), .A0(\SRDataOutxD[72] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_7 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_9 ));
  ADCStateMachine_2_SLICE_117 \ADCStateMachine_2/SLICE_117 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[7] ), .A1(\SRDataOutxD[71] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[6] ), .A0(\SRDataOutxD[70] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_5 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_7 ));
  ADCStateMachine_2_SLICE_118 \ADCStateMachine_2/SLICE_118 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[5] ), .A1(\SRDataOutxD[69] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[4] ), .A0(\SRDataOutxD[68] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_3 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_5 ));
  ADCStateMachine_2_SLICE_119 \ADCStateMachine_2/SLICE_119 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[3] ), .A1(\SRDataOutxD[67] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[2] ), .A0(\SRDataOutxD[66] ), 
    .FCI(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_1 ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_3 ));
  ADCStateMachine_2_SLICE_120 \ADCStateMachine_2/SLICE_120 ( 
    .B1(\ADCStateMachine_2/DividerRowxDP[1] ), .A1(\SRDataOutxD[65] ), 
    .B0(\ADCStateMachine_2/DividerRowxDP[0] ), .A0(\SRDataOutxD[64] ), 
    .FCO(\ADCStateMachine_2/un1_DividerRowxDP_1_cry_1 ));
  ADCStateMachine_2_SLICE_121 \ADCStateMachine_2/SLICE_121 ( 
    .B0(\ADCStateMachine_2/DividerColxDP[32] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[31] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[29] ), 
    .OFX0(\ADCStateMachine_2/un1_DividerColxDP ));
  ADCStateMachine_2_SLICE_122 \ADCStateMachine_2/SLICE_122 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[30] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[29] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[28] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[27] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[25] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[29] ));
  ADCStateMachine_2_SLICE_123 \ADCStateMachine_2/SLICE_123 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[26] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[25] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[24] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[23] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[21] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[25] ));
  ADCStateMachine_2_SLICE_124 \ADCStateMachine_2/SLICE_124 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[22] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[21] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[20] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[19] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[17] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[21] ));
  ADCStateMachine_2_SLICE_125 \ADCStateMachine_2/SLICE_125 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[18] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[17] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[15] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[17] ));
  ADCStateMachine_2_SLICE_126 \ADCStateMachine_2/SLICE_126 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[15] ), .A1(\SRDataOutxD[95] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[14] ), .A0(\SRDataOutxD[94] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[13] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[15] ));
  ADCStateMachine_2_SLICE_127 \ADCStateMachine_2/SLICE_127 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[13] ), .A1(\SRDataOutxD[93] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[12] ), .A0(\SRDataOutxD[92] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[11] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[13] ));
  ADCStateMachine_2_SLICE_128 \ADCStateMachine_2/SLICE_128 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[11] ), .A1(\SRDataOutxD[91] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[10] ), .A0(\SRDataOutxD[90] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[9] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[11] ));
  ADCStateMachine_2_SLICE_129 \ADCStateMachine_2/SLICE_129 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[9] ), .A1(\SRDataOutxD[89] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[8] ), .A0(\SRDataOutxD[88] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[7] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[9] ));
  ADCStateMachine_2_SLICE_130 \ADCStateMachine_2/SLICE_130 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[7] ), .A1(\SRDataOutxD[87] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[6] ), .A0(\SRDataOutxD[86] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[5] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[7] ));
  ADCStateMachine_2_SLICE_131 \ADCStateMachine_2/SLICE_131 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[5] ), .A1(\SRDataOutxD[85] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[4] ), .A0(\SRDataOutxD[84] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[3] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[5] ));
  ADCStateMachine_2_SLICE_132 \ADCStateMachine_2/SLICE_132 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[3] ), .A1(\SRDataOutxD[83] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[2] ), .A0(\SRDataOutxD[82] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_cry[1] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[3] ));
  ADCStateMachine_2_SLICE_133 \ADCStateMachine_2/SLICE_133 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[1] ), .A1(\SRDataOutxD[81] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[0] ), .A0(\SRDataOutxD[80] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_cry[1] ));
  ADCStateMachine_2_SLICE_134 \ADCStateMachine_2/SLICE_134 ( 
    .B0(\ADCStateMachine_2/DividerColxDP[32] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[31] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[29] ), 
    .OFX0(\ADCStateMachine_2/un1_DividerColxDP_1 ));
  ADCStateMachine_2_SLICE_135 \ADCStateMachine_2/SLICE_135 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[30] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[29] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[28] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[27] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[25] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[29] ));
  ADCStateMachine_2_SLICE_136 \ADCStateMachine_2/SLICE_136 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[26] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[25] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[24] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[23] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[21] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[25] ));
  ADCStateMachine_2_SLICE_137 \ADCStateMachine_2/SLICE_137 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[22] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[21] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[20] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[19] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[17] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[21] ));
  ADCStateMachine_2_SLICE_138 \ADCStateMachine_2/SLICE_138 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[18] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[17] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[16] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[15] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[17] ));
  ADCStateMachine_2_SLICE_139 \ADCStateMachine_2/SLICE_139 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[15] ), .A1(\SRDataOutxD[63] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[14] ), .A0(\SRDataOutxD[62] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[13] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[15] ));
  ADCStateMachine_2_SLICE_140 \ADCStateMachine_2/SLICE_140 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[13] ), .A1(\SRDataOutxD[61] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[12] ), .A0(\SRDataOutxD[60] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[11] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[13] ));
  ADCStateMachine_2_SLICE_141 \ADCStateMachine_2/SLICE_141 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[11] ), .A1(\SRDataOutxD[59] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[10] ), .A0(\SRDataOutxD[58] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[9] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[11] ));
  ADCStateMachine_2_SLICE_142 \ADCStateMachine_2/SLICE_142 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[9] ), .A1(\SRDataOutxD[57] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[8] ), .A0(\SRDataOutxD[56] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[7] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[9] ));
  ADCStateMachine_2_SLICE_143 \ADCStateMachine_2/SLICE_143 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[7] ), .A1(\SRDataOutxD[55] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[6] ), .A0(\SRDataOutxD[54] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[5] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[7] ));
  ADCStateMachine_2_SLICE_144 \ADCStateMachine_2/SLICE_144 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[5] ), .A1(\SRDataOutxD[53] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[4] ), .A0(\SRDataOutxD[52] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[3] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[5] ));
  ADCStateMachine_2_SLICE_145 \ADCStateMachine_2/SLICE_145 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[3] ), .A1(\SRDataOutxD[51] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[2] ), .A0(\SRDataOutxD[50] ), 
    .FCI(\ADCStateMachine_2/un1_DividerColxDP_1_cry[1] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[3] ));
  ADCStateMachine_2_SLICE_146 \ADCStateMachine_2/SLICE_146 ( 
    .B1(\ADCStateMachine_2/DividerColxDP[1] ), .A1(\SRDataOutxD[49] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[0] ), .A0(\SRDataOutxD[48] ), 
    .FCO(\ADCStateMachine_2/un1_DividerColxDP_1_cry[1] ));
  ADCStateMachine_2_SLICE_147 \ADCStateMachine_2/SLICE_147 ( 
    .A1(\SRDataOutxD[31] ), .A0(\SRDataOutxD[30] ), 
    .FCI(\ADCStateMachine_2/un3_usecxei_cry_7 ), 
    .Q0(\ADCStateMachine_2/un3_usecxei_cry_8_0_S0 ), 
    .Q1(\ADCStateMachine_2/un3_usecxei_cry_8_0_S1 ));
  ADCStateMachine_2_SLICE_148 \ADCStateMachine_2/SLICE_148 ( 
    .A1(\SRDataOutxD[29] ), .A0(\SRDataOutxD[28] ), 
    .FCI(\ADCStateMachine_2/un3_usecxei_cry_5 ), 
    .Q0(\ADCStateMachine_2/un3_usecxei_cry_6_0_S0 ), 
    .Q1(\ADCStateMachine_2/un3_usecxei_cry_6_0_S1 ), 
    .FCO(\ADCStateMachine_2/un3_usecxei_cry_7 ));
  ADCStateMachine_2_SLICE_149 \ADCStateMachine_2/SLICE_149 ( 
    .A1(\SRDataOutxD[27] ), .A0(\SRDataOutxD[26] ), 
    .FCI(\ADCStateMachine_2/un3_usecxei_cry_3 ), 
    .Q0(\ADCStateMachine_2/un3_usecxei_cry_4_0_S0 ), 
    .Q1(\ADCStateMachine_2/un3_usecxei_cry_4_0_S1 ), 
    .FCO(\ADCStateMachine_2/un3_usecxei_cry_5 ));
  ADCStateMachine_2_SLICE_150 \ADCStateMachine_2/SLICE_150 ( 
    .A1(\SRDataOutxD[25] ), .A0(\SRDataOutxD[24] ), 
    .FCI(\ADCStateMachine_2/un3_usecxei_cry_1 ), 
    .Q0(\ADCStateMachine_2/un3_usecxei_cry_2_0_S0 ), 
    .Q1(\ADCStateMachine_2/un3_usecxei_cry_2_0_S1 ), 
    .FCO(\ADCStateMachine_2/un3_usecxei_cry_3 ));
  ADCStateMachine_2_SLICE_151 \ADCStateMachine_2/SLICE_151 ( 
    .A1(\SRDataOutxD[23] ), .A0(\SRDataOutxD[22] ), 
    .Q1(\ADCStateMachine_2/un3_usecxei_cry_0_0_S1 ), 
    .FCO(\ADCStateMachine_2/un3_usecxei_cry_1 ));
  ADCStateMachine_2_SLICE_152 \ADCStateMachine_2/SLICE_152 ( 
    .A0(\SRDataOutxD[31] ), .FCI(\ADCStateMachine_2/un10_nobxs_cry_13 ), 
    .Q0(\ADCStateMachine_2/un13_nobxs_15 ));
  ADCStateMachine_2_SLICE_153 \ADCStateMachine_2/SLICE_153 ( 
    .A1(\SRDataOutxD[30] ), .A0(\SRDataOutxD[29] ), 
    .FCI(\ADCStateMachine_2/un10_nobxs_cry_11 ), 
    .Q0(\ADCStateMachine_2/un13_nobxs_13 ), 
    .Q1(\ADCStateMachine_2/un13_nobxs_14 ), 
    .FCO(\ADCStateMachine_2/un10_nobxs_cry_13 ));
  ADCStateMachine_2_SLICE_154 \ADCStateMachine_2/SLICE_154 ( 
    .A1(\SRDataOutxD[28] ), .A0(\SRDataOutxD[27] ), 
    .FCI(\ADCStateMachine_2/un10_nobxs_cry_9 ), 
    .Q0(\ADCStateMachine_2/un13_nobxs_11 ), 
    .Q1(\ADCStateMachine_2/un13_nobxs_12 ), 
    .FCO(\ADCStateMachine_2/un10_nobxs_cry_11 ));
  ADCStateMachine_2_SLICE_155 \ADCStateMachine_2/SLICE_155 ( 
    .A1(\SRDataOutxD[26] ), .A0(\SRDataOutxD[25] ), 
    .FCI(\ADCStateMachine_2/un10_nobxs_cry_7 ), 
    .Q0(\ADCStateMachine_2/un13_nobxs_9 ), 
    .Q1(\ADCStateMachine_2/un13_nobxs_10 ), 
    .FCO(\ADCStateMachine_2/un10_nobxs_cry_9 ));
  ADCStateMachine_2_SLICE_156 \ADCStateMachine_2/SLICE_156 ( 
    .A1(\SRDataOutxD[24] ), .A0(\SRDataOutxD[23] ), 
    .FCI(\ADCStateMachine_2/un10_nobxs_cry_5 ), 
    .Q0(\ADCStateMachine_2/un13_nobxs_7 ), 
    .Q1(\ADCStateMachine_2/un13_nobxs_8 ), 
    .FCO(\ADCStateMachine_2/un10_nobxs_cry_7 ));
  ADCStateMachine_2_SLICE_157 \ADCStateMachine_2/SLICE_157 ( 
    .A1(\SRDataOutxD[22] ), .A0(\SRDataOutxD[21] ), 
    .FCI(\ADCStateMachine_2/un10_nobxs_cry_3 ), 
    .Q0(\ADCStateMachine_2/un13_nobxs_5 ), 
    .Q1(\ADCStateMachine_2/un13_nobxs_6 ), 
    .FCO(\ADCStateMachine_2/un10_nobxs_cry_5 ));
  ADCStateMachine_2_SLICE_158 \ADCStateMachine_2/SLICE_158 ( 
    .A1(\SRDataOutxD[20] ), .A0(\SRDataOutxD[19] ), 
    .FCI(\ADCStateMachine_2/un10_nobxs_cry_1 ), 
    .Q0(\ADCStateMachine_2/un13_nobxs_3 ), 
    .Q1(\ADCStateMachine_2/un13_nobxs_4 ), 
    .FCO(\ADCStateMachine_2/un10_nobxs_cry_3 ));
  ADCStateMachine_2_SLICE_159 \ADCStateMachine_2/SLICE_159 ( 
    .A1(\SRDataOutxD[18] ), .A0(\SRDataOutxD[17] ), 
    .Q1(\ADCStateMachine_2/un13_nobxs_2 ), 
    .FCO(\ADCStateMachine_2/un10_nobxs_cry_1 ));
  ADCStateMachine_2_SLICE_160 \ADCStateMachine_2/SLICE_160 ( 
    .B1(\SRDataOutxD[47] ), .A1(\SRDataOutxD[31] ), .B0(\SRDataOutxD[46] ), 
    .A0(\SRDataOutxD[30] ), .FCI(\ADCStateMachine_2/un16_nobxs_cry_13 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_axb_14 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_axb_15 ));
  ADCStateMachine_2_SLICE_161 \ADCStateMachine_2/SLICE_161 ( 
    .B1(\SRDataOutxD[45] ), .A1(\SRDataOutxD[29] ), .B0(\SRDataOutxD[44] ), 
    .A0(\SRDataOutxD[28] ), .FCI(\ADCStateMachine_2/un16_nobxs_cry_11 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_axb_12 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_axb_13 ), 
    .FCO(\ADCStateMachine_2/un16_nobxs_cry_13 ));
  ADCStateMachine_2_SLICE_162 \ADCStateMachine_2/SLICE_162 ( 
    .B1(\SRDataOutxD[43] ), .A1(\SRDataOutxD[27] ), .B0(\SRDataOutxD[42] ), 
    .A0(\SRDataOutxD[26] ), .FCI(\ADCStateMachine_2/un16_nobxs_cry_9 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_axb_10 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_axb_11 ), 
    .FCO(\ADCStateMachine_2/un16_nobxs_cry_11 ));
  ADCStateMachine_2_SLICE_163 \ADCStateMachine_2/SLICE_163 ( 
    .B1(\SRDataOutxD[41] ), .A1(\SRDataOutxD[25] ), .B0(\SRDataOutxD[40] ), 
    .A0(\SRDataOutxD[24] ), .FCI(\ADCStateMachine_2/un16_nobxs_cry_7 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_axb_8 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_axb_9 ), 
    .FCO(\ADCStateMachine_2/un16_nobxs_cry_9 ));
  ADCStateMachine_2_SLICE_164 \ADCStateMachine_2/SLICE_164 ( 
    .B1(\SRDataOutxD[39] ), .A1(\SRDataOutxD[23] ), .B0(\SRDataOutxD[38] ), 
    .A0(\SRDataOutxD[22] ), .FCI(\ADCStateMachine_2/un16_nobxs_cry_5 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_axb_6 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_axb_7 ), 
    .FCO(\ADCStateMachine_2/un16_nobxs_cry_7 ));
  ADCStateMachine_2_SLICE_165 \ADCStateMachine_2/SLICE_165 ( 
    .B1(\SRDataOutxD[37] ), .A1(\SRDataOutxD[21] ), .B0(\SRDataOutxD[36] ), 
    .A0(\SRDataOutxD[20] ), .FCI(\ADCStateMachine_2/un16_nobxs_cry_3 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_axb_4 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_axb_5 ), 
    .FCO(\ADCStateMachine_2/un16_nobxs_cry_5 ));
  ADCStateMachine_2_SLICE_166 \ADCStateMachine_2/SLICE_166 ( 
    .B1(\SRDataOutxD[35] ), .A1(\SRDataOutxD[19] ), .B0(\SRDataOutxD[34] ), 
    .A0(\SRDataOutxD[18] ), .FCI(\ADCStateMachine_2/un16_nobxs_cry_1 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_axb_2 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_axb_3 ), 
    .FCO(\ADCStateMachine_2/un16_nobxs_cry_3 ));
  ADCStateMachine_2_SLICE_167 \ADCStateMachine_2/SLICE_167 ( 
    .B1(\SRDataOutxD[33] ), .A1(\SRDataOutxD[17] ), .B0(\SRDataOutxD[32] ), 
    .A0(\SRDataOutxD[16] ), .Q1(\ADCStateMachine_2/un27_nobxs ), 
    .FCO(\ADCStateMachine_2/un16_nobxs_cry_1 ));
  ADCStateMachine_2_SLICE_168 \ADCStateMachine_2/SLICE_168 ( 
    .A1(\SRDataOutxD[31] ), .A0(\SRDataOutxD[30] ), 
    .FCI(\ADCStateMachine_2/un3_nobxs_cry_13 ), 
    .Q0(\ADCStateMachine_2/un3_nobxs_cry_14_0_S0 ), 
    .Q1(\ADCStateMachine_2/un3_nobxs_cry_14_0_S1 ));
  ADCStateMachine_2_SLICE_169 \ADCStateMachine_2/SLICE_169 ( 
    .A1(\SRDataOutxD[29] ), .A0(\SRDataOutxD[28] ), 
    .FCI(\ADCStateMachine_2/un3_nobxs_cry_11 ), 
    .Q0(\ADCStateMachine_2/un3_nobxs_cry_12_0_S0 ), 
    .Q1(\ADCStateMachine_2/un3_nobxs_cry_12_0_S1 ), 
    .FCO(\ADCStateMachine_2/un3_nobxs_cry_13 ));
  ADCStateMachine_2_SLICE_170 \ADCStateMachine_2/SLICE_170 ( 
    .A1(\SRDataOutxD[27] ), .A0(\SRDataOutxD[26] ), 
    .FCI(\ADCStateMachine_2/un3_nobxs_cry_9 ), 
    .Q0(\ADCStateMachine_2/un3_nobxs_cry_10_0_S0 ), 
    .Q1(\ADCStateMachine_2/un3_nobxs_cry_10_0_S1 ), 
    .FCO(\ADCStateMachine_2/un3_nobxs_cry_11 ));
  ADCStateMachine_2_SLICE_171 \ADCStateMachine_2/SLICE_171 ( 
    .A1(\SRDataOutxD[25] ), .A0(\SRDataOutxD[24] ), 
    .FCI(\ADCStateMachine_2/un3_nobxs_cry_7 ), 
    .Q0(\ADCStateMachine_2/un3_nobxs_cry_8_0_S0 ), 
    .Q1(\ADCStateMachine_2/un3_nobxs_cry_8_0_S1 ), 
    .FCO(\ADCStateMachine_2/un3_nobxs_cry_9 ));
  ADCStateMachine_2_SLICE_172 \ADCStateMachine_2/SLICE_172 ( 
    .A1(\SRDataOutxD[23] ), .A0(\SRDataOutxD[22] ), 
    .FCI(\ADCStateMachine_2/un3_nobxs_cry_5 ), 
    .Q0(\ADCStateMachine_2/un3_nobxs_cry_6_0_S0 ), 
    .Q1(\ADCStateMachine_2/un3_nobxs_cry_6_0_S1 ), 
    .FCO(\ADCStateMachine_2/un3_nobxs_cry_7 ));
  ADCStateMachine_2_SLICE_173 \ADCStateMachine_2/SLICE_173 ( 
    .A1(\SRDataOutxD[21] ), .A0(\SRDataOutxD[20] ), 
    .FCI(\ADCStateMachine_2/un3_nobxs_cry_3 ), 
    .Q0(\ADCStateMachine_2/un3_nobxs_cry_4_0_S0 ), 
    .Q1(\ADCStateMachine_2/un3_nobxs_cry_4_0_S1 ), 
    .FCO(\ADCStateMachine_2/un3_nobxs_cry_5 ));
  ADCStateMachine_2_SLICE_174 \ADCStateMachine_2/SLICE_174 ( 
    .A1(\SRDataOutxD[19] ), .A0(\SRDataOutxD[18] ), 
    .FCI(\ADCStateMachine_2/un3_nobxs_cry_1 ), 
    .Q0(\ADCStateMachine_2/un3_nobxs_cry_2_0_S0 ), 
    .Q1(\ADCStateMachine_2/un3_nobxs_cry_2_0_S1 ), 
    .FCO(\ADCStateMachine_2/un3_nobxs_cry_3 ));
  ADCStateMachine_2_SLICE_175 \ADCStateMachine_2/SLICE_175 ( 
    .A1(\SRDataOutxD[17] ), .A0(\SRDataOutxD[16] ), 
    .Q1(\ADCStateMachine_2/un3_nobxs_cry_0_0_S1 ), 
    .FCO(\ADCStateMachine_2/un3_nobxs_cry_1 ));
  ADCStateMachine_2_SLICE_176 \ADCStateMachine_2/SLICE_176 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_15 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_14 ), 
    .FCI(\ADCStateMachine_2/un19_nobxs_cry_13 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_cry_14_0_S0 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_cry_14_0_S1 ));
  ADCStateMachine_2_SLICE_177 \ADCStateMachine_2/SLICE_177 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_13 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_12 ), 
    .FCI(\ADCStateMachine_2/un19_nobxs_cry_11 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_cry_12_0_S0 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_cry_12_0_S1 ), 
    .FCO(\ADCStateMachine_2/un19_nobxs_cry_13 ));
  ADCStateMachine_2_SLICE_178 \ADCStateMachine_2/SLICE_178 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_11 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_10 ), 
    .FCI(\ADCStateMachine_2/un19_nobxs_cry_9 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_cry_10_0_S0 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_cry_10_0_S1 ), 
    .FCO(\ADCStateMachine_2/un19_nobxs_cry_11 ));
  ADCStateMachine_2_SLICE_179 \ADCStateMachine_2/SLICE_179 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_9 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_8 ), 
    .FCI(\ADCStateMachine_2/un19_nobxs_cry_7 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_cry_8_0_S0 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_cry_8_0_S1 ), 
    .FCO(\ADCStateMachine_2/un19_nobxs_cry_9 ));
  ADCStateMachine_2_SLICE_180 \ADCStateMachine_2/SLICE_180 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_7 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_6 ), 
    .FCI(\ADCStateMachine_2/un19_nobxs_cry_5 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_cry_6_0_S0 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_cry_6_0_S1 ), 
    .FCO(\ADCStateMachine_2/un19_nobxs_cry_7 ));
  ADCStateMachine_2_SLICE_181 \ADCStateMachine_2/SLICE_181 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_5 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_4 ), 
    .FCI(\ADCStateMachine_2/un19_nobxs_cry_3 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_cry_4_0_S0 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_cry_4_0_S1 ), 
    .FCO(\ADCStateMachine_2/un19_nobxs_cry_5 ));
  ADCStateMachine_2_SLICE_182 \ADCStateMachine_2/SLICE_182 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_3 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_2 ), 
    .FCI(\ADCStateMachine_2/un19_nobxs_cry_1 ), 
    .Q0(\ADCStateMachine_2/un19_nobxs_cry_2_0_S0 ), 
    .Q1(\ADCStateMachine_2/un19_nobxs_cry_2_0_S1 ), 
    .FCO(\ADCStateMachine_2/un19_nobxs_cry_3 ));
  ADCStateMachine_2_SLICE_183 \ADCStateMachine_2/SLICE_183 ( 
    .A1(\ADCStateMachine_2/un27_nobxs ), .C0(\SRDataOutxD[16] ), 
    .B0(\SRDataOutxD[32] ), .Q1(\ADCStateMachine_2/un19_nobxs_cry_0_0_S1 ), 
    .FCO(\ADCStateMachine_2/un19_nobxs_cry_1 ));
  ADCStateMachine_2_SLICE_184 \ADCStateMachine_2/SLICE_184 ( 
    .B1(\SRDataOutxD[47] ), .A1(\ADCStateMachine_2/un3_usecxei_cry_8_0_S1 ), 
    .B0(\SRDataOutxD[46] ), .A0(\ADCStateMachine_2/un3_usecxei_cry_8_0_S0 ), 
    .FCI(\ADCStateMachine_2/un12_usecxei_cry_13 ), 
    .Q0(\ADCStateMachine_2/un12_usecxei_cry_14_0_S0 ), 
    .Q1(\ADCStateMachine_2/un12_usecxei_cry_14_0_S1 ));
  ADCStateMachine_2_SLICE_185 \ADCStateMachine_2/SLICE_185 ( 
    .B1(\SRDataOutxD[45] ), .A1(\ADCStateMachine_2/un3_usecxei_cry_6_0_S1 ), 
    .B0(\SRDataOutxD[44] ), .A0(\ADCStateMachine_2/un3_usecxei_cry_6_0_S0 ), 
    .FCI(\ADCStateMachine_2/un12_usecxei_cry_11 ), 
    .Q0(\ADCStateMachine_2/un12_usecxei_cry_12_0_S0 ), 
    .Q1(\ADCStateMachine_2/un12_usecxei_cry_12_0_S1 ), 
    .FCO(\ADCStateMachine_2/un12_usecxei_cry_13 ));
  ADCStateMachine_2_SLICE_186 \ADCStateMachine_2/SLICE_186 ( 
    .B1(\SRDataOutxD[43] ), .A1(\ADCStateMachine_2/un3_usecxei_cry_4_0_S1 ), 
    .B0(\SRDataOutxD[42] ), .A0(\ADCStateMachine_2/un3_usecxei_cry_4_0_S0 ), 
    .FCI(\ADCStateMachine_2/un12_usecxei_cry_9 ), 
    .Q0(\ADCStateMachine_2/un12_usecxei_cry_10_0_S0 ), 
    .Q1(\ADCStateMachine_2/un12_usecxei_cry_10_0_S1 ), 
    .FCO(\ADCStateMachine_2/un12_usecxei_cry_11 ));
  ADCStateMachine_2_SLICE_187 \ADCStateMachine_2/SLICE_187 ( 
    .B1(\SRDataOutxD[41] ), .A1(\ADCStateMachine_2/un3_usecxei_cry_2_0_S1 ), 
    .B0(\SRDataOutxD[40] ), .A0(\ADCStateMachine_2/un3_usecxei_cry_2_0_S0 ), 
    .FCI(\ADCStateMachine_2/un12_usecxei_cry_7 ), 
    .Q0(\ADCStateMachine_2/un12_usecxei_cry_8_0_S0 ), 
    .Q1(\ADCStateMachine_2/un12_usecxei_cry_8_0_S1 ), 
    .FCO(\ADCStateMachine_2/un12_usecxei_cry_9 ));
  ADCStateMachine_2_SLICE_188 \ADCStateMachine_2/SLICE_188 ( 
    .B1(\SRDataOutxD[39] ), .A1(\ADCStateMachine_2/un3_usecxei_cry_0_0_S1 ), 
    .B0(\SRDataOutxD[22] ), .A0(\SRDataOutxD[38] ), 
    .FCI(\ADCStateMachine_2/un12_usecxei_cry_5 ), 
    .Q0(\ADCStateMachine_2/un12_usecxei_cry_6_0_S0 ), 
    .Q1(\ADCStateMachine_2/un12_usecxei_cry_6_0_S1 ), 
    .FCO(\ADCStateMachine_2/un12_usecxei_cry_7 ));
  ADCStateMachine_2_SLICE_189 \ADCStateMachine_2/SLICE_189 ( 
    .B1(\SRDataOutxD[21] ), .A1(\SRDataOutxD[37] ), .B0(\SRDataOutxD[20] ), 
    .A0(\SRDataOutxD[36] ), .FCI(\ADCStateMachine_2/un12_usecxei_cry_3 ), 
    .Q0(\ADCStateMachine_2/un12_usecxei_cry_4_0_S0 ), 
    .Q1(\ADCStateMachine_2/un12_usecxei_cry_4_0_S1 ), 
    .FCO(\ADCStateMachine_2/un12_usecxei_cry_5 ));
  ADCStateMachine_2_SLICE_190 \ADCStateMachine_2/SLICE_190 ( 
    .B1(\SRDataOutxD[19] ), .A1(\SRDataOutxD[35] ), .B0(\SRDataOutxD[18] ), 
    .A0(\SRDataOutxD[34] ), .FCI(\ADCStateMachine_2/un12_usecxei_cry_1 ), 
    .Q0(\ADCStateMachine_2/un12_usecxei_cry_2_0_S0 ), 
    .Q1(\ADCStateMachine_2/un12_usecxei_cry_2_0_S1 ), 
    .FCO(\ADCStateMachine_2/un12_usecxei_cry_3 ));
  ADCStateMachine_2_SLICE_191 \ADCStateMachine_2/SLICE_191 ( 
    .B1(\SRDataOutxD[17] ), .A1(\SRDataOutxD[33] ), .B0(\SRDataOutxD[16] ), 
    .A0(\SRDataOutxD[32] ), .Q1(\ADCStateMachine_2/un12_usecxei_cry_0_0_S1 ), 
    .FCO(\ADCStateMachine_2/un12_usecxei_cry_1 ));
  ADCStateMachine_2_SLICE_192 \ADCStateMachine_2/SLICE_192 ( 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_15 ), 
    .FCI(\ADCStateMachine_2/un27_nobxs_cry_14 ), 
    .Q0(\ADCStateMachine_2/un30_nobxs_15 ));
  ADCStateMachine_2_SLICE_193 \ADCStateMachine_2/SLICE_193 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_14 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_13 ), 
    .FCI(\ADCStateMachine_2/un27_nobxs_cry_12 ), 
    .Q0(\ADCStateMachine_2/un30_nobxs_13 ), 
    .Q1(\ADCStateMachine_2/un30_nobxs_14 ), 
    .FCO(\ADCStateMachine_2/un27_nobxs_cry_14 ));
  ADCStateMachine_2_SLICE_194 \ADCStateMachine_2/SLICE_194 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_12 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_11 ), 
    .FCI(\ADCStateMachine_2/un27_nobxs_cry_10 ), 
    .Q0(\ADCStateMachine_2/un30_nobxs_11 ), 
    .Q1(\ADCStateMachine_2/un30_nobxs_12 ), 
    .FCO(\ADCStateMachine_2/un27_nobxs_cry_12 ));
  ADCStateMachine_2_SLICE_195 \ADCStateMachine_2/SLICE_195 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_10 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_9 ), 
    .FCI(\ADCStateMachine_2/un27_nobxs_cry_8 ), 
    .Q0(\ADCStateMachine_2/un30_nobxs_9 ), 
    .Q1(\ADCStateMachine_2/un30_nobxs_10 ), 
    .FCO(\ADCStateMachine_2/un27_nobxs_cry_10 ));
  ADCStateMachine_2_SLICE_196 \ADCStateMachine_2/SLICE_196 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_8 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_7 ), 
    .FCI(\ADCStateMachine_2/un27_nobxs_cry_6 ), 
    .Q0(\ADCStateMachine_2/un30_nobxs_7 ), 
    .Q1(\ADCStateMachine_2/un30_nobxs_8 ), 
    .FCO(\ADCStateMachine_2/un27_nobxs_cry_8 ));
  ADCStateMachine_2_SLICE_197 \ADCStateMachine_2/SLICE_197 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_6 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_5 ), 
    .FCI(\ADCStateMachine_2/un27_nobxs_cry_4 ), 
    .Q0(\ADCStateMachine_2/un30_nobxs_5 ), 
    .Q1(\ADCStateMachine_2/un30_nobxs_6 ), 
    .FCO(\ADCStateMachine_2/un27_nobxs_cry_6 ));
  ADCStateMachine_2_SLICE_198 \ADCStateMachine_2/SLICE_198 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_4 ), 
    .A0(\ADCStateMachine_2/un19_nobxs_axb_3 ), 
    .FCI(\ADCStateMachine_2/un27_nobxs_cry_2 ), 
    .Q0(\ADCStateMachine_2/un30_nobxs_3 ), 
    .Q1(\ADCStateMachine_2/un30_nobxs_4 ), 
    .FCO(\ADCStateMachine_2/un27_nobxs_cry_4 ));
  ADCStateMachine_2_SLICE_199 \ADCStateMachine_2/SLICE_199 ( 
    .A1(\ADCStateMachine_2/un19_nobxs_axb_2 ), 
    .A0(\ADCStateMachine_2/un27_nobxs ), .Q1(\ADCStateMachine_2/un30_nobxs_2 ), 
    .FCO(\ADCStateMachine_2/un27_nobxs_cry_2 ));
  ADCStateMachine_2_SLICE_200 \ADCStateMachine_2/SLICE_200 ( 
    .A0(\ADCStateMachine_2/DividerColxDP[32] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[31] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[32] ));
  ADCStateMachine_2_SLICE_201 \ADCStateMachine_2/SLICE_201 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[31] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[30] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[29] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[30] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[31] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[31] ));
  ADCStateMachine_2_SLICE_202 \ADCStateMachine_2/SLICE_202 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[29] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[28] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[27] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[28] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[29] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[29] ));
  ADCStateMachine_2_SLICE_203 \ADCStateMachine_2/SLICE_203 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[27] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[26] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[25] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[26] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[27] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[27] ));
  ADCStateMachine_2_SLICE_204 \ADCStateMachine_2/SLICE_204 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[25] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[24] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[23] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[24] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[25] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[25] ));
  ADCStateMachine_2_SLICE_205 \ADCStateMachine_2/SLICE_205 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[23] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[22] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[21] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[22] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[23] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[23] ));
  ADCStateMachine_2_SLICE_206 \ADCStateMachine_2/SLICE_206 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[21] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[20] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[19] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[20] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[21] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[21] ));
  ADCStateMachine_2_SLICE_207 \ADCStateMachine_2/SLICE_207 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[19] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[18] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[17] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[18] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[19] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[19] ));
  ADCStateMachine_2_SLICE_208 \ADCStateMachine_2/SLICE_208 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[17] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[16] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[15] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[16] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[17] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[17] ));
  ADCStateMachine_2_SLICE_209 \ADCStateMachine_2/SLICE_209 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[15] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[14] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[13] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[14] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[15] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[15] ));
  ADCStateMachine_2_SLICE_210 \ADCStateMachine_2/SLICE_210 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[13] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[12] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[11] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[12] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[13] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[13] ));
  ADCStateMachine_2_SLICE_211 \ADCStateMachine_2/SLICE_211 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[11] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[10] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[9] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[10] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[11] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[11] ));
  ADCStateMachine_2_SLICE_212 \ADCStateMachine_2/SLICE_212 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[9] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[8] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[7] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[8] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[9] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[9] ));
  ADCStateMachine_2_SLICE_213 \ADCStateMachine_2/SLICE_213 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[7] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[6] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[5] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[6] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[7] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[7] ));
  ADCStateMachine_2_SLICE_214 \ADCStateMachine_2/SLICE_214 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[5] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[4] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[3] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[4] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[5] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[5] ));
  ADCStateMachine_2_SLICE_215 \ADCStateMachine_2/SLICE_215 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[3] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[2] ), 
    .FCI(\ADCStateMachine_2/DividerColxDP_cry[1] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[2] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[3] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[3] ));
  ADCStateMachine_2_SLICE_216 \ADCStateMachine_2/SLICE_216 ( 
    .A1(\ADCStateMachine_2/DividerColxDP[1] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[0] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP_s[0] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP_s[1] ), 
    .FCO(\ADCStateMachine_2/DividerColxDP_cry[1] ));
  ADCStateMachine_2_SLICE_217 \ADCStateMachine_2/SLICE_217 ( 
    .A0(\ADCStateMachine_2/CountRowxDP[4] ), 
    .FCI(\ADCStateMachine_2/CountRowxDP_cry[3] ), 
    .Q0(\ADCStateMachine_2/CountRowxDP_s[4] ));
  ADCStateMachine_2_SLICE_218 \ADCStateMachine_2/SLICE_218 ( 
    .A1(\ADCStateMachine_2/CountRowxDP[3] ), 
    .A0(\ADCStateMachine_2/CountRowxDP[2] ), 
    .FCI(\ADCStateMachine_2/CountRowxDP_cry[1] ), 
    .Q0(\ADCStateMachine_2/CountRowxDP_s[2] ), 
    .Q1(\ADCStateMachine_2/CountRowxDP_s[3] ), 
    .FCO(\ADCStateMachine_2/CountRowxDP_cry[3] ));
  ADCStateMachine_2_SLICE_219 \ADCStateMachine_2/SLICE_219 ( 
    .A1(\ADCStateMachine_2/CountRowxDP[1] ), 
    .A0(\ADCStateMachine_2/CountRowxDP[0] ), 
    .FCI(\ADCStateMachine_2/CountRowxDP ), 
    .Q0(\ADCStateMachine_2/CountRowxDP_s[0] ), 
    .Q1(\ADCStateMachine_2/CountRowxDP_s[1] ), 
    .FCO(\ADCStateMachine_2/CountRowxDP_cry[1] ));
  ADCStateMachine_2_SLICE_220 \ADCStateMachine_2/SLICE_220 ( 
    .C1(\ADCStateMachine_2/CountColxDP[17] ), 
    .A1(\ADCStateMachine_2/StateColxDP[17] ), 
    .C0(\ADCStateMachine_2/CountColxDP[16] ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), 
    .CE(\ADCStateMachine_2/StartColxSP_cnv_0 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .FCI(\ADCStateMachine_2/CountColxDP_cry[15] ), 
    .Q0(\ADCStateMachine_2/CountColxDP[16] ), 
    .Q1(\ADCStateMachine_2/CountColxDP[17] ));
  ADCStateMachine_2_SLICE_221 \ADCStateMachine_2/SLICE_221 ( 
    .C1(\ADCStateMachine_2/CountColxDP[15] ), 
    .A1(\ADCStateMachine_2/StateColxDP[17] ), 
    .C0(\ADCStateMachine_2/CountColxDP[14] ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), 
    .CE(\ADCStateMachine_2/StartColxSP_cnv_0 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .FCI(\ADCStateMachine_2/CountColxDP_cry[13] ), 
    .Q0(\ADCStateMachine_2/CountColxDP[14] ), 
    .Q1(\ADCStateMachine_2/CountColxDP[15] ), 
    .FCO(\ADCStateMachine_2/CountColxDP_cry[15] ));
  ADCStateMachine_2_SLICE_222 \ADCStateMachine_2/SLICE_222 ( 
    .C1(\ADCStateMachine_2/CountColxDP[13] ), 
    .A1(\ADCStateMachine_2/StateColxDP[17] ), 
    .C0(\ADCStateMachine_2/CountColxDP[12] ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), 
    .CE(\ADCStateMachine_2/StartColxSP_cnv_0 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .FCI(\ADCStateMachine_2/CountColxDP_cry[11] ), 
    .Q0(\ADCStateMachine_2/CountColxDP[12] ), 
    .Q1(\ADCStateMachine_2/CountColxDP[13] ), 
    .FCO(\ADCStateMachine_2/CountColxDP_cry[13] ));
  ADCStateMachine_2_SLICE_223 \ADCStateMachine_2/SLICE_223 ( 
    .C1(\ADCStateMachine_2/CountColxDP[11] ), 
    .A1(\ADCStateMachine_2/StateColxDP[17] ), 
    .C0(\ADCStateMachine_2/CountColxDP[10] ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), 
    .CE(\ADCStateMachine_2/StartColxSP_cnv_0 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .FCI(\ADCStateMachine_2/CountColxDP_cry[9] ), 
    .Q0(\ADCStateMachine_2/CountColxDP[10] ), 
    .Q1(\ADCStateMachine_2/CountColxDP[11] ), 
    .FCO(\ADCStateMachine_2/CountColxDP_cry[11] ));
  ADCStateMachine_2_SLICE_224 \ADCStateMachine_2/SLICE_224 ( 
    .C1(\ADCStateMachine_2/CountColxDP[9] ), 
    .A1(\ADCStateMachine_2/StateColxDP[17] ), 
    .C0(\ADCStateMachine_2/CountColxDP[8] ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), 
    .CE(\ADCStateMachine_2/StartColxSP_cnv_0 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .FCI(\ADCStateMachine_2/CountColxDP_cry[7] ), 
    .Q0(\ADCStateMachine_2/CountColxDP[8] ), 
    .Q1(\ADCStateMachine_2/CountColxDP[9] ), 
    .FCO(\ADCStateMachine_2/CountColxDP_cry[9] ));
  ADCStateMachine_2_SLICE_225 \ADCStateMachine_2/SLICE_225 ( 
    .C1(\ADCStateMachine_2/CountColxDP[7] ), 
    .A1(\ADCStateMachine_2/StateColxDP[17] ), 
    .C0(\ADCStateMachine_2/CountColxDP[6] ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), 
    .CE(\ADCStateMachine_2/StartColxSP_cnv_0 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .FCI(\ADCStateMachine_2/CountColxDP_cry[5] ), 
    .Q0(\ADCStateMachine_2/CountColxDP[6] ), 
    .Q1(\ADCStateMachine_2/CountColxDP[7] ), 
    .FCO(\ADCStateMachine_2/CountColxDP_cry[7] ));
  ADCStateMachine_2_SLICE_226 \ADCStateMachine_2/SLICE_226 ( 
    .C1(\ADCStateMachine_2/CountColxDP[5] ), 
    .A1(\ADCStateMachine_2/StateColxDP[17] ), 
    .C0(\ADCStateMachine_2/CountColxDP[4] ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), 
    .CE(\ADCStateMachine_2/StartColxSP_cnv_0 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .FCI(\ADCStateMachine_2/CountColxDP_cry[3] ), 
    .Q0(\ADCStateMachine_2/CountColxDP[4] ), 
    .Q1(\ADCStateMachine_2/CountColxDP[5] ), 
    .FCO(\ADCStateMachine_2/CountColxDP_cry[5] ));
  ADCStateMachine_2_SLICE_227 \ADCStateMachine_2/SLICE_227 ( 
    .C1(\ADCStateMachine_2/CountColxDP[3] ), 
    .A1(\ADCStateMachine_2/StateColxDP[17] ), 
    .C0(\ADCStateMachine_2/CountColxDP[2] ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), 
    .CE(\ADCStateMachine_2/StartColxSP_cnv_0 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .FCI(\ADCStateMachine_2/CountColxDP_cry[1] ), 
    .Q0(\ADCStateMachine_2/CountColxDP[2] ), 
    .Q1(\ADCStateMachine_2/CountColxDP[3] ), 
    .FCO(\ADCStateMachine_2/CountColxDP_cry[3] ));
  ADCStateMachine_2_SLICE_228 \ADCStateMachine_2/SLICE_228 ( 
    .C1(\ADCStateMachine_2/CountColxDP[1] ), 
    .A1(\ADCStateMachine_2/StateColxDP[17] ), 
    .C0(\ADCStateMachine_2/CountColxDP[0] ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), 
    .CE(\ADCStateMachine_2/StartColxSP_cnv_0 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .FCI(\ADCStateMachine_2/StateColxDP_i_0[17] ), 
    .Q0(\ADCStateMachine_2/CountColxDP[0] ), 
    .Q1(\ADCStateMachine_2/CountColxDP[1] ), 
    .FCO(\ADCStateMachine_2/CountColxDP_cry[1] ));
  ADCStateMachine_2_SLICE_229 \ADCStateMachine_2/SLICE_229 ( 
    .A0(\ADCStateMachine_2/DividerRowxDP[16] ), 
    .FCI(\ADCStateMachine_2/DividerRowxDP_cry_s1[15] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP_s_s1[16] ));
  ADCStateMachine_2_SLICE_230 \ADCStateMachine_2/SLICE_230 ( 
    .A1(\ADCStateMachine_2/DividerRowxDP[15] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[14] ), 
    .FCI(\ADCStateMachine_2/DividerRowxDP_cry_s1[13] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP_s_s1[14] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP_s_s1[15] ), 
    .FCO(\ADCStateMachine_2/DividerRowxDP_cry_s1[15] ));
  ADCStateMachine_2_SLICE_231 \ADCStateMachine_2/SLICE_231 ( 
    .A1(\ADCStateMachine_2/DividerRowxDP[13] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[12] ), 
    .FCI(\ADCStateMachine_2/DividerRowxDP_cry_s1[11] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP_s_s1[12] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP_s_s1[13] ), 
    .FCO(\ADCStateMachine_2/DividerRowxDP_cry_s1[13] ));
  ADCStateMachine_2_SLICE_232 \ADCStateMachine_2/SLICE_232 ( 
    .A1(\ADCStateMachine_2/DividerRowxDP[11] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[10] ), 
    .FCI(\ADCStateMachine_2/DividerRowxDP_cry_s1[9] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP_s_s1[10] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP_s_s1[11] ), 
    .FCO(\ADCStateMachine_2/DividerRowxDP_cry_s1[11] ));
  ADCStateMachine_2_SLICE_233 \ADCStateMachine_2/SLICE_233 ( 
    .A1(\ADCStateMachine_2/DividerRowxDP[9] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[8] ), 
    .FCI(\ADCStateMachine_2/DividerRowxDP_cry_s1[7] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP_s_s1[8] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP_s_s1[9] ), 
    .FCO(\ADCStateMachine_2/DividerRowxDP_cry_s1[9] ));
  ADCStateMachine_2_SLICE_234 \ADCStateMachine_2/SLICE_234 ( 
    .A1(\ADCStateMachine_2/DividerRowxDP[7] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[6] ), 
    .FCI(\ADCStateMachine_2/DividerRowxDP_cry_s1[5] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP_s_s1[6] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP_s_s1[7] ), 
    .FCO(\ADCStateMachine_2/DividerRowxDP_cry_s1[7] ));
  ADCStateMachine_2_SLICE_235 \ADCStateMachine_2/SLICE_235 ( 
    .A1(\ADCStateMachine_2/DividerRowxDP[5] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[4] ), 
    .FCI(\ADCStateMachine_2/DividerRowxDP_cry_s1[3] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP_s_s1[4] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP_s_s1[5] ), 
    .FCO(\ADCStateMachine_2/DividerRowxDP_cry_s1[5] ));
  ADCStateMachine_2_SLICE_236 \ADCStateMachine_2/SLICE_236 ( 
    .A1(\ADCStateMachine_2/DividerRowxDP[3] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[2] ), 
    .FCI(\ADCStateMachine_2/DividerRowxDP_cry_s1[1] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP_s_s1[2] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP_s_s1[3] ), 
    .FCO(\ADCStateMachine_2/DividerRowxDP_cry_s1[3] ));
  ADCStateMachine_2_SLICE_237 \ADCStateMachine_2/SLICE_237 ( 
    .A1(\ADCStateMachine_2/DividerRowxDP[1] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[0] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP_s_s1[0] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP_s_s1[1] ), 
    .FCO(\ADCStateMachine_2/DividerRowxDP_cry_s1[1] ));
  cDVSResetStateMachine_1_SLICE_238 \cDVSResetStateMachine_1/SLICE_238 ( 
    .A0(\cDVSResetStateMachine_1/CountxDP[18] ), 
    .FCI(\cDVSResetStateMachine_1/CountxDP_cry[17] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP_s[18] ));
  cDVSResetStateMachine_1_SLICE_239 \cDVSResetStateMachine_1/SLICE_239 ( 
    .A1(\cDVSResetStateMachine_1/CountxDP[17] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[16] ), 
    .FCI(\cDVSResetStateMachine_1/CountxDP_cry[15] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP_s[16] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP_s[17] ), 
    .FCO(\cDVSResetStateMachine_1/CountxDP_cry[17] ));
  cDVSResetStateMachine_1_SLICE_240 \cDVSResetStateMachine_1/SLICE_240 ( 
    .A1(\cDVSResetStateMachine_1/CountxDP[15] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[14] ), 
    .FCI(\cDVSResetStateMachine_1/CountxDP_cry[13] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP_s[14] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP_s[15] ), 
    .FCO(\cDVSResetStateMachine_1/CountxDP_cry[15] ));
  cDVSResetStateMachine_1_SLICE_241 \cDVSResetStateMachine_1/SLICE_241 ( 
    .A1(\cDVSResetStateMachine_1/CountxDP[13] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[12] ), 
    .FCI(\cDVSResetStateMachine_1/CountxDP_cry[11] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP_s[12] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP_s[13] ), 
    .FCO(\cDVSResetStateMachine_1/CountxDP_cry[13] ));
  cDVSResetStateMachine_1_SLICE_242 \cDVSResetStateMachine_1/SLICE_242 ( 
    .A1(\cDVSResetStateMachine_1/CountxDP[11] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[10] ), 
    .FCI(\cDVSResetStateMachine_1/CountxDP_cry[9] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP_s[10] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP_s[11] ), 
    .FCO(\cDVSResetStateMachine_1/CountxDP_cry[11] ));
  cDVSResetStateMachine_1_SLICE_243 \cDVSResetStateMachine_1/SLICE_243 ( 
    .A1(\cDVSResetStateMachine_1/CountxDP[9] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[8] ), 
    .FCI(\cDVSResetStateMachine_1/CountxDP_cry[7] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP_s[8] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP_s[9] ), 
    .FCO(\cDVSResetStateMachine_1/CountxDP_cry[9] ));
  cDVSResetStateMachine_1_SLICE_244 \cDVSResetStateMachine_1/SLICE_244 ( 
    .A1(\cDVSResetStateMachine_1/CountxDP[7] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[6] ), 
    .FCI(\cDVSResetStateMachine_1/CountxDP_cry[5] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP_s[6] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP_s[7] ), 
    .FCO(\cDVSResetStateMachine_1/CountxDP_cry[7] ));
  cDVSResetStateMachine_1_SLICE_245 \cDVSResetStateMachine_1/SLICE_245 ( 
    .A1(\cDVSResetStateMachine_1/CountxDP[5] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[4] ), 
    .FCI(\cDVSResetStateMachine_1/CountxDP_cry[3] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP_s[4] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP_s[5] ), 
    .FCO(\cDVSResetStateMachine_1/CountxDP_cry[5] ));
  cDVSResetStateMachine_1_SLICE_246 \cDVSResetStateMachine_1/SLICE_246 ( 
    .A1(\cDVSResetStateMachine_1/CountxDP[3] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[2] ), 
    .FCI(\cDVSResetStateMachine_1/CountxDP_cry[1] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP_s[2] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP_s[3] ), 
    .FCO(\cDVSResetStateMachine_1/CountxDP_cry[3] ));
  cDVSResetStateMachine_1_SLICE_247 \cDVSResetStateMachine_1/SLICE_247 ( 
    .A1(\cDVSResetStateMachine_1/CountxDP[1] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[0] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP_s[0] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP_s[1] ), 
    .FCO(\cDVSResetStateMachine_1/CountxDP_cry[1] ));
  monitorStateMachine_1_SLICE_248 \monitorStateMachine_1/SLICE_248 ( 
    .C1(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .B1(TimestampOverflowxS), 
    .A1(\monitorStateMachine_1/TimestampOverflowxDP[15] ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP[14] ), 
    .B0(TimestampOverflowxS), 
    .A0(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .FCI(\monitorStateMachine_1/TimestampOverflowxDP_cry[13] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP_s[14] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP_s[15] ));
  monitorStateMachine_1_SLICE_249 \monitorStateMachine_1/SLICE_249 ( 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP[13] ), 
    .B1(TimestampOverflowxS), 
    .A1(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP[12] ), 
    .B0(TimestampOverflowxS), 
    .A0(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .FCI(\monitorStateMachine_1/TimestampOverflowxDP_cry[11] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP_s[12] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP_s[13] ), 
    .FCO(\monitorStateMachine_1/TimestampOverflowxDP_cry[13] ));
  monitorStateMachine_1_SLICE_250 \monitorStateMachine_1/SLICE_250 ( 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP[11] ), 
    .B1(TimestampOverflowxS), 
    .A1(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP[10] ), 
    .B0(TimestampOverflowxS), 
    .A0(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .FCI(\monitorStateMachine_1/TimestampOverflowxDP_cry[9] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP_s[10] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP_s[11] ), 
    .FCO(\monitorStateMachine_1/TimestampOverflowxDP_cry[11] ));
  monitorStateMachine_1_SLICE_251 \monitorStateMachine_1/SLICE_251 ( 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP[9] ), 
    .B1(TimestampOverflowxS), 
    .A1(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP[8] ), 
    .B0(TimestampOverflowxS), 
    .A0(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .FCI(\monitorStateMachine_1/TimestampOverflowxDP_cry[7] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP_s[8] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP_s[9] ), 
    .FCO(\monitorStateMachine_1/TimestampOverflowxDP_cry[9] ));
  monitorStateMachine_1_SLICE_252 \monitorStateMachine_1/SLICE_252 ( 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP[7] ), 
    .B1(TimestampOverflowxS), 
    .A1(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP[6] ), 
    .B0(TimestampOverflowxS), 
    .A0(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .FCI(\monitorStateMachine_1/TimestampOverflowxDP_cry[5] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP_s[6] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP_s[7] ), 
    .FCO(\monitorStateMachine_1/TimestampOverflowxDP_cry[7] ));
  monitorStateMachine_1_SLICE_253 \monitorStateMachine_1/SLICE_253 ( 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP[5] ), 
    .B1(TimestampOverflowxS), 
    .A1(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP[4] ), 
    .B0(TimestampOverflowxS), 
    .A0(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .FCI(\monitorStateMachine_1/TimestampOverflowxDP_cry[3] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP_s[4] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP_s[5] ), 
    .FCO(\monitorStateMachine_1/TimestampOverflowxDP_cry[5] ));
  monitorStateMachine_1_SLICE_254 \monitorStateMachine_1/SLICE_254 ( 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP[3] ), 
    .B1(TimestampOverflowxS), 
    .A1(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP[2] ), 
    .B0(TimestampOverflowxS), 
    .A0(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .FCI(\monitorStateMachine_1/TimestampOverflowxDP_cry[1] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP_s[2] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP_s[3] ), 
    .FCO(\monitorStateMachine_1/TimestampOverflowxDP_cry[3] ));
  monitorStateMachine_1_SLICE_255 \monitorStateMachine_1/SLICE_255 ( 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP[1] ), 
    .B1(TimestampOverflowxS), 
    .A1(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP[0] ), 
    .B0(TimestampOverflowxS), 
    .A0(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ), 
    .FCI(\monitorStateMachine_1/TimestampOverflowxDP ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP_s[0] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP_s[1] ), 
    .FCO(\monitorStateMachine_1/TimestampOverflowxDP_cry[1] ));
  monitorStateMachine_1_SLICE_256 \monitorStateMachine_1/SLICE_256 ( 
    .C1(\monitorStateMachine_1/CountxDP[7] ), 
    .A1(\monitorStateMachine_1/CountxDP ), 
    .C0(\monitorStateMachine_1/CountxDP[6] ), 
    .A0(\monitorStateMachine_1/CountxDP ), .CLK(ClockxC_c), 
    .FCI(\monitorStateMachine_1/CountxDP_cry[5] ), 
    .Q0(\monitorStateMachine_1/CountxDP[6] ), 
    .Q1(\monitorStateMachine_1/CountxDP[7] ));
  monitorStateMachine_1_SLICE_257 \monitorStateMachine_1/SLICE_257 ( 
    .C1(\monitorStateMachine_1/CountxDP[5] ), 
    .A1(\monitorStateMachine_1/CountxDP ), 
    .C0(\monitorStateMachine_1/CountxDP[4] ), 
    .A0(\monitorStateMachine_1/CountxDP ), .CLK(ClockxC_c), 
    .FCI(\monitorStateMachine_1/CountxDP_cry[3] ), 
    .Q0(\monitorStateMachine_1/CountxDP[4] ), 
    .Q1(\monitorStateMachine_1/CountxDP[5] ), 
    .FCO(\monitorStateMachine_1/CountxDP_cry[5] ));
  monitorStateMachine_1_SLICE_258 \monitorStateMachine_1/SLICE_258 ( 
    .C1(\monitorStateMachine_1/CountxDP[3] ), 
    .A1(\monitorStateMachine_1/CountxDP ), 
    .C0(\monitorStateMachine_1/CountxDP[2] ), 
    .A0(\monitorStateMachine_1/CountxDP ), .CLK(ClockxC_c), 
    .FCI(\monitorStateMachine_1/CountxDP_cry[1] ), 
    .Q0(\monitorStateMachine_1/CountxDP[2] ), 
    .Q1(\monitorStateMachine_1/CountxDP[3] ), 
    .FCO(\monitorStateMachine_1/CountxDP_cry[3] ));
  monitorStateMachine_1_SLICE_259 \monitorStateMachine_1/SLICE_259 ( 
    .C1(\monitorStateMachine_1/CountxDP[1] ), 
    .A1(\monitorStateMachine_1/CountxDP ), 
    .C0(\monitorStateMachine_1/CountxDP[0] ), 
    .A0(\monitorStateMachine_1/CountxDP ), .CLK(ClockxC_c), 
    .FCI(\monitorStateMachine_1/CountxDP ), 
    .Q0(\monitorStateMachine_1/CountxDP[0] ), 
    .Q1(\monitorStateMachine_1/CountxDP[1] ), 
    .FCO(\monitorStateMachine_1/CountxDP_cry[1] ));
  uSynchronizerStateMachine_1_SLICE_260 
    \uSynchronizerStateMachine_1/SLICE_260 ( 
    .A1(\uSynchronizerStateMachine_1.CounterxDP[13] ), 
    .A0(\uSynchronizerStateMachine_1.CounterxDP[12] ), 
    .FCI(\uSynchronizerStateMachine_1/CounterxDP_cry[11] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP_s[12] ), 
    .Q1(\uSynchronizerStateMachine_1/CounterxDP_s[13] ));
  uSynchronizerStateMachine_1_SLICE_261 
    \uSynchronizerStateMachine_1/SLICE_261 ( 
    .A1(\uSynchronizerStateMachine_1.CounterxDP[11] ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP[10] ), 
    .FCI(\uSynchronizerStateMachine_1/CounterxDP_cry[9] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP_s[10] ), 
    .Q1(\uSynchronizerStateMachine_1/CounterxDP_s[11] ), 
    .FCO(\uSynchronizerStateMachine_1/CounterxDP_cry[11] ));
  uSynchronizerStateMachine_1_SLICE_262 
    \uSynchronizerStateMachine_1/SLICE_262 ( 
    .A1(\uSynchronizerStateMachine_1/CounterxDP[9] ), 
    .A0(\uSynchronizerStateMachine_1.CounterxDP[8] ), 
    .FCI(\uSynchronizerStateMachine_1/CounterxDP_cry[7] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP_s[8] ), 
    .Q1(\uSynchronizerStateMachine_1/CounterxDP_s[9] ), 
    .FCO(\uSynchronizerStateMachine_1/CounterxDP_cry[9] ));
  uSynchronizerStateMachine_1_SLICE_263 
    \uSynchronizerStateMachine_1/SLICE_263 ( 
    .A1(\uSynchronizerStateMachine_1.CounterxDP[7] ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP[6] ), 
    .FCI(\uSynchronizerStateMachine_1/CounterxDP_cry[5] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP_s[6] ), 
    .Q1(\uSynchronizerStateMachine_1/CounterxDP_s[7] ), 
    .FCO(\uSynchronizerStateMachine_1/CounterxDP_cry[7] ));
  uSynchronizerStateMachine_1_SLICE_264 
    \uSynchronizerStateMachine_1/SLICE_264 ( 
    .A1(\uSynchronizerStateMachine_1/CounterxDP[5] ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP[4] ), 
    .FCI(\uSynchronizerStateMachine_1/CounterxDP_cry[3] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP_s[4] ), 
    .Q1(\uSynchronizerStateMachine_1/CounterxDP_s[5] ), 
    .FCO(\uSynchronizerStateMachine_1/CounterxDP_cry[5] ));
  uSynchronizerStateMachine_1_SLICE_265 
    \uSynchronizerStateMachine_1/SLICE_265 ( 
    .A1(\uSynchronizerStateMachine_1/CounterxDP[3] ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP[2] ), 
    .FCI(\uSynchronizerStateMachine_1/CounterxDP_cry[1] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP_s[2] ), 
    .Q1(\uSynchronizerStateMachine_1/CounterxDP_s[3] ), 
    .FCO(\uSynchronizerStateMachine_1/CounterxDP_cry[3] ));
  uSynchronizerStateMachine_1_SLICE_266 
    \uSynchronizerStateMachine_1/SLICE_266 ( 
    .A1(\uSynchronizerStateMachine_1/CounterxDP[1] ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP[0] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP_s[0] ), 
    .Q1(\uSynchronizerStateMachine_1/CounterxDP_s[1] ), 
    .FCO(\uSynchronizerStateMachine_1/CounterxDP_cry[1] ));
  uSynchronizerStateMachine_1_SLICE_267 
    \uSynchronizerStateMachine_1/SLICE_267 ( 
    .A0(\uSynchronizerStateMachine_1/DividerxDP[6] ), 
    .FCI(\uSynchronizerStateMachine_1/DividerxDP_cry[5] ), 
    .Q0(\uSynchronizerStateMachine_1/DividerxDP_s[6] ));
  uSynchronizerStateMachine_1_SLICE_268 
    \uSynchronizerStateMachine_1/SLICE_268 ( 
    .A1(\uSynchronizerStateMachine_1/DividerxDP[5] ), 
    .A0(\uSynchronizerStateMachine_1/DividerxDP[4] ), 
    .FCI(\uSynchronizerStateMachine_1/DividerxDP_cry[3] ), 
    .Q0(\uSynchronizerStateMachine_1/DividerxDP_s[4] ), 
    .Q1(\uSynchronizerStateMachine_1/DividerxDP_s[5] ), 
    .FCO(\uSynchronizerStateMachine_1/DividerxDP_cry[5] ));
  uSynchronizerStateMachine_1_SLICE_269 
    \uSynchronizerStateMachine_1/SLICE_269 ( 
    .A1(\uSynchronizerStateMachine_1/DividerxDP[3] ), 
    .A0(\uSynchronizerStateMachine_1/DividerxDP[2] ), 
    .FCI(\uSynchronizerStateMachine_1/DividerxDP_cry[1] ), 
    .Q0(\uSynchronizerStateMachine_1/DividerxDP_s[2] ), 
    .Q1(\uSynchronizerStateMachine_1/DividerxDP_s[3] ), 
    .FCO(\uSynchronizerStateMachine_1/DividerxDP_cry[3] ));
  uSynchronizerStateMachine_1_SLICE_270 
    \uSynchronizerStateMachine_1/SLICE_270 ( 
    .A1(\uSynchronizerStateMachine_1/DividerxDP[1] ), 
    .A0(\uSynchronizerStateMachine_1/DividerxDP[0] ), 
    .Q0(\uSynchronizerStateMachine_1/DividerxDP_s[0] ), 
    .Q1(\uSynchronizerStateMachine_1/DividerxDP_s[1] ), 
    .FCO(\uSynchronizerStateMachine_1/DividerxDP_cry[1] ));
  uTimestampCounter_SLICE_271 \uTimestampCounter/SLICE_271 ( 
    .A0(\uTimestampCounter.CountxDP[14] ), 
    .FCI(\uTimestampCounter/CountxDP_cry[13] ), 
    .Q0(\uTimestampCounter/CountxDP_s[14] ));
  uTimestampCounter_SLICE_272 \uTimestampCounter/SLICE_272 ( 
    .A1(\ActualTimestampxD[13] ), .A0(\ActualTimestampxD[12] ), .CE(IncxS), 
    .LSR(ResetTimestampxSBO_i_0_o2_2_RNICSNV), .CLK(ClockxC_c), 
    .FCI(\uTimestampCounter/CountxDP_cry[11] ), .Q0(\ActualTimestampxD[12] ), 
    .Q1(\ActualTimestampxD[13] ), .FCO(\uTimestampCounter/CountxDP_cry[13] ));
  uTimestampCounter_SLICE_273 \uTimestampCounter/SLICE_273 ( 
    .A1(\ActualTimestampxD[11] ), .A0(\ActualTimestampxD[10] ), .CE(IncxS), 
    .LSR(ResetTimestampxSBO_i_0_o2_2_RNICSNV), .CLK(ClockxC_c), 
    .FCI(\uTimestampCounter/CountxDP_cry[9] ), .Q0(\ActualTimestampxD[10] ), 
    .Q1(\ActualTimestampxD[11] ), .FCO(\uTimestampCounter/CountxDP_cry[11] ));
  uTimestampCounter_SLICE_274 \uTimestampCounter/SLICE_274 ( 
    .A1(\ActualTimestampxD[9] ), .A0(\ActualTimestampxD[8] ), .CE(IncxS), 
    .LSR(ResetTimestampxSBO_i_0_o2_2_RNICSNV), .CLK(ClockxC_c), 
    .FCI(\uTimestampCounter/CountxDP_cry[7] ), .Q0(\ActualTimestampxD[8] ), 
    .Q1(\ActualTimestampxD[9] ), .FCO(\uTimestampCounter/CountxDP_cry[9] ));
  uTimestampCounter_SLICE_275 \uTimestampCounter/SLICE_275 ( 
    .A1(\ActualTimestampxD[7] ), .A0(\ActualTimestampxD[6] ), .CE(IncxS), 
    .LSR(ResetTimestampxSBO_i_0_o2_2_RNICSNV), .CLK(ClockxC_c), 
    .FCI(\uTimestampCounter/CountxDP_cry[5] ), .Q0(\ActualTimestampxD[6] ), 
    .Q1(\ActualTimestampxD[7] ), .FCO(\uTimestampCounter/CountxDP_cry[7] ));
  uTimestampCounter_SLICE_276 \uTimestampCounter/SLICE_276 ( 
    .A1(\ActualTimestampxD[5] ), .A0(\ActualTimestampxD[4] ), .CE(IncxS), 
    .LSR(ResetTimestampxSBO_i_0_o2_2_RNICSNV), .CLK(ClockxC_c), 
    .FCI(\uTimestampCounter/CountxDP_cry[3] ), .Q0(\ActualTimestampxD[4] ), 
    .Q1(\ActualTimestampxD[5] ), .FCO(\uTimestampCounter/CountxDP_cry[5] ));
  uTimestampCounter_SLICE_277 \uTimestampCounter/SLICE_277 ( 
    .A1(\ActualTimestampxD[3] ), .A0(\ActualTimestampxD[2] ), .CE(IncxS), 
    .LSR(ResetTimestampxSBO_i_0_o2_2_RNICSNV), .CLK(ClockxC_c), 
    .FCI(\uTimestampCounter/CountxDP_cry[1] ), .Q0(\ActualTimestampxD[2] ), 
    .Q1(\ActualTimestampxD[3] ), .FCO(\uTimestampCounter/CountxDP_cry[3] ));
  uTimestampCounter_SLICE_278 \uTimestampCounter/SLICE_278 ( 
    .A1(\ActualTimestampxD[1] ), .A0(\ActualTimestampxD[0] ), .CE(IncxS), 
    .LSR(ResetTimestampxSBO_i_0_o2_2_RNICSNV), .CLK(ClockxC_c), 
    .Q0(\ActualTimestampxD[0] ), .Q1(\ActualTimestampxD[1] ), 
    .FCO(\uTimestampCounter/CountxDP_cry[1] ));
  uEventCounter_SLICE_279 \uEventCounter/SLICE_279 ( 
    .A0(\uEventCounter/CountxDP[8] ), .FCI(\uEventCounter/CountxDP_cry[7] ), 
    .Q0(\uEventCounter/CountxDP_s[8] ));
  uEventCounter_SLICE_280 \uEventCounter/SLICE_280 ( 
    .A1(\uEventCounter/CountxDP[7] ), .A0(\uEventCounter/CountxDP[6] ), 
    .FCI(\uEventCounter/CountxDP_cry[5] ), .Q0(\uEventCounter/CountxDP_s[6] ), 
    .Q1(\uEventCounter/CountxDP_s[7] ), .FCO(\uEventCounter/CountxDP_cry[7] ));
  uEventCounter_SLICE_281 \uEventCounter/SLICE_281 ( 
    .A1(\uEventCounter/CountxDP[5] ), .A0(\uEventCounter/CountxDP[4] ), 
    .FCI(\uEventCounter/CountxDP_cry[3] ), .Q0(\uEventCounter/CountxDP_s[4] ), 
    .Q1(\uEventCounter/CountxDP_s[5] ), .FCO(\uEventCounter/CountxDP_cry[5] ));
  uEventCounter_SLICE_282 \uEventCounter/SLICE_282 ( 
    .A1(\uEventCounter/CountxDP[3] ), .A0(\uEventCounter/CountxDP[2] ), 
    .FCI(\uEventCounter/CountxDP_cry[1] ), .Q0(\uEventCounter/CountxDP_s[2] ), 
    .Q1(\uEventCounter/CountxDP_s[3] ), .FCO(\uEventCounter/CountxDP_cry[3] ));
  uEventCounter_SLICE_283 \uEventCounter/SLICE_283 ( 
    .A1(\uEventCounter/CountxDP[1] ), .A0(\uEventCounter/CountxDP[0] ), 
    .Q0(\uEventCounter/CountxDP_s[0] ), .Q1(\uEventCounter/CountxDP_s[1] ), 
    .FCO(\uEventCounter/CountxDP_cry[1] ));
  uEarlyPaketTimer_SLICE_284 \uEarlyPaketTimer/SLICE_284 ( 
    .A1(\uEarlyPaketTimer/CountxDP[1] ), .A0(\uEarlyPaketTimer/CountxDP[0] ), 
    .Q0(\uEarlyPaketTimer/CountxDP_s[0] ), 
    .Q1(\uEarlyPaketTimer/CountxDP_s[1] ), 
    .FCO(\uEarlyPaketTimer/CountxDP_cry[1] ));
  uEarlyPaketTimer_SLICE_285 \uEarlyPaketTimer/SLICE_285 ( 
    .A0(\uEarlyPaketTimer.CountxDP[20] ), 
    .FCI(\uEarlyPaketTimer/CountxDP_cry[19] ), 
    .Q0(\uEarlyPaketTimer/CountxDP_s[20] ));
  uEarlyPaketTimer_SLICE_286 \uEarlyPaketTimer/SLICE_286 ( 
    .A1(\uEarlyPaketTimer/CountxDP[19] ), .A0(\uEarlyPaketTimer/CountxDP[18] ), 
    .FCI(\uEarlyPaketTimer/CountxDP_cry[17] ), 
    .Q0(\uEarlyPaketTimer/CountxDP_s[18] ), 
    .Q1(\uEarlyPaketTimer/CountxDP_s[19] ), 
    .FCO(\uEarlyPaketTimer/CountxDP_cry[19] ));
  uEarlyPaketTimer_SLICE_287 \uEarlyPaketTimer/SLICE_287 ( 
    .A1(\uEarlyPaketTimer/CountxDP[17] ), .A0(\uEarlyPaketTimer/CountxDP[16] ), 
    .FCI(\uEarlyPaketTimer/CountxDP_cry[15] ), 
    .Q0(\uEarlyPaketTimer/CountxDP_s[16] ), 
    .Q1(\uEarlyPaketTimer/CountxDP_s[17] ), 
    .FCO(\uEarlyPaketTimer/CountxDP_cry[17] ));
  uEarlyPaketTimer_SLICE_288 \uEarlyPaketTimer/SLICE_288 ( 
    .A1(\uEarlyPaketTimer/CountxDP[15] ), .A0(\uEarlyPaketTimer/CountxDP[14] ), 
    .FCI(\uEarlyPaketTimer/CountxDP_cry[13] ), 
    .Q0(\uEarlyPaketTimer/CountxDP_s[14] ), 
    .Q1(\uEarlyPaketTimer/CountxDP_s[15] ), 
    .FCO(\uEarlyPaketTimer/CountxDP_cry[15] ));
  uEarlyPaketTimer_SLICE_289 \uEarlyPaketTimer/SLICE_289 ( 
    .A1(\uEarlyPaketTimer/CountxDP[13] ), .A0(\uEarlyPaketTimer/CountxDP[12] ), 
    .FCI(\uEarlyPaketTimer/CountxDP_cry[11] ), 
    .Q0(\uEarlyPaketTimer/CountxDP_s[12] ), 
    .Q1(\uEarlyPaketTimer/CountxDP_s[13] ), 
    .FCO(\uEarlyPaketTimer/CountxDP_cry[13] ));
  uEarlyPaketTimer_SLICE_290 \uEarlyPaketTimer/SLICE_290 ( 
    .A1(\uEarlyPaketTimer/CountxDP[11] ), .A0(\uEarlyPaketTimer/CountxDP[10] ), 
    .FCI(\uEarlyPaketTimer/CountxDP_cry[9] ), 
    .Q0(\uEarlyPaketTimer/CountxDP_s[10] ), 
    .Q1(\uEarlyPaketTimer/CountxDP_s[11] ), 
    .FCO(\uEarlyPaketTimer/CountxDP_cry[11] ));
  uEarlyPaketTimer_SLICE_291 \uEarlyPaketTimer/SLICE_291 ( 
    .A1(\uEarlyPaketTimer/CountxDP[9] ), .A0(\uEarlyPaketTimer/CountxDP[8] ), 
    .FCI(\uEarlyPaketTimer/CountxDP_cry[7] ), 
    .Q0(\uEarlyPaketTimer/CountxDP_s[8] ), 
    .Q1(\uEarlyPaketTimer/CountxDP_s[9] ), 
    .FCO(\uEarlyPaketTimer/CountxDP_cry[9] ));
  uEarlyPaketTimer_SLICE_292 \uEarlyPaketTimer/SLICE_292 ( 
    .A1(\uEarlyPaketTimer/CountxDP[7] ), .A0(\uEarlyPaketTimer/CountxDP[6] ), 
    .FCI(\uEarlyPaketTimer/CountxDP_cry[5] ), 
    .Q0(\uEarlyPaketTimer/CountxDP_s[6] ), 
    .Q1(\uEarlyPaketTimer/CountxDP_s[7] ), 
    .FCO(\uEarlyPaketTimer/CountxDP_cry[7] ));
  uEarlyPaketTimer_SLICE_293 \uEarlyPaketTimer/SLICE_293 ( 
    .A1(\uEarlyPaketTimer/CountxDP[5] ), .A0(\uEarlyPaketTimer/CountxDP[4] ), 
    .FCI(\uEarlyPaketTimer/CountxDP_cry[3] ), 
    .Q0(\uEarlyPaketTimer/CountxDP_s[4] ), 
    .Q1(\uEarlyPaketTimer/CountxDP_s[5] ), 
    .FCO(\uEarlyPaketTimer/CountxDP_cry[5] ));
  uEarlyPaketTimer_SLICE_294 \uEarlyPaketTimer/SLICE_294 ( 
    .A1(\uEarlyPaketTimer/CountxDP[3] ), .A0(\uEarlyPaketTimer/CountxDP[2] ), 
    .FCI(\uEarlyPaketTimer/CountxDP_cry[1] ), 
    .Q0(\uEarlyPaketTimer/CountxDP_s[2] ), 
    .Q1(\uEarlyPaketTimer/CountxDP_s[3] ), 
    .FCO(\uEarlyPaketTimer/CountxDP_cry[3] ));
  ADCStateMachine_2_SLICE_295 \ADCStateMachine_2/SLICE_295 ( 
    .M0(\ADCStateMachine_2/StateColxDP[17] ), 
    .CE(\ADCStateMachine_2/StartColxSP_RNO ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .Q0(\ADCStateMachine_2.StartColxSP ));
  ADCStateMachine_2_SLICE_296 \ADCStateMachine_2/SLICE_296 ( 
    .M0(\ADCStateMachine_2/StartRowxSN ), .CE(\ADCStateMachine_2/ClockxC ), 
    .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .Q0(\ADCStateMachine_2.StartRowxSP ));
  ADCStateMachine_2_SLICE_299 \ADCStateMachine_2/SLICE_299 ( 
    .B1(\ADCStateMachine_2/StateRowxDP[11] ), 
    .A1(\ADCStateMachine_2/CountRowxDP_s[1] ), 
    .B0(\ADCStateMachine_2/StateRowxDP[11] ), 
    .A0(\ADCStateMachine_2/CountRowxDP_s[0] ), 
    .DI1(\ADCStateMachine_2/CountRowxDP_lm[1] ), 
    .DI0(\ADCStateMachine_2/CountRowxDP_lm[0] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/CountRowxDP_lm[0] ), 
    .Q0(\ADCStateMachine_2/CountRowxDP[0] ), 
    .F1(\ADCStateMachine_2/CountRowxDP_lm[1] ), 
    .Q1(\ADCStateMachine_2/CountRowxDP[1] ));
  ADCStateMachine_2_SLICE_300 \ADCStateMachine_2/SLICE_300 ( 
    .B1(\ADCStateMachine_2/StateRowxDP[11] ), 
    .A1(\ADCStateMachine_2/CountRowxDP_s[3] ), 
    .B0(\ADCStateMachine_2/StateRowxDP[11] ), 
    .A0(\ADCStateMachine_2/CountRowxDP_s[2] ), 
    .DI1(\ADCStateMachine_2/CountRowxDP_lm[3] ), 
    .DI0(\ADCStateMachine_2/CountRowxDP_lm[2] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/CountRowxDP_lm[2] ), 
    .Q0(\ADCStateMachine_2/CountRowxDP[2] ), 
    .F1(\ADCStateMachine_2/CountRowxDP_lm[3] ), 
    .Q1(\ADCStateMachine_2/CountRowxDP[3] ));
  ADCStateMachine_2_SLICE_301 \ADCStateMachine_2/SLICE_301 ( 
    .C1(\ADCStateMachine_2/CountRowxDP[4] ), 
    .B1(\ADCStateMachine_2/CountRowxDP[3] ), 
    .A1(\ADCStateMachine_2/CountRowxDP[0] ), 
    .B0(\ADCStateMachine_2/StateRowxDP[11] ), 
    .A0(\ADCStateMachine_2/CountRowxDP_s[4] ), 
    .DI0(\ADCStateMachine_2/CountRowxDP_lm[4] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/CountRowxDP_lm[4] ), 
    .Q0(\ADCStateMachine_2/CountRowxDP[4] ), 
    .F1(\ADCStateMachine_2/un1_CountRowxDPlto4_2 ));
  ADCStateMachine_2_SLICE_302 \ADCStateMachine_2/SLICE_302 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[1] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[0] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[1] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[0] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[0] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[0] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[1] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[1] ));
  ADCStateMachine_2_SLICE_303 \ADCStateMachine_2/SLICE_303 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[3] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[2] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[3] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[2] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[2] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[2] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[3] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[3] ));
  ADCStateMachine_2_SLICE_304 \ADCStateMachine_2/SLICE_304 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[5] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[4] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[5] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[4] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[4] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[4] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[5] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[5] ));
  ADCStateMachine_2_SLICE_305 \ADCStateMachine_2/SLICE_305 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[7] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[6] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[7] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[6] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[6] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[6] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[7] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[7] ));
  ADCStateMachine_2_SLICE_306 \ADCStateMachine_2/SLICE_306 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[9] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[8] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[9] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[8] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[8] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[8] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[9] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[9] ));
  ADCStateMachine_2_SLICE_307 \ADCStateMachine_2/SLICE_307 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[11] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[10] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[11] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[10] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[10] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[10] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[11] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[11] ));
  ADCStateMachine_2_SLICE_308 \ADCStateMachine_2/SLICE_308 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[13] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[12] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[13] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[12] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[12] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[12] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[13] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[13] ));
  ADCStateMachine_2_SLICE_309 \ADCStateMachine_2/SLICE_309 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[15] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[14] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[15] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[14] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[14] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[14] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[15] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[15] ));
  ADCStateMachine_2_SLICE_310 \ADCStateMachine_2/SLICE_310 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[17] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[16] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[17] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[16] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[16] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[16] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[17] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[17] ));
  ADCStateMachine_2_SLICE_311 \ADCStateMachine_2/SLICE_311 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[19] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[18] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[19] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[18] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[18] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[18] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[19] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[19] ));
  ADCStateMachine_2_SLICE_312 \ADCStateMachine_2/SLICE_312 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[21] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[20] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[21] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[20] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[20] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[20] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[21] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[21] ));
  ADCStateMachine_2_SLICE_313 \ADCStateMachine_2/SLICE_313 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[23] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[22] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[23] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[22] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[22] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[22] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[23] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[23] ));
  ADCStateMachine_2_SLICE_314 \ADCStateMachine_2/SLICE_314 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[25] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[24] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[25] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[24] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[24] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[24] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[25] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[25] ));
  ADCStateMachine_2_SLICE_315 \ADCStateMachine_2/SLICE_315 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[27] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[26] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[27] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[26] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[26] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[26] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[27] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[27] ));
  ADCStateMachine_2_SLICE_316 \ADCStateMachine_2/SLICE_316 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[29] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[28] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[29] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[28] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[28] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[28] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[29] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[29] ));
  ADCStateMachine_2_SLICE_317 \ADCStateMachine_2/SLICE_317 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A1(\ADCStateMachine_2/DividerColxDP_s[31] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[30] ), 
    .DI1(\ADCStateMachine_2/DividerColxDP_lm[31] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[30] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[30] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[30] ), 
    .F1(\ADCStateMachine_2/DividerColxDP_lm[31] ), 
    .Q1(\ADCStateMachine_2/DividerColxDP[31] ));
  ADCStateMachine_2_SLICE_318 \ADCStateMachine_2/SLICE_318 ( 
    .D1(\ADCStateMachine_2/un1_DividerColxDP_4 ), 
    .C1(\ADCStateMachine_2/un1_DividerColxDP_2 ), 
    .B1(\ADCStateMachine_2/StateColxDP[6] ), 
    .A1(\ADCStateMachine_2/StateColxDP[2] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ), 
    .C0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ), 
    .B0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .A0(\ADCStateMachine_2/DividerColxDP_s[32] ), 
    .DI0(\ADCStateMachine_2/DividerColxDP_lm[32] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/DividerColxDP_lm[32] ), 
    .Q0(\ADCStateMachine_2/DividerColxDP[32] ), 
    .F1(\ADCStateMachine_2/un1_StateColxDP_9_2 ));
  ADCStateMachine_2_SLICE_319 \ADCStateMachine_2/SLICE_319 ( 
    .D1(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C1(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B1(\ADCStateMachine_2/DividerRowxDP_s_s1[1] ), 
    .A1(\ADCStateMachine_2/DividerRowxDP[1] ), 
    .D0(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C0(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B0(\ADCStateMachine_2/DividerRowxDP_s_s1[0] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[0] ), 
    .DI1(\ADCStateMachine_2/DividerRowxDP_lm[1] ), 
    .DI0(\ADCStateMachine_2/DividerRowxDP_lm[0] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/DividerRowxDP_lm[0] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP[0] ), 
    .F1(\ADCStateMachine_2/DividerRowxDP_lm[1] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP[1] ));
  ADCStateMachine_2_SLICE_320 \ADCStateMachine_2/SLICE_320 ( 
    .D1(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C1(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B1(\ADCStateMachine_2/DividerRowxDP_s_s1[3] ), 
    .A1(\ADCStateMachine_2/DividerRowxDP[3] ), 
    .D0(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C0(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B0(\ADCStateMachine_2/DividerRowxDP_s_s1[2] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[2] ), 
    .DI1(\ADCStateMachine_2/DividerRowxDP_lm[3] ), 
    .DI0(\ADCStateMachine_2/DividerRowxDP_lm[2] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/DividerRowxDP_lm[2] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP[2] ), 
    .F1(\ADCStateMachine_2/DividerRowxDP_lm[3] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP[3] ));
  ADCStateMachine_2_SLICE_321 \ADCStateMachine_2/SLICE_321 ( 
    .D1(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C1(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B1(\ADCStateMachine_2/DividerRowxDP_s_s1[5] ), 
    .A1(\ADCStateMachine_2/DividerRowxDP[5] ), 
    .D0(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C0(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B0(\ADCStateMachine_2/DividerRowxDP_s_s1[4] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[4] ), 
    .DI1(\ADCStateMachine_2/DividerRowxDP_lm[5] ), 
    .DI0(\ADCStateMachine_2/DividerRowxDP_lm[4] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/DividerRowxDP_lm[4] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP[4] ), 
    .F1(\ADCStateMachine_2/DividerRowxDP_lm[5] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP[5] ));
  ADCStateMachine_2_SLICE_322 \ADCStateMachine_2/SLICE_322 ( 
    .D1(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C1(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B1(\ADCStateMachine_2/DividerRowxDP_s_s1[7] ), 
    .A1(\ADCStateMachine_2/DividerRowxDP[7] ), 
    .D0(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C0(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B0(\ADCStateMachine_2/DividerRowxDP_s_s1[6] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[6] ), 
    .DI1(\ADCStateMachine_2/DividerRowxDP_lm[7] ), 
    .DI0(\ADCStateMachine_2/DividerRowxDP_lm[6] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/DividerRowxDP_lm[6] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP[6] ), 
    .F1(\ADCStateMachine_2/DividerRowxDP_lm[7] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP[7] ));
  ADCStateMachine_2_SLICE_323 \ADCStateMachine_2/SLICE_323 ( 
    .D1(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C1(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B1(\ADCStateMachine_2/DividerRowxDP_s_s1[9] ), 
    .A1(\ADCStateMachine_2/DividerRowxDP[9] ), 
    .D0(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C0(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B0(\ADCStateMachine_2/DividerRowxDP_s_s1[8] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[8] ), 
    .DI1(\ADCStateMachine_2/DividerRowxDP_lm[9] ), 
    .DI0(\ADCStateMachine_2/DividerRowxDP_lm[8] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/DividerRowxDP_lm[8] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP[8] ), 
    .F1(\ADCStateMachine_2/DividerRowxDP_lm[9] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP[9] ));
  ADCStateMachine_2_SLICE_324 \ADCStateMachine_2/SLICE_324 ( 
    .D1(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C1(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B1(\ADCStateMachine_2/DividerRowxDP_s_s1[11] ), 
    .A1(\ADCStateMachine_2/DividerRowxDP[11] ), 
    .D0(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C0(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B0(\ADCStateMachine_2/DividerRowxDP_s_s1[10] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[10] ), 
    .DI1(\ADCStateMachine_2/DividerRowxDP_lm[11] ), 
    .DI0(\ADCStateMachine_2/DividerRowxDP_lm[10] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/DividerRowxDP_lm[10] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP[10] ), 
    .F1(\ADCStateMachine_2/DividerRowxDP_lm[11] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP[11] ));
  ADCStateMachine_2_SLICE_325 \ADCStateMachine_2/SLICE_325 ( 
    .D1(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C1(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B1(\ADCStateMachine_2/DividerRowxDP_s_s1[13] ), 
    .A1(\ADCStateMachine_2/DividerRowxDP[13] ), 
    .D0(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C0(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B0(\ADCStateMachine_2/DividerRowxDP_s_s1[12] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[12] ), 
    .DI1(\ADCStateMachine_2/DividerRowxDP_lm[13] ), 
    .DI0(\ADCStateMachine_2/DividerRowxDP_lm[12] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/DividerRowxDP_lm[12] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP[12] ), 
    .F1(\ADCStateMachine_2/DividerRowxDP_lm[13] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP[13] ));
  ADCStateMachine_2_SLICE_326 \ADCStateMachine_2/SLICE_326 ( 
    .D1(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C1(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B1(\ADCStateMachine_2/DividerRowxDP_s_s1[15] ), 
    .A1(\ADCStateMachine_2/DividerRowxDP[15] ), 
    .D0(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C0(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B0(\ADCStateMachine_2/DividerRowxDP_s_s1[14] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[14] ), 
    .DI1(\ADCStateMachine_2/DividerRowxDP_lm[15] ), 
    .DI0(\ADCStateMachine_2/DividerRowxDP_lm[14] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/DividerRowxDP_lm[14] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP[14] ), 
    .F1(\ADCStateMachine_2/DividerRowxDP_lm[15] ), 
    .Q1(\ADCStateMachine_2/DividerRowxDP[15] ));
  ADCStateMachine_2_SLICE_327 \ADCStateMachine_2/SLICE_327 ( 
    .D1(\ADCStateMachine_2/un1_StateRowxDP_3_i_1 ), 
    .C1(\ADCStateMachine_2/staterowxdn22_li ), 
    .B1(\ADCStateMachine_2/StateRowxDP[7] ), 
    .A1(\ADCStateMachine_2/un1_StateRowxDP_3_i_a2 ), 
    .D0(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .C0(\ADCStateMachine_2/un1_StateRowxDP_3_i ), 
    .B0(\ADCStateMachine_2/DividerRowxDP_s_s1[16] ), 
    .A0(\ADCStateMachine_2/DividerRowxDP[16] ), 
    .DI0(\ADCStateMachine_2/DividerRowxDP_lm[16] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/DividerRowxDP_lm[16] ), 
    .Q0(\ADCStateMachine_2/DividerRowxDP[16] ), 
    .F1(\ADCStateMachine_2/un1_StateRowxDP_3_i ));
  ADCStateMachine_2_SLICE_328 \ADCStateMachine_2/SLICE_328 ( 
    .C1(\ADCStateMachine_2/un13_nobxs ), .B1(\ADCStateMachine_2/un6_nobxs ), 
    .A1(\ADCStateMachine_2/NoBxS ), .DI0(\ADCStateMachine_2/VCC\001/BUF1 ), 
    .LSR(\ADCStateMachine_2/StateColxDN_2_sqmuxa_2 ), 
    .CLK(\ADCStateMachine_2/StateColxDP[17] ), 
    .F0(\ADCStateMachine_2/VCC\001/BUF1 ), .Q0(\ADCStateMachine_2/NoBxS ), 
    .F1(\ADCStateMachine_2/un7_nobxs ));
  ADCStateMachine_2_SLICE_329 \ADCStateMachine_2/SLICE_329 ( 
    .M0(\ADCdataxD[11] ), .LSR(\ADCStateMachine_2/StateRowxDP[2] ), 
    .CLK(CDVSTestSRRowInxSO_c), .Q0(\ADCStateMachine_2/StartRowxSN ));
  ADCStateMachine_2_SLICE_330 \ADCStateMachine_2/SLICE_330 ( 
    .D1(\ADCStateMachine_2/un1_DividerColxDP ), 
    .C1(\ADCStateMachine_2/StateColxDP_cnv_0[9] ), 
    .B1(\ADCStateMachine_2/StateColxDP[13] ), 
    .A1(\ADCStateMachine_2/DividerColxDN_1_sqmuxa_2 ), 
    .B0(\ADCStateMachine_2/un1_DividerColxDP ), 
    .A0(\ADCStateMachine_2/StateColxDP[13] ), 
    .DI0(\ADCStateMachine_2/StateColxDN_0_sqmuxa_8 ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateColxDN_0_sqmuxa_8 ), 
    .Q0(\ADCStateMachine_2/StateColxDN[11] ), 
    .F1(\ADCStateMachine_2/StateColxDP_cnv_2[9] ));
  ADCStateMachine_2_SLICE_331 \ADCStateMachine_2/SLICE_331 ( 
    .D1(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9 ), 
    .C1(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_8 ), 
    .B1(\ADCStateMachine_2/StateColxDP[2] ), 
    .A1(\ADCStateMachine_2/StateColxDP[1] ), 
    .D0(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9 ), 
    .C0(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_8 ), 
    .B0(\ADCStateMachine_2/StateColxDP[1] ), 
    .A0(\ADCStateMachine_2/StateColxDP[0] ), 
    .DI1(\ADCStateMachine_2/StateColxDN[1] ), 
    .DI0(\ADCStateMachine_2/StateColxDN[0] ), .CE(\ADCStateMachine_2/ClockxC ), 
    .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateColxDN[0] ), 
    .Q0(\ADCStateMachine_2/StateColxDP[0] ), 
    .F1(\ADCStateMachine_2/StateColxDN[1] ), 
    .Q1(\ADCStateMachine_2/StateColxDP[1] ));
  ADCStateMachine_2_SLICE_332 \ADCStateMachine_2/SLICE_332 ( 
    .D1(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9 ), 
    .C1(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_8 ), 
    .B1(\ADCStateMachine_2/StateColxDP[4] ), 
    .A1(\ADCStateMachine_2/StateColxDP[3] ), 
    .D0(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9 ), 
    .C0(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_8 ), 
    .B0(\ADCStateMachine_2/StateColxDP[3] ), 
    .A0(\ADCStateMachine_2/StateColxDP[2] ), 
    .DI1(\ADCStateMachine_2/StateColxDN[3] ), 
    .DI0(\ADCStateMachine_2/StateColxDN[2] ), .CE(\ADCStateMachine_2/ClockxC ), 
    .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateColxDN[2] ), 
    .Q0(\ADCStateMachine_2/StateColxDP[2] ), 
    .F1(\ADCStateMachine_2/StateColxDN[3] ), 
    .Q1(\ADCStateMachine_2/StateColxDP[3] ));
  ADCStateMachine_2_SLICE_333 \ADCStateMachine_2/SLICE_333 ( 
    .D1(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9 ), 
    .C1(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_8 ), 
    .B1(\ADCStateMachine_2/StateColxDP[5] ), .A1(\ADCStateMachine_2/N_347 ), 
    .D0(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9_1_0 ), 
    .C0(\ADCStateMachine_2/g1_0 ), .B0(\ADCStateMachine_2/g0_1_5 ), 
    .A0(\ADCStateMachine_2/StateColxDP[4] ), 
    .DI1(\ADCStateMachine_2/StateColxDN[5] ), 
    .DI0(\ADCStateMachine_2/StateColxDN[4] ), .CE(\ADCStateMachine_2/ClockxC ), 
    .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateColxDN[4] ), 
    .Q0(\ADCStateMachine_2/StateColxDP[4] ), 
    .F1(\ADCStateMachine_2/StateColxDN[5] ), 
    .Q1(\ADCStateMachine_2/StateColxDP[5] ));
  ADCStateMachine_2_SLICE_334 \ADCStateMachine_2/SLICE_334 ( 
    .D1(\ADCStateMachine_2/un15_usecxei_cry_16_0_RNIHVDP ), 
    .C1(\ADCStateMachine_2/un6_countcolxdp_0_data_tmp[8] ), 
    .B1(\ADCStateMachine_2/un1_countcolxdp_0_data_tmp[8] ), 
    .A1(\ADCStateMachine_2/StateColxDP[8] ), .D0(\ADCStateMachine_2/g0_1_2 ), 
    .C0(\ADCStateMachine_2/g0_1 ), .B0(\ADCStateMachine_2/StateColxDP[6] ), 
    .A0(\ADCStateMachine_2/StateColxDN_2_sqmuxa_1 ), 
    .DI1(\ADCStateMachine_2/StateColxDN_3_sqmuxa ), 
    .DI0(\ADCStateMachine_2/StateColxDN[6] ), .CE(\ADCStateMachine_2/ClockxC ), 
    .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateColxDN[6] ), 
    .Q0(\ADCStateMachine_2/StateColxDP[6] ), 
    .F1(\ADCStateMachine_2/StateColxDN_3_sqmuxa ), 
    .Q1(\ADCStateMachine_2/StateColxDP[7] ));
  ADCStateMachine_2_SLICE_335 \ADCStateMachine_2/SLICE_335 ( 
    .C1(\ADCStateMachine_2/StateColxDP[17] ), 
    .B1(\ADCStateMachine_2/StateColxDP[8] ), .A1(\ADCStateMachine_2/ClockxC ), 
    .B0(\ADCStateMachine_2/StateRowxDP[1] ), 
    .A0(\ADCStateMachine_2/StateColxDP[9] ), 
    .DI0(\ADCStateMachine_2/StateColxDN_0_sqmuxa ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateColxDN_0_sqmuxa ), 
    .Q0(\ADCStateMachine_2/StateColxDP[8] ), 
    .F1(\ADCStateMachine_2/StartColxSP_cnv_0 ));
  ADCStateMachine_2_SLICE_337 \ADCStateMachine_2/SLICE_337 ( 
    .B1(\ADCStateMachine_2/StateColxDP[10] ), 
    .A1(\ADCStateMachine_2/StateColxDN[11] ), 
    .B0(\ADCStateMachine_2/StateRowxDP[1] ), 
    .A0(\ADCStateMachine_2/StateColxDP[11] ), 
    .DI0(\ADCStateMachine_2/StateColxDN_0_sqmuxa_1 ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateColxDN_0_sqmuxa_1 ), 
    .Q0(\ADCStateMachine_2/StateColxDP[10] ), .F1(\ADCStateMachine_2/G_33_0 ));
  ADCStateMachine_2_SLICE_339 \ADCStateMachine_2/SLICE_339 ( 
    .C1(\ADCStateMachine_2.p_col.op_lt.op_lt.colmodexd4 ), 
    .B1(\ADCStateMachine_2/StateColxDP[13] ), 
    .A1(\ADCStateMachine_2/StateColxDP[11] ), 
    .B0(\ADCStateMachine_2/StateColxDP[14] ), 
    .A0(\ADCStateMachine_2/StateColxDP[7] ), 
    .DI0(\ADCStateMachine_2/StateColxDN[13] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNIU9VN5 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/StateColxDN[13] ), 
    .Q0(\ADCStateMachine_2/StateColxDP[13] ), .F1(\ADCStateMachine_2/N_3 ));
  ADCStateMachine_2_SLICE_340 \ADCStateMachine_2/SLICE_340 ( 
    .D1(\ADCStateMachine_2/un15_usecxei_cry_16_0_RNIHVDP ), 
    .C1(\ADCStateMachine_2/un6_countcolxdp_0_data_tmp[8] ), 
    .B1(\ADCStateMachine_2/un1_countcolxdp_0_data_tmp[8] ), 
    .A1(\ADCStateMachine_2/StateColxDP[8] ), 
    .B0(\ADCStateMachine_2/StateColxDP[15] ), 
    .A0(\ADCStateMachine_2/StateColxDN_2_sqmuxa_2 ), 
    .DI0(\ADCStateMachine_2/un1_StateColxDP_11 ), 
    .M1(\ADCStateMachine_2/StateColxDP[16] ), .CE(\ADCStateMachine_2/ClockxC ), 
    .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/un1_StateColxDP_11 ), 
    .Q0(\ADCStateMachine_2/StateColxDP[14] ), 
    .F1(\ADCStateMachine_2/StateColxDN_2_sqmuxa_2 ), 
    .Q1(\ADCStateMachine_2/StateColxDP[15] ));
  ADCStateMachine_2_SLICE_341 \ADCStateMachine_2/SLICE_341 ( 
    .D1(\ADCStateMachine_2/StateColxDP[17] ), 
    .C1(\ADCStateMachine_2/StateColxDP[16] ), 
    .B1(\ADCStateMachine_2/StateColxDP[15] ), 
    .A1(\ADCStateMachine_2/StateColxDP[14] ), 
    .D0(\ADCStateMachine_2/StateRowxDP[11] ), .C0(\DebugxSIO_c[11] ), 
    .B0(PC0xSIO_c), .A0(\ADCStateMachine_2/StateColxDP[17] ), 
    .DI0(\ADCStateMachine_2/StateColxDN_0_sqmuxa_4 ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateColxDN_0_sqmuxa_4 ), 
    .Q0(\ADCStateMachine_2/StateColxDP[16] ), .F1(CDVSTestSRColInxSO_c));
  ADCStateMachine_2_SLICE_342 \ADCStateMachine_2/SLICE_342 ( 
    .D1(\ADCStateMachine_2/ClockxC ), .C1(\ADCStateMachine_2/StateColxDP[8] ), 
    .B1(\ADCStateMachine_2/StateColxDN_0_sqmuxa_3 ), 
    .A1(\ADCStateMachine_2/StateColxDP[17] ), .C0(\DebugxSIO_c[11] ), 
    .B0(\ADCStateMachine_2/StateColxDP[6] ), 
    .A0(\ADCStateMachine_2/StateColxDP[0] ), 
    .DI0(\ADCStateMachine_2/StateColxDP_RNO[17] ), 
    .CE(\ADCStateMachine_2/StateColxDP_RNO_0[17] ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/StateColxDP_RNO[17] ), 
    .Q0(\ADCStateMachine_2/StateColxDP[17] ), 
    .F1(\ADCStateMachine_2/StartColxSP_RNO ));
  ADCStateMachine_2_SLICE_343 \ADCStateMachine_2/SLICE_343 ( 
    .D1(\ADCStateMachine_2/un1_CountRowxDPlto4_2 ), 
    .C1(\ADCStateMachine_2/StateRowxDP[2] ), 
    .B1(\ADCStateMachine_2/CountRowxDP[2] ), 
    .A1(\ADCStateMachine_2/CountRowxDP[1] ), 
    .C0(\ADCStateMachine_2/staterowxdn16_li ), .B0(CDVSTestSRRowInxSO_c), 
    .A0(\ADCStateMachine_2/StateRowxDP[0] ), 
    .DI1(\ADCStateMachine_2/StateRowxDP_ns[10] ), 
    .DI0(\ADCStateMachine_2/StateRowxDP_ns[11] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateRowxDP_ns[11] ), 
    .Q0(\ADCStateMachine_2/StateRowxDP[0] ), 
    .F1(\ADCStateMachine_2/StateRowxDP_ns[10] ), 
    .Q1(\ADCStateMachine_2/StateRowxDP[1] ));
  ADCStateMachine_2_SLICE_344 \ADCStateMachine_2/SLICE_344 ( 
    .M1(\ADCStateMachine_2/StateRowxDP[4] ), 
    .M0(\ADCStateMachine_2.StateRowxDP[3] ), .CE(\ADCStateMachine_2/ClockxC ), 
    .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .Q0(\ADCStateMachine_2/StateRowxDP[2] ), 
    .Q1(\ADCStateMachine_2.StateRowxDP[3] ));
  ADCStateMachine_2_SLICE_345 \ADCStateMachine_2/SLICE_345 ( .C1(ADCbusyxSI_c), 
    .B1(\ADCStateMachine_2/StateRowxDP[6] ), 
    .A1(\ADCStateMachine_2/StateRowxDP[5] ), .B0(ADCbusyxSI_c), 
    .A0(\ADCStateMachine_2/StateRowxDP[5] ), .DI1(\ADCStateMachine_2/N_237_i ), 
    .DI0(\ADCStateMachine_2/StateRowxDP_ns[7] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateRowxDP_ns[7] ), 
    .Q0(\ADCStateMachine_2/StateRowxDP[4] ), .F1(\ADCStateMachine_2/N_237_i ), 
    .Q1(\ADCStateMachine_2/StateRowxDP[5] ));
  ADCStateMachine_2_SLICE_346 \ADCStateMachine_2/SLICE_346 ( 
    .D1(\ADCStateMachine_2/staterowxdn22_li ), 
    .C1(\ADCStateMachine_2/StateRowxDP[7] ), 
    .B1(\ADCStateMachine_2/un1_StateRowxDP_3_i_a2 ), 
    .A1(\ADCStateMachine_2/N_269 ), .D0(ADCbusyxSI_c), 
    .C0(\ADCStateMachine_2/staterowxdn22_li ), 
    .B0(\ADCStateMachine_2/StateRowxDP[7] ), 
    .A0(\ADCStateMachine_2/StateRowxDP[6] ), 
    .DI1(\ADCStateMachine_2/StateRowxDP_ns[4] ), 
    .DI0(\ADCStateMachine_2/StateRowxDP_ns[5] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateRowxDP_ns[5] ), 
    .Q0(\ADCStateMachine_2/StateRowxDP[6] ), 
    .F1(\ADCStateMachine_2/StateRowxDP_ns[4] ), 
    .Q1(\ADCStateMachine_2/StateRowxDP[7] ));
  ADCStateMachine_2_SLICE_347 \ADCStateMachine_2/SLICE_347 ( 
    .M0(\ADCStateMachine_2/StateRowxDP[10] ), .CE(\ADCStateMachine_2/ClockxC ), 
    .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .Q0(\ADCStateMachine_2/StateRowxDP[9] ));
  ADCStateMachine_2_SLICE_348 \ADCStateMachine_2/SLICE_348 ( 
    .D1(CDVSTestSRRowInxSO_c), .C1(\ADCStateMachine_2/StateRowxDP[10] ), 
    .B1(\ADCStateMachine_2/StateRowxDP[4] ), 
    .A1(\ADCStateMachine_2.StateRowxDP[3] ), 
    .B0(\ADCStateMachine_2/StateRowxDP[10] ), .A0(\ADCStateMachine_2/ClockxC ), 
    .DI0(\ADCStateMachine_2/StateRowxDP_0[10] ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/StateRowxDP_0[10] ), 
    .Q0(\ADCStateMachine_2/StateRowxDP[10] ), .F1(\ADCStateMachine_2/N_297 ));
  ADCStateMachine_2_SLICE_349 \ADCStateMachine_2/SLICE_349 ( 
    .B1(\ADCStateMachine_2/StateRowxDP[11] ), .A1(\ADCStateMachine_2/N_269 ), 
    .D0(\ADCStateMachine_2/un11_doreadxs ), 
    .C0(\ADCStateMachine_2/StateRowxDP[11] ), .B0(\ADCStateMachine_2/N_297 ), 
    .A0(\ADCStateMachine_2/N_266_1 ), 
    .DI0(\ADCStateMachine_2/StateRowxDP_ns[0] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateRowxDP_ns[0] ), 
    .Q0(\ADCStateMachine_2/StateRowxDP[11] ), 
    .F1(\ADCStateMachine_2/CountRowxDP ));
  ADCStateMachine_2_SLICE_350 \ADCStateMachine_2/SLICE_350 ( 
    .C1(\ADCdataxD[11] ), 
    .B1(\ADCStateMachine_2.p_col.op_lt.op_lt.colmodexd4 ), 
    .A1(\ADCStateMachine_2.StateRowxDP[3] ), 
    .DI0(\ADCStateMachine_2/VCC\000/BUF1 ), 
    .LSR(\ADCStateMachine_2/StateColxDP[11] ), 
    .CLK(\ADCStateMachine_2/StateColxDP[9] ), 
    .F0(\ADCStateMachine_2/VCC\000/BUF1 ), .Q0(\ADCdataxD[11] ), 
    .F1(\ADCStateMachine_2/RegisterWritexEO_i_0 ));
  uADCRegister_SLICE_351 \uADCRegister/SLICE_351 ( .M1(\ADCwordxDIO_in[2] ), 
    .M0(\ADCwordxDIO_in[1] ), .CE(\ADCStateMachine_2.N_321_i ), 
    .CLK(IfClockxCI_c), .Q0(\ADCregOutxD[0] ), .Q1(\ADCregOutxD[1] ));
  uADCRegister_SLICE_352 \uADCRegister/SLICE_352 ( .M1(\ADCwordxDIO_in[4] ), 
    .M0(\ADCwordxDIO_in[3] ), .CE(\ADCStateMachine_2.N_321_i ), 
    .CLK(IfClockxCI_c), .Q0(\ADCregOutxD[2] ), .Q1(\ADCregOutxD[3] ));
  uADCRegister_SLICE_353 \uADCRegister/SLICE_353 ( .M1(\ADCwordxDIO_in[6] ), 
    .M0(\ADCwordxDIO_in[5] ), .CE(\ADCStateMachine_2.N_321_i ), 
    .CLK(IfClockxCI_c), .Q0(\ADCregOutxD[4] ), .Q1(\ADCregOutxD[5] ));
  uADCRegister_SLICE_354 \uADCRegister/SLICE_354 ( .M1(\ADCwordxDIO_in[8] ), 
    .M0(\ADCwordxDIO_in[7] ), .CE(\ADCStateMachine_2.N_321_i ), 
    .CLK(IfClockxCI_c), .Q0(\ADCregOutxD[6] ), .Q1(\ADCregOutxD[7] ));
  uADCRegister_SLICE_355 \uADCRegister/SLICE_355 ( .M1(\ADCwordxDIO_in[10] ), 
    .M0(\ADCwordxDIO_in[9] ), .CE(\ADCStateMachine_2.N_321_i ), 
    .CLK(IfClockxCI_c), .Q0(\ADCregOutxD[8] ), .Q1(\ADCregOutxD[9] ));
  uADCRegister_SLICE_356 \uADCRegister/SLICE_356 ( .M1(\ADCdataxD[11] ), 
    .M0(\ADCwordxDIO_in[11] ), .CE(\ADCStateMachine_2.N_321_i ), 
    .CLK(IfClockxCI_c), .Q0(\ADCregOutxD[10] ), .Q1(\ADCregOutxD[11] ));
  uADCRegister_SLICE_357 \uADCRegister/SLICE_357 ( .D1(\ADCregOutxD[13] ), 
    .C1(\ADCdataxD[11] ), 
    .B1(\ADCStateMachine_2.p_col.op_lt.op_lt.colmodexd4 ), 
    .A1(\ADCStateMachine_2.StateRowxDP[3] ), 
    .D0(\uADCRegister/StatexDP_en[12] ), .C0(\ADCregOutxD[12] ), 
    .B0(\ADCStateMachine_2.StartRowxSP ), .A0(\ADCStateMachine_2.StartColxSP ), 
    .DI1(\uADCRegister/StatexDP_ldmx[13] ), 
    .DI0(\uADCRegister/StatexDP_ldmx[12] ), .CE(\ADCStateMachine_2.N_323_i ), 
    .CLK(IfClockxCI_c), .F0(\uADCRegister/StatexDP_ldmx[12] ), 
    .Q0(\ADCregOutxD[12] ), .F1(\uADCRegister/StatexDP_ldmx[13] ), 
    .Q1(\ADCregOutxD[13] ));
  SLICE_358 SLICE_358( .D1(\monitorStateMachine_1/N_112 ), .C1(AERREQxSB), 
    .B1(\AERMonitorAddressxDI_c[8] ), .A1(ADCvalueReadyxS), 
    .D0(ReadADCvaluexE), .C0(ADCvalueReadyxS), 
    .B0(\ADCvalueReady_1/StatexDP[1] ), .A0(RegisterWritexEO_i), 
    .DI0(\ADCvalueReady_1/StatexDP_ns[1] ), .CLK(ClockxC_c), 
    .F0(\ADCvalueReady_1/StatexDP_ns[1] ), .Q0(\ADCvalueReady_1/StatexDP[1] ), 
    .F1(\monitorStateMachine_1/StatexDP_ns_0_a2_1[1] ));
  SLICE_359 SLICE_359( .D1(\ADCdataxD[11] ), 
    .C1(\ADCStateMachine_2/un23_nobxs ), .B1(\ADCStateMachine_2/un7_nobxs ), 
    .A1(\ADCStateMachine_2/RegisterWritexEO_i_0 ), .D0(ReadADCvaluexE), 
    .C0(ADCvalueReadyxS), .B0(\ADCvalueReady_1/StatexDP[1] ), 
    .A0(RegisterWritexEO_i), .DI0(\ADCvalueReady_1/StatexDP_ns[0] ), 
    .CLK(ClockxC_c), .F0(\ADCvalueReady_1/StatexDP_ns[0] ), 
    .Q0(ADCvalueReadyxS), .F1(RegisterWritexEO_i));
  ADCStateMachine_2_SLICE_360 \ADCStateMachine_2/SLICE_360 ( 
    .D1(\ADCStateMachine_2/un1_statecolxdn9_1 ), 
    .C1(\ADCStateMachine_2/StateColxDP[17] ), 
    .B1(\ADCStateMachine_2/StateColxDN_2_sqmuxa_1 ), 
    .A1(\ADCStateMachine_2/ClockxC ), .B0(ADCwritexEBO_c), 
    .A0(\ADCStateMachine_2/ClockxC ), .DI0(\ADCStateMachine_2/N_3282_0 ), 
    .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/N_3282_0 ), 
    .Q0(ADCwritexEBO_c), .F1(\ADCStateMachine_2/StateColxDP_cnv_1[17] ));
  SLICE_362 SLICE_362( .M1(AERReqSyncxSBN), .M0(AERMonitorREQxABI_c), 
    .CLK(ClockxC_c), .Q0(AERReqSyncxSBN), .Q1(AERREQxSB));
  ADCStateMachine_2_SLICE_363 \ADCStateMachine_2/SLICE_363 ( 
    .D1(\ADCStateMachine_2/StateColxDP[16] ), 
    .C1(\ADCStateMachine_2/StateColxDP[15] ), 
    .B1(\ADCStateMachine_2/StateColxDP[14] ), 
    .A1(\ADCStateMachine_2/StateColxDP[7] ), 
    .C0(\ADCStateMachine_2/StateColxDP[7] ), 
    .B0(\ADCStateMachine_2/StateColxDP[14] ), 
    .A0(\ADCStateMachine_2/StateColxDP[16] ), 
    .DI0(\ADCStateMachine_2/N_355_i ), .CE(\ADCStateMachine_2/ClockxC ), 
    .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), .F0(\ADCStateMachine_2/N_355_i ), 
    .Q0(CDVSTestSRColClockxSO_c), .F1(\ADCStateMachine_2/G_33_3 ));
  ADCStateMachine_2_SLICE_364 \ADCStateMachine_2/SLICE_364 ( 
    .D1(\ADCStateMachine_2/un1_CountRowxDPlto4_2 ), 
    .C1(\ADCStateMachine_2/StateRowxDP[2] ), 
    .B1(\ADCStateMachine_2/CountRowxDP[2] ), 
    .A1(\ADCStateMachine_2/CountRowxDP[1] ), .B0(CDVSTestSRRowInxSO_c), 
    .A0(\ADCStateMachine_2/StateRowxDP[2] ), .DI0(\ADCStateMachine_2/N_359_i ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/N_359_i ), .Q0(CDVSTestSRRowClockxSO_c), 
    .F1(\ADCStateMachine_2/N_269 ));
  ADCStateMachine_2_SLICE_365 \ADCStateMachine_2/SLICE_365 ( 
    .C1(\ADCStateMachine_2/StateColxDP[9] ), 
    .B1(\ADCStateMachine_2/StateColxDP[11] ), 
    .A1(\ADCStateMachine_2/StateRowxDP[1] ), 
    .D0(\ADCStateMachine_2/StateRowxDP[9] ), .C0(\ADCStateMachine_2/N_297 ), 
    .B0(\ADCStateMachine_2/N_266_1 ), 
    .A0(\ADCStateMachine_2/DividerColxDN_1_sqmuxa ), 
    .DI0(\ADCStateMachine_2/StateRowxDP_ns[3] ), 
    .CE(\ADCStateMachine_2/ClockxC ), .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/StateRowxDP_ns[3] ), .Q0(CDVSTestSRRowInxSO_c), 
    .F1(\ADCStateMachine_2/DividerColxDN_1_sqmuxa ));
  shiftRegister_1_SLICE_366 \shiftRegister_1/SLICE_366 ( 
    .M1(\shiftRegister_1/StatexD[97] ), .M0(\shiftRegister_1/StatexD[96] ), 
    .CLK(PC2xSIO_c), .Q0(\DebugxSIO_c[0] ), .Q1(\DebugxSIO_c[1] ));
  shiftRegister_1_SLICE_367 \shiftRegister_1/SLICE_367 ( 
    .M1(\shiftRegister_1/StatexD[99] ), .M0(\shiftRegister_1/StatexD[98] ), 
    .CLK(PC2xSIO_c), .Q0(\DebugxSIO_c[2] ), .Q1(\DebugxSIO_c[3] ));
  shiftRegister_1_SLICE_368 \shiftRegister_1/SLICE_368 ( 
    .M1(\shiftRegister_1/StatexD[101] ), .M0(\shiftRegister_1/StatexD[100] ), 
    .CLK(PC2xSIO_c), .Q0(\DebugxSIO_c[4] ), .Q1(\DebugxSIO_c[5] ));
  shiftRegister_1_SLICE_369 \shiftRegister_1/SLICE_369 ( 
    .M1(\shiftRegister_1/StatexD[103] ), .M0(\shiftRegister_1/StatexD[102] ), 
    .CLK(PC2xSIO_c), .Q0(\DebugxSIO_c[6] ), .Q1(\DebugxSIO_c[7] ));
  fifoStatemachine_1_SLICE_371 \fifoStatemachine_1/SLICE_371 ( 
    .C1(\uEarlyPaketTimer.CountxDPe ), .B1(\fifoStatemachine_1/N_10_mux ), 
    .A1(FifoEmptyxS), .D0(\fifoStatemachine_1/N_11_mux ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), .A0(FifoEmptyxS), 
    .DI0(\fifoStatemachine_1/StatexDP_ns[1] ), .CLK(IfClockxCI_c), 
    .F0(\fifoStatemachine_1/StatexDP_ns[1] ), .Q0(FifoReadxE), 
    .F1(\fifoStatemachine_1/N_11_mux ));
  uMonitorTimestampRegister_SLICE_372 \uMonitorTimestampRegister/SLICE_372 ( 
    .M1(\ActualTimestampxD[1] ), .M0(\ActualTimestampxD[0] ), 
    .CE(\monitorStateMachine_1.N_256_i ), .CLK(ClockxC_c), 
    .Q0(\MonitorTimestampxD[0] ), .Q1(\MonitorTimestampxD[1] ));
  uMonitorTimestampRegister_SLICE_373 \uMonitorTimestampRegister/SLICE_373 ( 
    .M1(\ActualTimestampxD[3] ), .M0(\ActualTimestampxD[2] ), 
    .CE(\monitorStateMachine_1.N_256_i ), .CLK(ClockxC_c), 
    .Q0(\MonitorTimestampxD[2] ), .Q1(\MonitorTimestampxD[3] ));
  uMonitorTimestampRegister_SLICE_374 \uMonitorTimestampRegister/SLICE_374 ( 
    .M1(\ActualTimestampxD[5] ), .M0(\ActualTimestampxD[4] ), 
    .CE(\monitorStateMachine_1.N_256_i ), .CLK(ClockxC_c), 
    .Q0(\MonitorTimestampxD[4] ), .Q1(\MonitorTimestampxD[5] ));
  uMonitorTimestampRegister_SLICE_375 \uMonitorTimestampRegister/SLICE_375 ( 
    .M1(\ActualTimestampxD[7] ), .M0(\ActualTimestampxD[6] ), 
    .CE(\monitorStateMachine_1.N_256_i ), .CLK(ClockxC_c), 
    .Q0(\MonitorTimestampxD[6] ), .Q1(\MonitorTimestampxD[7] ));
  uMonitorTimestampRegister_SLICE_376 \uMonitorTimestampRegister/SLICE_376 ( 
    .M1(\ActualTimestampxD[9] ), .M0(\ActualTimestampxD[8] ), 
    .CE(\monitorStateMachine_1.N_256_i ), .CLK(ClockxC_c), 
    .Q0(\MonitorTimestampxD[8] ), .Q1(\MonitorTimestampxD[9] ));
  uMonitorTimestampRegister_SLICE_377 \uMonitorTimestampRegister/SLICE_377 ( 
    .M1(\ActualTimestampxD[11] ), .M0(\ActualTimestampxD[10] ), 
    .CE(\monitorStateMachine_1.N_256_i ), .CLK(ClockxC_c), 
    .Q0(\MonitorTimestampxD[10] ), .Q1(\MonitorTimestampxD[11] ));
  uMonitorTimestampRegister_SLICE_378 \uMonitorTimestampRegister/SLICE_378 ( 
    .M1(\ActualTimestampxD[13] ), .M0(\ActualTimestampxD[12] ), 
    .CE(\monitorStateMachine_1.N_256_i ), .CLK(ClockxC_c), 
    .Q0(\MonitorTimestampxD[12] ), .Q1(\MonitorTimestampxD[13] ));
  shiftRegister_1_SLICE_380 \shiftRegister_1/SLICE_380 ( 
    .M1(\shiftRegister_1/StatexD[17] ), .M0(\shiftRegister_1/StatexD[16] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[16] ), .Q1(\SRDataOutxD[17] ));
  shiftRegister_1_SLICE_381 \shiftRegister_1/SLICE_381 ( 
    .M1(\shiftRegister_1/StatexD[19] ), .M0(\shiftRegister_1/StatexD[18] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[18] ), .Q1(\SRDataOutxD[19] ));
  shiftRegister_1_SLICE_382 \shiftRegister_1/SLICE_382 ( 
    .M1(\shiftRegister_1/StatexD[21] ), .M0(\shiftRegister_1/StatexD[20] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[20] ), .Q1(\SRDataOutxD[21] ));
  shiftRegister_1_SLICE_383 \shiftRegister_1/SLICE_383 ( 
    .M1(\shiftRegister_1/StatexD[23] ), .M0(\shiftRegister_1/StatexD[22] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[22] ), .Q1(\SRDataOutxD[23] ));
  shiftRegister_1_SLICE_384 \shiftRegister_1/SLICE_384 ( 
    .M1(\shiftRegister_1/StatexD[25] ), .M0(\shiftRegister_1/StatexD[24] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[24] ), .Q1(\SRDataOutxD[25] ));
  shiftRegister_1_SLICE_385 \shiftRegister_1/SLICE_385 ( 
    .M1(\shiftRegister_1/StatexD[27] ), .M0(\shiftRegister_1/StatexD[26] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[26] ), .Q1(\SRDataOutxD[27] ));
  shiftRegister_1_SLICE_386 \shiftRegister_1/SLICE_386 ( 
    .M1(\shiftRegister_1/StatexD[29] ), .M0(\shiftRegister_1/StatexD[28] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[28] ), .Q1(\SRDataOutxD[29] ));
  shiftRegister_1_SLICE_387 \shiftRegister_1/SLICE_387 ( 
    .M1(\shiftRegister_1/StatexD[31] ), .M0(\shiftRegister_1/StatexD[30] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[30] ), .Q1(\SRDataOutxD[31] ));
  shiftRegister_1_SLICE_388 \shiftRegister_1/SLICE_388 ( 
    .M1(\shiftRegister_1/StatexD[33] ), .M0(\shiftRegister_1/StatexD[32] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[32] ), .Q1(\SRDataOutxD[33] ));
  shiftRegister_1_SLICE_389 \shiftRegister_1/SLICE_389 ( 
    .M1(\shiftRegister_1/StatexD[35] ), .M0(\shiftRegister_1/StatexD[34] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[34] ), .Q1(\SRDataOutxD[35] ));
  shiftRegister_1_SLICE_390 \shiftRegister_1/SLICE_390 ( 
    .M1(\shiftRegister_1/StatexD[37] ), .M0(\shiftRegister_1/StatexD[36] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[36] ), .Q1(\SRDataOutxD[37] ));
  shiftRegister_1_SLICE_391 \shiftRegister_1/SLICE_391 ( 
    .M1(\shiftRegister_1/StatexD[39] ), .M0(\shiftRegister_1/StatexD[38] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[38] ), .Q1(\SRDataOutxD[39] ));
  shiftRegister_1_SLICE_392 \shiftRegister_1/SLICE_392 ( 
    .M1(\shiftRegister_1/StatexD[41] ), .M0(\shiftRegister_1/StatexD[40] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[40] ), .Q1(\SRDataOutxD[41] ));
  shiftRegister_1_SLICE_393 \shiftRegister_1/SLICE_393 ( 
    .M1(\shiftRegister_1/StatexD[43] ), .M0(\shiftRegister_1/StatexD[42] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[42] ), .Q1(\SRDataOutxD[43] ));
  shiftRegister_1_SLICE_394 \shiftRegister_1/SLICE_394 ( 
    .M1(\shiftRegister_1/StatexD[45] ), .M0(\shiftRegister_1/StatexD[44] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[44] ), .Q1(\SRDataOutxD[45] ));
  shiftRegister_1_SLICE_395 \shiftRegister_1/SLICE_395 ( 
    .M1(\shiftRegister_1/StatexD[47] ), .M0(\shiftRegister_1/StatexD[46] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[46] ), .Q1(\SRDataOutxD[47] ));
  shiftRegister_1_SLICE_396 \shiftRegister_1/SLICE_396 ( 
    .M1(\shiftRegister_1/StatexD[49] ), .M0(\shiftRegister_1/StatexD[48] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[48] ), .Q1(\SRDataOutxD[49] ));
  shiftRegister_1_SLICE_397 \shiftRegister_1/SLICE_397 ( 
    .M1(\shiftRegister_1/StatexD[51] ), .M0(\shiftRegister_1/StatexD[50] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[50] ), .Q1(\SRDataOutxD[51] ));
  shiftRegister_1_SLICE_398 \shiftRegister_1/SLICE_398 ( 
    .M1(\shiftRegister_1/StatexD[53] ), .M0(\shiftRegister_1/StatexD[52] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[52] ), .Q1(\SRDataOutxD[53] ));
  shiftRegister_1_SLICE_399 \shiftRegister_1/SLICE_399 ( 
    .M1(\shiftRegister_1/StatexD[55] ), .M0(\shiftRegister_1/StatexD[54] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[54] ), .Q1(\SRDataOutxD[55] ));
  shiftRegister_1_SLICE_400 \shiftRegister_1/SLICE_400 ( 
    .M1(\shiftRegister_1/StatexD[57] ), .M0(\shiftRegister_1/StatexD[56] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[56] ), .Q1(\SRDataOutxD[57] ));
  shiftRegister_1_SLICE_401 \shiftRegister_1/SLICE_401 ( 
    .M1(\shiftRegister_1/StatexD[59] ), .M0(\shiftRegister_1/StatexD[58] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[58] ), .Q1(\SRDataOutxD[59] ));
  shiftRegister_1_SLICE_402 \shiftRegister_1/SLICE_402 ( 
    .M1(\shiftRegister_1/StatexD[61] ), .M0(\shiftRegister_1/StatexD[60] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[60] ), .Q1(\SRDataOutxD[61] ));
  shiftRegister_1_SLICE_403 \shiftRegister_1/SLICE_403 ( 
    .M1(\shiftRegister_1/StatexD[63] ), .M0(\shiftRegister_1/StatexD[62] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[62] ), .Q1(\SRDataOutxD[63] ));
  shiftRegister_1_SLICE_404 \shiftRegister_1/SLICE_404 ( 
    .M1(\shiftRegister_1/StatexD[65] ), .M0(\shiftRegister_1/StatexD[64] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[64] ), .Q1(\SRDataOutxD[65] ));
  shiftRegister_1_SLICE_405 \shiftRegister_1/SLICE_405 ( 
    .M1(\shiftRegister_1/StatexD[67] ), .M0(\shiftRegister_1/StatexD[66] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[66] ), .Q1(\SRDataOutxD[67] ));
  shiftRegister_1_SLICE_406 \shiftRegister_1/SLICE_406 ( 
    .M1(\shiftRegister_1/StatexD[69] ), .M0(\shiftRegister_1/StatexD[68] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[68] ), .Q1(\SRDataOutxD[69] ));
  shiftRegister_1_SLICE_407 \shiftRegister_1/SLICE_407 ( 
    .M1(\shiftRegister_1/StatexD[71] ), .M0(\shiftRegister_1/StatexD[70] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[70] ), .Q1(\SRDataOutxD[71] ));
  shiftRegister_1_SLICE_408 \shiftRegister_1/SLICE_408 ( 
    .M1(\shiftRegister_1/StatexD[73] ), .M0(\shiftRegister_1/StatexD[72] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[72] ), .Q1(\SRDataOutxD[73] ));
  shiftRegister_1_SLICE_409 \shiftRegister_1/SLICE_409 ( 
    .M1(\shiftRegister_1/StatexD[75] ), .M0(\shiftRegister_1/StatexD[74] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[74] ), .Q1(\SRDataOutxD[75] ));
  shiftRegister_1_SLICE_410 \shiftRegister_1/SLICE_410 ( 
    .M1(\shiftRegister_1/StatexD[77] ), .M0(\shiftRegister_1/StatexD[76] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[76] ), .Q1(\SRDataOutxD[77] ));
  shiftRegister_1_SLICE_411 \shiftRegister_1/SLICE_411 ( 
    .M1(\shiftRegister_1/StatexD[79] ), .M0(\shiftRegister_1/StatexD[78] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[78] ), .Q1(\SRDataOutxD[79] ));
  shiftRegister_1_SLICE_412 \shiftRegister_1/SLICE_412 ( 
    .M1(\shiftRegister_1/StatexD[81] ), .M0(\shiftRegister_1/StatexD[80] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[80] ), .Q1(\SRDataOutxD[81] ));
  shiftRegister_1_SLICE_413 \shiftRegister_1/SLICE_413 ( 
    .M1(\shiftRegister_1/StatexD[83] ), .M0(\shiftRegister_1/StatexD[82] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[82] ), .Q1(\SRDataOutxD[83] ));
  shiftRegister_1_SLICE_414 \shiftRegister_1/SLICE_414 ( 
    .M1(\shiftRegister_1/StatexD[85] ), .M0(\shiftRegister_1/StatexD[84] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[84] ), .Q1(\SRDataOutxD[85] ));
  shiftRegister_1_SLICE_415 \shiftRegister_1/SLICE_415 ( 
    .M1(\shiftRegister_1/StatexD[87] ), .M0(\shiftRegister_1/StatexD[86] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[86] ), .Q1(\SRDataOutxD[87] ));
  shiftRegister_1_SLICE_416 \shiftRegister_1/SLICE_416 ( 
    .M1(\shiftRegister_1/StatexD[89] ), .M0(\shiftRegister_1/StatexD[88] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[88] ), .Q1(\SRDataOutxD[89] ));
  shiftRegister_1_SLICE_417 \shiftRegister_1/SLICE_417 ( 
    .M1(\shiftRegister_1/StatexD[91] ), .M0(\shiftRegister_1/StatexD[90] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[90] ), .Q1(\SRDataOutxD[91] ));
  shiftRegister_1_SLICE_418 \shiftRegister_1/SLICE_418 ( 
    .M1(\shiftRegister_1/StatexD[93] ), .M0(\shiftRegister_1/StatexD[92] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[92] ), .Q1(\SRDataOutxD[93] ));
  shiftRegister_1_SLICE_419 \shiftRegister_1/SLICE_419 ( 
    .M1(\shiftRegister_1/StatexD[95] ), .M0(\shiftRegister_1/StatexD[94] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[94] ), .Q1(\SRDataOutxD[95] ));
  shiftRegister_1_SLICE_420 \shiftRegister_1/SLICE_420 ( 
    .M1(\shiftRegister_1/StatexD[105] ), .M0(\shiftRegister_1/StatexD[104] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[104] ), .Q1(\SRDataOutxD[105] ));
  shiftRegister_1_SLICE_421 \shiftRegister_1/SLICE_421 ( 
    .M1(\shiftRegister_1/StatexD[107] ), .M0(\shiftRegister_1/StatexD[106] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[106] ), .Q1(\SRDataOutxD[107] ));
  shiftRegister_1_SLICE_422 \shiftRegister_1/SLICE_422 ( 
    .M1(\shiftRegister_1/StatexD[109] ), .M0(\shiftRegister_1/StatexD[108] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[108] ), .Q1(\SRDataOutxD[109] ));
  shiftRegister_1_SLICE_423 \shiftRegister_1/SLICE_423 ( 
    .M1(\shiftRegister_1/StatexD[111] ), .M0(\shiftRegister_1/StatexD[110] ), 
    .CLK(PC2xSIO_c), .Q0(\SRDataOutxD[110] ), .Q1(\SRDataOutxD[111] ));
  cDVSResetStateMachine_1_SLICE_425 \cDVSResetStateMachine_1/SLICE_425 ( 
    .D1(\cDVSResetStateMachine_1/StatexDP_ns_0_1_0[1] ), 
    .C1(\cDVSResetStateMachine_1/N_142 ), .B1(\cDVSResetStateMachine_1/N_135 ), 
    .A1(\cDVSResetStateMachine_1/N_134 ), 
    .B0(\cDVSResetStateMachine_1.StatexDP[1] ), .A0(AERREQxSB), 
    .DI1(\cDVSResetStateMachine_1/StatexDP_ns[1] ), 
    .DI0(\cDVSResetStateMachine_1/StatexDP_ns[0] ), .CLK(ClockxC_c), 
    .F0(\cDVSResetStateMachine_1/StatexDP_ns[0] ), 
    .Q0(\cDVSResetStateMachine_1.StatexDP[0] ), 
    .F1(\cDVSResetStateMachine_1/StatexDP_ns[1] ), 
    .Q1(\cDVSResetStateMachine_1.StatexDP[1] ));
  cDVSResetStateMachine_1_SLICE_426 \cDVSResetStateMachine_1/SLICE_426 ( 
    .D1(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C1(\cDVSResetStateMachine_1/N_134 ), 
    .B1(\cDVSResetStateMachine_1/CountxDP_s[1] ), 
    .A1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .D0(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C0(\cDVSResetStateMachine_1/N_134 ), 
    .B0(\cDVSResetStateMachine_1/CountxDP_s[0] ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .DI1(\cDVSResetStateMachine_1/CountxDP_lm[1] ), 
    .DI0(\cDVSResetStateMachine_1/CountxDP_lm[0] ), .CLK(ClockxC_c), 
    .F0(\cDVSResetStateMachine_1/CountxDP_lm[0] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP[0] ), 
    .F1(\cDVSResetStateMachine_1/CountxDP_lm[1] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP[1] ));
  cDVSResetStateMachine_1_SLICE_427 \cDVSResetStateMachine_1/SLICE_427 ( 
    .D1(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C1(\cDVSResetStateMachine_1/N_134 ), 
    .B1(\cDVSResetStateMachine_1/CountxDP_s[3] ), 
    .A1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .D0(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C0(\cDVSResetStateMachine_1/N_134 ), 
    .B0(\cDVSResetStateMachine_1/CountxDP_s[2] ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .DI1(\cDVSResetStateMachine_1/CountxDP_lm[3] ), 
    .DI0(\cDVSResetStateMachine_1/CountxDP_lm[2] ), .CLK(ClockxC_c), 
    .F0(\cDVSResetStateMachine_1/CountxDP_lm[2] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP[2] ), 
    .F1(\cDVSResetStateMachine_1/CountxDP_lm[3] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP[3] ));
  cDVSResetStateMachine_1_SLICE_428 \cDVSResetStateMachine_1/SLICE_428 ( 
    .D1(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C1(\cDVSResetStateMachine_1/N_134 ), 
    .B1(\cDVSResetStateMachine_1/CountxDP_s[5] ), 
    .A1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .D0(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C0(\cDVSResetStateMachine_1/N_134 ), 
    .B0(\cDVSResetStateMachine_1/CountxDP_s[4] ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .DI1(\cDVSResetStateMachine_1/CountxDP_lm[5] ), 
    .DI0(\cDVSResetStateMachine_1/CountxDP_lm[4] ), .CLK(ClockxC_c), 
    .F0(\cDVSResetStateMachine_1/CountxDP_lm[4] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP[4] ), 
    .F1(\cDVSResetStateMachine_1/CountxDP_lm[5] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP[5] ));
  cDVSResetStateMachine_1_SLICE_429 \cDVSResetStateMachine_1/SLICE_429 ( 
    .D1(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C1(\cDVSResetStateMachine_1/N_134 ), 
    .B1(\cDVSResetStateMachine_1/CountxDP_s[7] ), 
    .A1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .D0(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C0(\cDVSResetStateMachine_1/N_134 ), 
    .B0(\cDVSResetStateMachine_1/CountxDP_s[6] ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .DI1(\cDVSResetStateMachine_1/CountxDP_lm[7] ), 
    .DI0(\cDVSResetStateMachine_1/CountxDP_lm[6] ), .CLK(ClockxC_c), 
    .F0(\cDVSResetStateMachine_1/CountxDP_lm[6] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP[6] ), 
    .F1(\cDVSResetStateMachine_1/CountxDP_lm[7] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP[7] ));
  cDVSResetStateMachine_1_SLICE_430 \cDVSResetStateMachine_1/SLICE_430 ( 
    .D1(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C1(\cDVSResetStateMachine_1/N_134 ), 
    .B1(\cDVSResetStateMachine_1/CountxDP_s[9] ), 
    .A1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .D0(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C0(\cDVSResetStateMachine_1/N_134 ), 
    .B0(\cDVSResetStateMachine_1/CountxDP_s[8] ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .DI1(\cDVSResetStateMachine_1/CountxDP_lm[9] ), 
    .DI0(\cDVSResetStateMachine_1/CountxDP_lm[8] ), .CLK(ClockxC_c), 
    .F0(\cDVSResetStateMachine_1/CountxDP_lm[8] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP[8] ), 
    .F1(\cDVSResetStateMachine_1/CountxDP_lm[9] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP[9] ));
  cDVSResetStateMachine_1_SLICE_431 \cDVSResetStateMachine_1/SLICE_431 ( 
    .D1(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C1(\cDVSResetStateMachine_1/N_134 ), 
    .B1(\cDVSResetStateMachine_1/CountxDP_s[11] ), 
    .A1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .D0(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C0(\cDVSResetStateMachine_1/N_134 ), 
    .B0(\cDVSResetStateMachine_1/CountxDP_s[10] ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .DI1(\cDVSResetStateMachine_1/CountxDP_lm[11] ), 
    .DI0(\cDVSResetStateMachine_1/CountxDP_lm[10] ), .CLK(ClockxC_c), 
    .F0(\cDVSResetStateMachine_1/CountxDP_lm[10] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP[10] ), 
    .F1(\cDVSResetStateMachine_1/CountxDP_lm[11] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP[11] ));
  cDVSResetStateMachine_1_SLICE_432 \cDVSResetStateMachine_1/SLICE_432 ( 
    .D1(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C1(\cDVSResetStateMachine_1/N_134 ), 
    .B1(\cDVSResetStateMachine_1/CountxDP_s[13] ), 
    .A1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .D0(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C0(\cDVSResetStateMachine_1/N_134 ), 
    .B0(\cDVSResetStateMachine_1/CountxDP_s[12] ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .DI1(\cDVSResetStateMachine_1/CountxDP_lm[13] ), 
    .DI0(\cDVSResetStateMachine_1/CountxDP_lm[12] ), .CLK(ClockxC_c), 
    .F0(\cDVSResetStateMachine_1/CountxDP_lm[12] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP[12] ), 
    .F1(\cDVSResetStateMachine_1/CountxDP_lm[13] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP[13] ));
  cDVSResetStateMachine_1_SLICE_433 \cDVSResetStateMachine_1/SLICE_433 ( 
    .D1(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C1(\cDVSResetStateMachine_1/N_134 ), 
    .B1(\cDVSResetStateMachine_1/CountxDP_s[15] ), 
    .A1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .D0(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C0(\cDVSResetStateMachine_1/N_134 ), 
    .B0(\cDVSResetStateMachine_1/CountxDP_s[14] ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .DI1(\cDVSResetStateMachine_1/CountxDP_lm[15] ), 
    .DI0(\cDVSResetStateMachine_1/CountxDP_lm[14] ), .CLK(ClockxC_c), 
    .F0(\cDVSResetStateMachine_1/CountxDP_lm[14] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP[14] ), 
    .F1(\cDVSResetStateMachine_1/CountxDP_lm[15] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP[15] ));
  cDVSResetStateMachine_1_SLICE_434 \cDVSResetStateMachine_1/SLICE_434 ( 
    .D1(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C1(\cDVSResetStateMachine_1/N_134 ), 
    .B1(\cDVSResetStateMachine_1/CountxDP_s[17] ), 
    .A1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .D0(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C0(\cDVSResetStateMachine_1/N_134 ), 
    .B0(\cDVSResetStateMachine_1/CountxDP_s[16] ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .DI1(\cDVSResetStateMachine_1/CountxDP_lm[17] ), 
    .DI0(\cDVSResetStateMachine_1/CountxDP_lm[16] ), .CLK(ClockxC_c), 
    .F0(\cDVSResetStateMachine_1/CountxDP_lm[16] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP[16] ), 
    .F1(\cDVSResetStateMachine_1/CountxDP_lm[17] ), 
    .Q1(\cDVSResetStateMachine_1/CountxDP[17] ));
  cDVSResetStateMachine_1_SLICE_435 \cDVSResetStateMachine_1/SLICE_435 ( 
    .D1(\cDVSResetStateMachine_1/un3lto15_2 ), 
    .C1(\cDVSResetStateMachine_1/N_132_1 ), 
    .B1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0_1 ), 
    .A1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_0 ), 
    .D0(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .C0(\cDVSResetStateMachine_1/N_134 ), 
    .B0(\cDVSResetStateMachine_1/CountxDP_s[18] ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ), 
    .DI0(\cDVSResetStateMachine_1/CountxDP_lm[18] ), .CLK(ClockxC_c), 
    .F0(\cDVSResetStateMachine_1/CountxDP_lm[18] ), 
    .Q0(\cDVSResetStateMachine_1/CountxDP[18] ), 
    .F1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ));
  fifoStatemachine_1_SLICE_436 \fifoStatemachine_1/SLICE_436 ( 
    .B1(FifoEmptyxS), .A1(\fifoStatemachine_1.StatexDP[0] ), 
    .D0(\uEarlyPaketTimer.CountxDP[20] ), .C0(\fifoStatemachine_1/N_10_mux ), 
    .B0(\fifoStatemachine_1.StatexDP[0] ), .A0(ECResetEarlyPaketTimerxS), 
    .DI0(\fifoStatemachine_1/StatexDP_ns[0] ), .M0(FifoReadxE), 
    .CLK(IfClockxCI_c), .OFX0(\fifoStatemachine_1/StatexDP_ns[0] ), 
    .Q0(\fifoStatemachine_1.StatexDP[0] ));
  monitorStateMachine_1_SLICE_438 \monitorStateMachine_1/SLICE_438 ( 
    .D1(\monitorStateMachine_1/TriggerxDP ), 
    .C1(\monitorStateMachine_1/StatexDP_ns_i_0_a2[3] ), 
    .B1(\monitorStateMachine_1/N_112 ), .A1(ADCvalueReadyxS), 
    .C0(\monitorStateMachine_1/TriggerxDP ), 
    .B0(\monitorStateMachine_1/StatexDP_ns_i_0_a2[3] ), 
    .A0(\monitorStateMachine_1/N_112 ), 
    .DI1(\monitorStateMachine_1/StatexDP_ns[8] ), 
    .DI0(\monitorStateMachine_1/StatexDP_ns[9] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/StatexDP_ns[9] ), 
    .Q0(\monitorStateMachine_1.StatexDP[1] ), 
    .F1(\monitorStateMachine_1/StatexDP_ns[8] ), 
    .Q1(\monitorStateMachine_1.StatexDP[2] ));
  monitorStateMachine_1_SLICE_439 \monitorStateMachine_1/SLICE_439 ( 
    .D1(\monitorStateMachine_1.StatexDP[1] ), 
    .C1(\monitorStateMachine_1.StatexDP[2] ), 
    .B1(\monitorStateMachine_1.StatexDP[8] ), 
    .A1(\monitorStateMachine_1/StatexDP[6] ), 
    .D0(\monitorStateMachine_1/TriggerxDP ), 
    .C0(\monitorStateMachine_1/TimestampRegWritexEO_i_0_a2_0 ), 
    .B0(\monitorStateMachine_1/StatexDP_ns_i_0_a2[3] ), 
    .A0(\monitorStateMachine_1/N_112 ), 
    .DI0(\monitorStateMachine_1/StatexDP_ns[2] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/StatexDP_ns[2] ), 
    .Q0(\monitorStateMachine_1.StatexDP[8] ), .F1(N_17));
  monitorStateMachine_1_SLICE_440 \monitorStateMachine_1/SLICE_440 ( 
    .D1(\monitorStateMachine_1/un12_aerreqxsblt7 ), 
    .C1(\monitorStateMachine_1/CountxDP[7] ), 
    .B1(\monitorStateMachine_1/CountxDP ), .A1(\DebugxSIO_in[14] ), 
    .D0(AERREQxSB), .C0(\monitorStateMachine_1/CountxDP ), 
    .B0(\monitorStateMachine_1/N_147 ), 
    .A0(\monitorStateMachine_1/StatexDP[9] ), 
    .DI0(\monitorStateMachine_1/StatexDP_RNO[4] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/StatexDP_RNO[4] ), 
    .Q0(\monitorStateMachine_1/CountxDP ), .F1(\monitorStateMachine_1/N_147 ));
  monitorStateMachine_1_SLICE_441 \monitorStateMachine_1/SLICE_441 ( 
    .D1(FifoFullxS), .C1(\monitorStateMachine_1/StatexDP[10] ), 
    .B1(\monitorStateMachine_1/TimestampResetxDP ), 
    .A1(\monitorStateMachine_1/StatexDP_ns_i_0_a2[3] ), 
    .C0(\monitorStateMachine_1/TimestampResetxDP ), 
    .B0(\monitorStateMachine_1/StatexDP[10] ), .A0(FifoFullxS), 
    .DI1(\monitorStateMachine_1/N_168_i ), 
    .DI0(\monitorStateMachine_1/StatexDP_ns[4] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/StatexDP_ns[4] ), 
    .Q0(\monitorStateMachine_1/StatexDP[6] ), 
    .F1(\monitorStateMachine_1/N_168_i ), 
    .Q1(\monitorStateMachine_1/StatexDP[7] ));
  monitorStateMachine_1_SLICE_442 \monitorStateMachine_1/SLICE_442 ( 
    .D1(\monitorStateMachine_1/StatexDP_ns_0_a2_0[0] ), 
    .C1(\monitorStateMachine_1/StatexDP_ns_0_0[0] ), 
    .B1(\monitorStateMachine_1/N_147 ), .A1(\monitorStateMachine_1/N_130 ), 
    .D0(\monitorStateMachine_1/TriggerxDP ), 
    .C0(\monitorStateMachine_1/StatexDP_ns_0_a2_1[1] ), 
    .B0(\monitorStateMachine_1.StatexDP[8] ), 
    .A0(\monitorStateMachine_1/StatexDP_ns_i_0_a2[3] ), 
    .DI1(\monitorStateMachine_1/StatexDP_ns[0] ), 
    .DI0(\monitorStateMachine_1/StatexDP_ns[1] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/StatexDP_ns[1] ), 
    .Q0(\monitorStateMachine_1/StatexDP[9] ), 
    .F1(\monitorStateMachine_1/StatexDP_ns[0] ), 
    .Q1(\monitorStateMachine_1/StatexDP[10] ));
  monitorStateMachine_1_SLICE_443 \monitorStateMachine_1/SLICE_443 ( 
    .D1(\monitorStateMachine_1/StatexDP[10] ), 
    .C1(\monitorStateMachine_1/StatexDP[9] ), 
    .B1(\monitorStateMachine_1/StatexDP_0[5] ), .A1(N_141), 
    .D0(\monitorStateMachine_1/StatexDP[10] ), 
    .C0(\monitorStateMachine_1/StatexDP_0[5] ), .B0(FifoFullxS), 
    .A0(AERREQxSB), .DI0(\monitorStateMachine_1/N_171_i ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/N_171_i ), 
    .Q0(\monitorStateMachine_1/StatexDP_0[5] ), 
    .F1(\monitorStateMachine_1/StatexDP_ns_0_a2_0[0] ));
  monitorStateMachine_1_SLICE_444 \monitorStateMachine_1/SLICE_444 ( 
    .D1(FifoFullxS), .C1(\monitorStateMachine_1/StatexDP[10] ), 
    .B1(\monitorStateMachine_1/TimestampResetxDP ), 
    .A1(\monitorStateMachine_1/StatexDP_ns_i_0_a2[3] ), 
    .C0(\monitorStateMachine_1/TimestampResetxDP ), 
    .B0(\monitorStateMachine_1/StatexDP[10] ), .A0(FifoFullxS), 
    .DI1(\monitorStateMachine_1/N_168_i_fast ), 
    .DI0(\monitorStateMachine_1/StatexDP_ns_fast[4] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/StatexDP_ns_fast[4] ), 
    .Q0(\monitorStateMachine_1/StatexDP_fast[6] ), 
    .F1(\monitorStateMachine_1/N_168_i_fast ), 
    .Q1(\monitorStateMachine_1/StatexDP_fast[7] ));
  monitorStateMachine_1_SLICE_445 \monitorStateMachine_1/SLICE_445 ( 
    .D1(\monitorStateMachine_1/TimestampResetxDP ), 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP_s[1] ), 
    .B1(\monitorStateMachine_1/StatexDP[7] ), 
    .A1(\monitorStateMachine_1/StatexDP[6] ), 
    .D0(\monitorStateMachine_1/TimestampResetxDP ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP_s[0] ), 
    .B0(\monitorStateMachine_1/StatexDP[7] ), 
    .A0(\monitorStateMachine_1/StatexDP[6] ), 
    .DI1(\monitorStateMachine_1/TimestampOverflowxDP_lm[1] ), 
    .DI0(\monitorStateMachine_1/TimestampOverflowxDP_lm[0] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/TimestampOverflowxDP_lm[0] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP[0] ), 
    .F1(\monitorStateMachine_1/TimestampOverflowxDP_lm[1] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP[1] ));
  monitorStateMachine_1_SLICE_446 \monitorStateMachine_1/SLICE_446 ( 
    .D1(\monitorStateMachine_1/TimestampResetxDP ), 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP_s[3] ), 
    .B1(\monitorStateMachine_1/StatexDP[7] ), 
    .A1(\monitorStateMachine_1/StatexDP[6] ), 
    .D0(\monitorStateMachine_1/TimestampResetxDP ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP_s[2] ), 
    .B0(\monitorStateMachine_1/StatexDP[7] ), 
    .A0(\monitorStateMachine_1/StatexDP[6] ), 
    .DI1(\monitorStateMachine_1/TimestampOverflowxDP_lm[3] ), 
    .DI0(\monitorStateMachine_1/TimestampOverflowxDP_lm[2] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/TimestampOverflowxDP_lm[2] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP[2] ), 
    .F1(\monitorStateMachine_1/TimestampOverflowxDP_lm[3] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP[3] ));
  monitorStateMachine_1_SLICE_447 \monitorStateMachine_1/SLICE_447 ( 
    .D1(\monitorStateMachine_1/TimestampResetxDP ), 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP_s[5] ), 
    .B1(\monitorStateMachine_1/StatexDP[7] ), 
    .A1(\monitorStateMachine_1/StatexDP[6] ), 
    .D0(\monitorStateMachine_1/TimestampResetxDP ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP_s[4] ), 
    .B0(\monitorStateMachine_1/StatexDP[7] ), 
    .A0(\monitorStateMachine_1/StatexDP[6] ), 
    .DI1(\monitorStateMachine_1/TimestampOverflowxDP_lm[5] ), 
    .DI0(\monitorStateMachine_1/TimestampOverflowxDP_lm[4] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/TimestampOverflowxDP_lm[4] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP[4] ), 
    .F1(\monitorStateMachine_1/TimestampOverflowxDP_lm[5] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP[5] ));
  monitorStateMachine_1_SLICE_448 \monitorStateMachine_1/SLICE_448 ( 
    .D1(\monitorStateMachine_1/TimestampResetxDP ), 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP_s[7] ), 
    .B1(\monitorStateMachine_1/StatexDP[7] ), 
    .A1(\monitorStateMachine_1/StatexDP[6] ), 
    .D0(\monitorStateMachine_1/TimestampResetxDP ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP_s[6] ), 
    .B0(\monitorStateMachine_1/StatexDP[7] ), 
    .A0(\monitorStateMachine_1/StatexDP[6] ), 
    .DI1(\monitorStateMachine_1/TimestampOverflowxDP_lm[7] ), 
    .DI0(\monitorStateMachine_1/TimestampOverflowxDP_lm[6] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/TimestampOverflowxDP_lm[6] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP[6] ), 
    .F1(\monitorStateMachine_1/TimestampOverflowxDP_lm[7] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP[7] ));
  monitorStateMachine_1_SLICE_449 \monitorStateMachine_1/SLICE_449 ( 
    .D1(\monitorStateMachine_1/TimestampResetxDP ), 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP_s[9] ), 
    .B1(\monitorStateMachine_1/StatexDP[7] ), 
    .A1(\monitorStateMachine_1/StatexDP[6] ), 
    .D0(\monitorStateMachine_1/TimestampResetxDP ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP_s[8] ), 
    .B0(\monitorStateMachine_1/StatexDP[7] ), 
    .A0(\monitorStateMachine_1/StatexDP[6] ), 
    .DI1(\monitorStateMachine_1/TimestampOverflowxDP_lm[9] ), 
    .DI0(\monitorStateMachine_1/TimestampOverflowxDP_lm[8] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/TimestampOverflowxDP_lm[8] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP[8] ), 
    .F1(\monitorStateMachine_1/TimestampOverflowxDP_lm[9] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP[9] ));
  monitorStateMachine_1_SLICE_450 \monitorStateMachine_1/SLICE_450 ( 
    .D1(\monitorStateMachine_1/TimestampResetxDP ), 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP_s[11] ), 
    .B1(\monitorStateMachine_1/StatexDP[7] ), 
    .A1(\monitorStateMachine_1/StatexDP[6] ), 
    .D0(\monitorStateMachine_1/TimestampResetxDP ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP_s[10] ), 
    .B0(\monitorStateMachine_1/StatexDP[7] ), 
    .A0(\monitorStateMachine_1/StatexDP[6] ), 
    .DI1(\monitorStateMachine_1/TimestampOverflowxDP_lm[11] ), 
    .DI0(\monitorStateMachine_1/TimestampOverflowxDP_lm[10] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/TimestampOverflowxDP_lm[10] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP[10] ), 
    .F1(\monitorStateMachine_1/TimestampOverflowxDP_lm[11] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP[11] ));
  monitorStateMachine_1_SLICE_451 \monitorStateMachine_1/SLICE_451 ( 
    .D1(\monitorStateMachine_1/TimestampResetxDP ), 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP_s[13] ), 
    .B1(\monitorStateMachine_1/StatexDP[7] ), 
    .A1(\monitorStateMachine_1/StatexDP[6] ), 
    .D0(\monitorStateMachine_1/TimestampResetxDP ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP_s[12] ), 
    .B0(\monitorStateMachine_1/StatexDP[7] ), 
    .A0(\monitorStateMachine_1/StatexDP[6] ), 
    .DI1(\monitorStateMachine_1/TimestampOverflowxDP_lm[13] ), 
    .DI0(\monitorStateMachine_1/TimestampOverflowxDP_lm[12] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/TimestampOverflowxDP_lm[12] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP[12] ), 
    .F1(\monitorStateMachine_1/TimestampOverflowxDP_lm[13] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP[13] ));
  monitorStateMachine_1_SLICE_452 \monitorStateMachine_1/SLICE_452 ( 
    .D1(\monitorStateMachine_1/TimestampResetxDP ), 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP_s[15] ), 
    .B1(\monitorStateMachine_1/StatexDP[7] ), 
    .A1(\monitorStateMachine_1/StatexDP[6] ), 
    .D0(\monitorStateMachine_1/TimestampResetxDP ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP_s[14] ), 
    .B0(\monitorStateMachine_1/StatexDP[7] ), 
    .A0(\monitorStateMachine_1/StatexDP[6] ), 
    .DI1(\monitorStateMachine_1/TimestampOverflowxDP_lm[15] ), 
    .DI0(\monitorStateMachine_1/TimestampOverflowxDP_lm[14] ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/TimestampOverflowxDP_lm[14] ), 
    .Q0(\monitorStateMachine_1/TimestampOverflowxDP[14] ), 
    .F1(\monitorStateMachine_1/TimestampOverflowxDP_lm[15] ), 
    .Q1(\monitorStateMachine_1/TimestampOverflowxDP[15] ));
  monitorStateMachine_1_SLICE_453 \monitorStateMachine_1/SLICE_453 ( 
    .D1(\uSynchronizerStateMachine_1.ResetTimestampxSBO_i_0_a2_1_1_0 ), 
    .C1(\uSynchronizerStateMachine_1.N_209 ), 
    .B1(\uSynchronizerStateMachine_1.CounterxDP[8] ), 
    .A1(\monitorStateMachine_1/TimestampResetxDN_0_a2_a1_0_0 ), 
    .D0(\monitorStateMachine_1/TimestampResetxDN_0_a2_0_0 ), 
    .C0(\monitorStateMachine_1/TimestampResetxDN_0_a2_a2 ), 
    .B0(\monitorStateMachine_1/TimestampResetxDN_0_a2_a1 ), 
    .A0(\monitorStateMachine_1/TimestampResetxDN_0_a2_0_RNO ), 
    .DI0(\monitorStateMachine_1/TimestampResetxDN ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/TimestampResetxDN ), 
    .Q0(\monitorStateMachine_1/TimestampResetxDP ), 
    .F1(\monitorStateMachine_1/TimestampResetxDN_0_a2_a1 ));
  monitorStateMachine_1_SLICE_454 \monitorStateMachine_1/SLICE_454 ( 
    .D1(\monitorStateMachine_1/TriggerxDP ), 
    .C1(\monitorStateMachine_1/StatexDP_ns_0_a2_1_5[0] ), 
    .B1(\monitorStateMachine_1/StatexDP_ns_i_0_a2[3] ), 
    .A1(\monitorStateMachine_1/N_157 ), 
    .D0(\uSynchronizerStateMachine_1.SyncInxSB ), 
    .C0(\uSynchronizerStateMachine_1.StatexDP[4] ), 
    .B0(\monitorStateMachine_1/TriggerxDP ), 
    .A0(\monitorStateMachine_1.StatexDP[0] ), 
    .DI0(\monitorStateMachine_1/TriggerxDN ), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/TriggerxDN ), 
    .Q0(\monitorStateMachine_1/TriggerxDP ), 
    .F1(\monitorStateMachine_1/StatexDP_ns_0_0[0] ));
  shiftRegister_1_SLICE_456 \shiftRegister_1/SLICE_456 ( 
    .M1(\shiftRegister_1/StatexD[0] ), .M0(PC3xSIO_c), .CLK(PC1xSIO_c), 
    .Q0(\shiftRegister_1/StatexD[0] ), .Q1(\shiftRegister_1/StatexD[1] ));
  shiftRegister_1_SLICE_457 \shiftRegister_1/SLICE_457 ( 
    .M1(\shiftRegister_1/StatexD[2] ), .M0(\shiftRegister_1/StatexD[1] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[2] ), 
    .Q1(\shiftRegister_1/StatexD[3] ));
  shiftRegister_1_SLICE_458 \shiftRegister_1/SLICE_458 ( 
    .M1(\shiftRegister_1/StatexD[4] ), .M0(\shiftRegister_1/StatexD[3] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[4] ), 
    .Q1(\shiftRegister_1/StatexD[5] ));
  shiftRegister_1_SLICE_459 \shiftRegister_1/SLICE_459 ( 
    .M1(\shiftRegister_1/StatexD[6] ), .M0(\shiftRegister_1/StatexD[5] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[6] ), 
    .Q1(\shiftRegister_1/StatexD[7] ));
  shiftRegister_1_SLICE_460 \shiftRegister_1/SLICE_460 ( 
    .M1(\shiftRegister_1/StatexD[8] ), .M0(\shiftRegister_1/StatexD[7] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[8] ), 
    .Q1(\shiftRegister_1/StatexD[9] ));
  shiftRegister_1_SLICE_461 \shiftRegister_1/SLICE_461 ( 
    .M1(\shiftRegister_1/StatexD[10] ), .M0(\shiftRegister_1/StatexD[9] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[10] ), 
    .Q1(\shiftRegister_1/StatexD[11] ));
  shiftRegister_1_SLICE_462 \shiftRegister_1/SLICE_462 ( 
    .M1(\shiftRegister_1/StatexD[12] ), .M0(\shiftRegister_1/StatexD[11] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[12] ), 
    .Q1(\shiftRegister_1/StatexD[13] ));
  shiftRegister_1_SLICE_463 \shiftRegister_1/SLICE_463 ( 
    .M1(\shiftRegister_1/StatexD[14] ), .M0(\shiftRegister_1/StatexD[13] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[14] ), 
    .Q1(\shiftRegister_1/StatexD[15] ));
  shiftRegister_1_SLICE_464 \shiftRegister_1/SLICE_464 ( 
    .M1(\shiftRegister_1/StatexD[16] ), .M0(\shiftRegister_1/StatexD[15] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[16] ), 
    .Q1(\shiftRegister_1/StatexD[17] ));
  shiftRegister_1_SLICE_465 \shiftRegister_1/SLICE_465 ( 
    .M1(\shiftRegister_1/StatexD[18] ), .M0(\shiftRegister_1/StatexD[17] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[18] ), 
    .Q1(\shiftRegister_1/StatexD[19] ));
  shiftRegister_1_SLICE_466 \shiftRegister_1/SLICE_466 ( 
    .M1(\shiftRegister_1/StatexD[20] ), .M0(\shiftRegister_1/StatexD[19] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[20] ), 
    .Q1(\shiftRegister_1/StatexD[21] ));
  shiftRegister_1_SLICE_467 \shiftRegister_1/SLICE_467 ( 
    .M1(\shiftRegister_1/StatexD[22] ), .M0(\shiftRegister_1/StatexD[21] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[22] ), 
    .Q1(\shiftRegister_1/StatexD[23] ));
  shiftRegister_1_SLICE_468 \shiftRegister_1/SLICE_468 ( 
    .M1(\shiftRegister_1/StatexD[24] ), .M0(\shiftRegister_1/StatexD[23] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[24] ), 
    .Q1(\shiftRegister_1/StatexD[25] ));
  shiftRegister_1_SLICE_469 \shiftRegister_1/SLICE_469 ( 
    .M1(\shiftRegister_1/StatexD[26] ), .M0(\shiftRegister_1/StatexD[25] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[26] ), 
    .Q1(\shiftRegister_1/StatexD[27] ));
  shiftRegister_1_SLICE_470 \shiftRegister_1/SLICE_470 ( 
    .M1(\shiftRegister_1/StatexD[28] ), .M0(\shiftRegister_1/StatexD[27] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[28] ), 
    .Q1(\shiftRegister_1/StatexD[29] ));
  shiftRegister_1_SLICE_471 \shiftRegister_1/SLICE_471 ( 
    .M1(\shiftRegister_1/StatexD[30] ), .M0(\shiftRegister_1/StatexD[29] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[30] ), 
    .Q1(\shiftRegister_1/StatexD[31] ));
  shiftRegister_1_SLICE_472 \shiftRegister_1/SLICE_472 ( 
    .M1(\shiftRegister_1/StatexD[32] ), .M0(\shiftRegister_1/StatexD[31] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[32] ), 
    .Q1(\shiftRegister_1/StatexD[33] ));
  shiftRegister_1_SLICE_473 \shiftRegister_1/SLICE_473 ( 
    .M1(\shiftRegister_1/StatexD[34] ), .M0(\shiftRegister_1/StatexD[33] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[34] ), 
    .Q1(\shiftRegister_1/StatexD[35] ));
  shiftRegister_1_SLICE_474 \shiftRegister_1/SLICE_474 ( 
    .M1(\shiftRegister_1/StatexD[36] ), .M0(\shiftRegister_1/StatexD[35] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[36] ), 
    .Q1(\shiftRegister_1/StatexD[37] ));
  shiftRegister_1_SLICE_475 \shiftRegister_1/SLICE_475 ( 
    .M1(\shiftRegister_1/StatexD[38] ), .M0(\shiftRegister_1/StatexD[37] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[38] ), 
    .Q1(\shiftRegister_1/StatexD[39] ));
  shiftRegister_1_SLICE_476 \shiftRegister_1/SLICE_476 ( 
    .M1(\shiftRegister_1/StatexD[40] ), .M0(\shiftRegister_1/StatexD[39] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[40] ), 
    .Q1(\shiftRegister_1/StatexD[41] ));
  shiftRegister_1_SLICE_477 \shiftRegister_1/SLICE_477 ( 
    .M1(\shiftRegister_1/StatexD[42] ), .M0(\shiftRegister_1/StatexD[41] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[42] ), 
    .Q1(\shiftRegister_1/StatexD[43] ));
  shiftRegister_1_SLICE_478 \shiftRegister_1/SLICE_478 ( 
    .M1(\shiftRegister_1/StatexD[44] ), .M0(\shiftRegister_1/StatexD[43] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[44] ), 
    .Q1(\shiftRegister_1/StatexD[45] ));
  shiftRegister_1_SLICE_479 \shiftRegister_1/SLICE_479 ( 
    .M1(\shiftRegister_1/StatexD[46] ), .M0(\shiftRegister_1/StatexD[45] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[46] ), 
    .Q1(\shiftRegister_1/StatexD[47] ));
  shiftRegister_1_SLICE_480 \shiftRegister_1/SLICE_480 ( 
    .M1(\shiftRegister_1/StatexD[48] ), .M0(\shiftRegister_1/StatexD[47] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[48] ), 
    .Q1(\shiftRegister_1/StatexD[49] ));
  shiftRegister_1_SLICE_481 \shiftRegister_1/SLICE_481 ( 
    .M1(\shiftRegister_1/StatexD[50] ), .M0(\shiftRegister_1/StatexD[49] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[50] ), 
    .Q1(\shiftRegister_1/StatexD[51] ));
  shiftRegister_1_SLICE_482 \shiftRegister_1/SLICE_482 ( 
    .M1(\shiftRegister_1/StatexD[52] ), .M0(\shiftRegister_1/StatexD[51] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[52] ), 
    .Q1(\shiftRegister_1/StatexD[53] ));
  shiftRegister_1_SLICE_483 \shiftRegister_1/SLICE_483 ( 
    .M1(\shiftRegister_1/StatexD[54] ), .M0(\shiftRegister_1/StatexD[53] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[54] ), 
    .Q1(\shiftRegister_1/StatexD[55] ));
  shiftRegister_1_SLICE_484 \shiftRegister_1/SLICE_484 ( 
    .M1(\shiftRegister_1/StatexD[56] ), .M0(\shiftRegister_1/StatexD[55] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[56] ), 
    .Q1(\shiftRegister_1/StatexD[57] ));
  shiftRegister_1_SLICE_485 \shiftRegister_1/SLICE_485 ( 
    .M1(\shiftRegister_1/StatexD[58] ), .M0(\shiftRegister_1/StatexD[57] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[58] ), 
    .Q1(\shiftRegister_1/StatexD[59] ));
  shiftRegister_1_SLICE_486 \shiftRegister_1/SLICE_486 ( 
    .M1(\shiftRegister_1/StatexD[60] ), .M0(\shiftRegister_1/StatexD[59] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[60] ), 
    .Q1(\shiftRegister_1/StatexD[61] ));
  shiftRegister_1_SLICE_487 \shiftRegister_1/SLICE_487 ( 
    .M1(\shiftRegister_1/StatexD[62] ), .M0(\shiftRegister_1/StatexD[61] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[62] ), 
    .Q1(\shiftRegister_1/StatexD[63] ));
  shiftRegister_1_SLICE_488 \shiftRegister_1/SLICE_488 ( 
    .M1(\shiftRegister_1/StatexD[64] ), .M0(\shiftRegister_1/StatexD[63] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[64] ), 
    .Q1(\shiftRegister_1/StatexD[65] ));
  shiftRegister_1_SLICE_489 \shiftRegister_1/SLICE_489 ( 
    .M1(\shiftRegister_1/StatexD[66] ), .M0(\shiftRegister_1/StatexD[65] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[66] ), 
    .Q1(\shiftRegister_1/StatexD[67] ));
  shiftRegister_1_SLICE_490 \shiftRegister_1/SLICE_490 ( 
    .M1(\shiftRegister_1/StatexD[68] ), .M0(\shiftRegister_1/StatexD[67] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[68] ), 
    .Q1(\shiftRegister_1/StatexD[69] ));
  shiftRegister_1_SLICE_491 \shiftRegister_1/SLICE_491 ( 
    .M1(\shiftRegister_1/StatexD[70] ), .M0(\shiftRegister_1/StatexD[69] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[70] ), 
    .Q1(\shiftRegister_1/StatexD[71] ));
  shiftRegister_1_SLICE_492 \shiftRegister_1/SLICE_492 ( 
    .M1(\shiftRegister_1/StatexD[72] ), .M0(\shiftRegister_1/StatexD[71] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[72] ), 
    .Q1(\shiftRegister_1/StatexD[73] ));
  shiftRegister_1_SLICE_493 \shiftRegister_1/SLICE_493 ( 
    .M1(\shiftRegister_1/StatexD[74] ), .M0(\shiftRegister_1/StatexD[73] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[74] ), 
    .Q1(\shiftRegister_1/StatexD[75] ));
  shiftRegister_1_SLICE_494 \shiftRegister_1/SLICE_494 ( 
    .M1(\shiftRegister_1/StatexD[76] ), .M0(\shiftRegister_1/StatexD[75] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[76] ), 
    .Q1(\shiftRegister_1/StatexD[77] ));
  shiftRegister_1_SLICE_495 \shiftRegister_1/SLICE_495 ( 
    .M1(\shiftRegister_1/StatexD[78] ), .M0(\shiftRegister_1/StatexD[77] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[78] ), 
    .Q1(\shiftRegister_1/StatexD[79] ));
  shiftRegister_1_SLICE_496 \shiftRegister_1/SLICE_496 ( 
    .M1(\shiftRegister_1/StatexD[80] ), .M0(\shiftRegister_1/StatexD[79] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[80] ), 
    .Q1(\shiftRegister_1/StatexD[81] ));
  shiftRegister_1_SLICE_497 \shiftRegister_1/SLICE_497 ( 
    .M1(\shiftRegister_1/StatexD[82] ), .M0(\shiftRegister_1/StatexD[81] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[82] ), 
    .Q1(\shiftRegister_1/StatexD[83] ));
  shiftRegister_1_SLICE_498 \shiftRegister_1/SLICE_498 ( 
    .M1(\shiftRegister_1/StatexD[84] ), .M0(\shiftRegister_1/StatexD[83] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[84] ), 
    .Q1(\shiftRegister_1/StatexD[85] ));
  shiftRegister_1_SLICE_499 \shiftRegister_1/SLICE_499 ( 
    .M1(\shiftRegister_1/StatexD[86] ), .M0(\shiftRegister_1/StatexD[85] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[86] ), 
    .Q1(\shiftRegister_1/StatexD[87] ));
  shiftRegister_1_SLICE_500 \shiftRegister_1/SLICE_500 ( 
    .M1(\shiftRegister_1/StatexD[88] ), .M0(\shiftRegister_1/StatexD[87] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[88] ), 
    .Q1(\shiftRegister_1/StatexD[89] ));
  shiftRegister_1_SLICE_501 \shiftRegister_1/SLICE_501 ( 
    .M1(\shiftRegister_1/StatexD[90] ), .M0(\shiftRegister_1/StatexD[89] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[90] ), 
    .Q1(\shiftRegister_1/StatexD[91] ));
  shiftRegister_1_SLICE_502 \shiftRegister_1/SLICE_502 ( 
    .M1(\shiftRegister_1/StatexD[92] ), .M0(\shiftRegister_1/StatexD[91] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[92] ), 
    .Q1(\shiftRegister_1/StatexD[93] ));
  shiftRegister_1_SLICE_503 \shiftRegister_1/SLICE_503 ( 
    .M1(\shiftRegister_1/StatexD[94] ), .M0(\shiftRegister_1/StatexD[93] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[94] ), 
    .Q1(\shiftRegister_1/StatexD[95] ));
  shiftRegister_1_SLICE_504 \shiftRegister_1/SLICE_504 ( 
    .M1(\shiftRegister_1/StatexD[96] ), .M0(\shiftRegister_1/StatexD[95] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[96] ), 
    .Q1(\shiftRegister_1/StatexD[97] ));
  shiftRegister_1_SLICE_505 \shiftRegister_1/SLICE_505 ( 
    .M1(\shiftRegister_1/StatexD[98] ), .M0(\shiftRegister_1/StatexD[97] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[98] ), 
    .Q1(\shiftRegister_1/StatexD[99] ));
  shiftRegister_1_SLICE_506 \shiftRegister_1/SLICE_506 ( 
    .M1(\shiftRegister_1/StatexD[100] ), .M0(\shiftRegister_1/StatexD[99] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[100] ), 
    .Q1(\shiftRegister_1/StatexD[101] ));
  shiftRegister_1_SLICE_507 \shiftRegister_1/SLICE_507 ( 
    .M1(\shiftRegister_1/StatexD[102] ), .M0(\shiftRegister_1/StatexD[101] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[102] ), 
    .Q1(\shiftRegister_1/StatexD[103] ));
  shiftRegister_1_SLICE_508 \shiftRegister_1/SLICE_508 ( 
    .M1(\shiftRegister_1/StatexD[104] ), .M0(\shiftRegister_1/StatexD[103] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[104] ), 
    .Q1(\shiftRegister_1/StatexD[105] ));
  shiftRegister_1_SLICE_509 \shiftRegister_1/SLICE_509 ( 
    .M1(\shiftRegister_1/StatexD[106] ), .M0(\shiftRegister_1/StatexD[105] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[106] ), 
    .Q1(\shiftRegister_1/StatexD[107] ));
  shiftRegister_1_SLICE_510 \shiftRegister_1/SLICE_510 ( 
    .M1(\shiftRegister_1/StatexD[108] ), .M0(\shiftRegister_1/StatexD[107] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[108] ), 
    .Q1(\shiftRegister_1/StatexD[109] ));
  shiftRegister_1_SLICE_511 \shiftRegister_1/SLICE_511 ( 
    .M1(\shiftRegister_1/StatexD[110] ), .M0(\shiftRegister_1/StatexD[109] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[110] ), 
    .Q1(\shiftRegister_1/StatexD[111] ));
  shiftRegister_1_SLICE_512 \shiftRegister_1/SLICE_512 ( 
    .M1(\shiftRegister_1/StatexD[112] ), .M0(\shiftRegister_1/StatexD[111] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[112] ), 
    .Q1(\shiftRegister_1/StatexD[113] ));
  shiftRegister_1_SLICE_513 \shiftRegister_1/SLICE_513 ( 
    .M1(\shiftRegister_1/StatexD[114] ), .M0(\shiftRegister_1/StatexD[113] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[114] ), 
    .Q1(\shiftRegister_1/StatexD[115] ));
  shiftRegister_1_SLICE_514 \shiftRegister_1/SLICE_514 ( 
    .M1(\shiftRegister_1/StatexD[116] ), .M0(\shiftRegister_1/StatexD[115] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[116] ), 
    .Q1(\shiftRegister_1/StatexD[117] ));
  shiftRegister_1_SLICE_515 \shiftRegister_1/SLICE_515 ( 
    .M1(\shiftRegister_1/StatexD[118] ), .M0(\shiftRegister_1/StatexD[117] ), 
    .CLK(PC1xSIO_c), .Q0(\shiftRegister_1/StatexD[118] ), 
    .Q1(\shiftRegister_1/SRoutxD ));
  uEarlyPaketTimer_SLICE_516 \uEarlyPaketTimer/SLICE_516 ( 
    .D1(\uEarlyPaketTimer.CountxDP[20] ), 
    .C1(\fifoStatemachine_1.StatexDP[0] ), .B1(FifoReadxE), 
    .A1(ECResetEarlyPaketTimerxS), .D0(\uEarlyPaketTimer/CountxDP_s[20] ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), 
    .A0(ECResetEarlyPaketTimerxS), .DI0(\uEarlyPaketTimer/CountxDP_lm[20] ), 
    .CE(\uEarlyPaketTimer.CountxDPe ), .CLK(ClockxC_c), 
    .F0(\uEarlyPaketTimer/CountxDP_lm[20] ), 
    .Q0(\uEarlyPaketTimer.CountxDP[20] ), .F1(\uEarlyPaketTimer.CountxDPe ));
  uEarlyPaketTimer_SLICE_517 \uEarlyPaketTimer/SLICE_517 ( 
    .D1(\uEarlyPaketTimer/CountxDP_s[1] ), 
    .C1(\fifoStatemachine_1.StatexDP[0] ), .B1(FifoReadxE), 
    .A1(ECResetEarlyPaketTimerxS), .D0(\uEarlyPaketTimer/CountxDP_s[0] ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), 
    .A0(ECResetEarlyPaketTimerxS), .DI1(\uEarlyPaketTimer/CountxDP_lm[1] ), 
    .DI0(\uEarlyPaketTimer/CountxDP_lm[0] ), .CE(\uEarlyPaketTimer.CountxDPe ), 
    .CLK(ClockxC_c), .F0(\uEarlyPaketTimer/CountxDP_lm[0] ), 
    .Q0(\uEarlyPaketTimer/CountxDP[0] ), 
    .F1(\uEarlyPaketTimer/CountxDP_lm[1] ), 
    .Q1(\uEarlyPaketTimer/CountxDP[1] ));
  uEarlyPaketTimer_SLICE_518 \uEarlyPaketTimer/SLICE_518 ( 
    .D1(\uEarlyPaketTimer/CountxDP_s[3] ), 
    .C1(\fifoStatemachine_1.StatexDP[0] ), .B1(FifoReadxE), 
    .A1(ECResetEarlyPaketTimerxS), .D0(\uEarlyPaketTimer/CountxDP_s[2] ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), 
    .A0(ECResetEarlyPaketTimerxS), .DI1(\uEarlyPaketTimer/CountxDP_lm[3] ), 
    .DI0(\uEarlyPaketTimer/CountxDP_lm[2] ), .CE(\uEarlyPaketTimer.CountxDPe ), 
    .CLK(ClockxC_c), .F0(\uEarlyPaketTimer/CountxDP_lm[2] ), 
    .Q0(\uEarlyPaketTimer/CountxDP[2] ), 
    .F1(\uEarlyPaketTimer/CountxDP_lm[3] ), 
    .Q1(\uEarlyPaketTimer/CountxDP[3] ));
  uEarlyPaketTimer_SLICE_519 \uEarlyPaketTimer/SLICE_519 ( 
    .D1(\uEarlyPaketTimer/CountxDP_s[5] ), 
    .C1(\fifoStatemachine_1.StatexDP[0] ), .B1(FifoReadxE), 
    .A1(ECResetEarlyPaketTimerxS), .D0(\uEarlyPaketTimer/CountxDP_s[4] ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), 
    .A0(ECResetEarlyPaketTimerxS), .DI1(\uEarlyPaketTimer/CountxDP_lm[5] ), 
    .DI0(\uEarlyPaketTimer/CountxDP_lm[4] ), .CE(\uEarlyPaketTimer.CountxDPe ), 
    .CLK(ClockxC_c), .F0(\uEarlyPaketTimer/CountxDP_lm[4] ), 
    .Q0(\uEarlyPaketTimer/CountxDP[4] ), 
    .F1(\uEarlyPaketTimer/CountxDP_lm[5] ), 
    .Q1(\uEarlyPaketTimer/CountxDP[5] ));
  uEarlyPaketTimer_SLICE_520 \uEarlyPaketTimer/SLICE_520 ( 
    .D1(\uEarlyPaketTimer/CountxDP_s[7] ), 
    .C1(\fifoStatemachine_1.StatexDP[0] ), .B1(FifoReadxE), 
    .A1(ECResetEarlyPaketTimerxS), .D0(\uEarlyPaketTimer/CountxDP_s[6] ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), 
    .A0(ECResetEarlyPaketTimerxS), .DI1(\uEarlyPaketTimer/CountxDP_lm[7] ), 
    .DI0(\uEarlyPaketTimer/CountxDP_lm[6] ), .CE(\uEarlyPaketTimer.CountxDPe ), 
    .CLK(ClockxC_c), .F0(\uEarlyPaketTimer/CountxDP_lm[6] ), 
    .Q0(\uEarlyPaketTimer/CountxDP[6] ), 
    .F1(\uEarlyPaketTimer/CountxDP_lm[7] ), 
    .Q1(\uEarlyPaketTimer/CountxDP[7] ));
  uEarlyPaketTimer_SLICE_521 \uEarlyPaketTimer/SLICE_521 ( 
    .D1(\uEarlyPaketTimer/CountxDP_s[9] ), 
    .C1(\fifoStatemachine_1.StatexDP[0] ), .B1(FifoReadxE), 
    .A1(ECResetEarlyPaketTimerxS), .D0(\uEarlyPaketTimer/CountxDP_s[8] ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), 
    .A0(ECResetEarlyPaketTimerxS), .DI1(\uEarlyPaketTimer/CountxDP_lm[9] ), 
    .DI0(\uEarlyPaketTimer/CountxDP_lm[8] ), .CE(\uEarlyPaketTimer.CountxDPe ), 
    .CLK(ClockxC_c), .F0(\uEarlyPaketTimer/CountxDP_lm[8] ), 
    .Q0(\uEarlyPaketTimer/CountxDP[8] ), 
    .F1(\uEarlyPaketTimer/CountxDP_lm[9] ), 
    .Q1(\uEarlyPaketTimer/CountxDP[9] ));
  uEarlyPaketTimer_SLICE_522 \uEarlyPaketTimer/SLICE_522 ( 
    .D1(\uEarlyPaketTimer/CountxDP_s[11] ), 
    .C1(\fifoStatemachine_1.StatexDP[0] ), .B1(FifoReadxE), 
    .A1(ECResetEarlyPaketTimerxS), .D0(\uEarlyPaketTimer/CountxDP_s[10] ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), 
    .A0(ECResetEarlyPaketTimerxS), .DI1(\uEarlyPaketTimer/CountxDP_lm[11] ), 
    .DI0(\uEarlyPaketTimer/CountxDP_lm[10] ), 
    .CE(\uEarlyPaketTimer.CountxDPe ), .CLK(ClockxC_c), 
    .F0(\uEarlyPaketTimer/CountxDP_lm[10] ), 
    .Q0(\uEarlyPaketTimer/CountxDP[10] ), 
    .F1(\uEarlyPaketTimer/CountxDP_lm[11] ), 
    .Q1(\uEarlyPaketTimer/CountxDP[11] ));
  uEarlyPaketTimer_SLICE_523 \uEarlyPaketTimer/SLICE_523 ( 
    .D1(\uEarlyPaketTimer/CountxDP_s[13] ), 
    .C1(\fifoStatemachine_1.StatexDP[0] ), .B1(FifoReadxE), 
    .A1(ECResetEarlyPaketTimerxS), .D0(\uEarlyPaketTimer/CountxDP_s[12] ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), 
    .A0(ECResetEarlyPaketTimerxS), .DI1(\uEarlyPaketTimer/CountxDP_lm[13] ), 
    .DI0(\uEarlyPaketTimer/CountxDP_lm[12] ), 
    .CE(\uEarlyPaketTimer.CountxDPe ), .CLK(ClockxC_c), 
    .F0(\uEarlyPaketTimer/CountxDP_lm[12] ), 
    .Q0(\uEarlyPaketTimer/CountxDP[12] ), 
    .F1(\uEarlyPaketTimer/CountxDP_lm[13] ), 
    .Q1(\uEarlyPaketTimer/CountxDP[13] ));
  uEarlyPaketTimer_SLICE_524 \uEarlyPaketTimer/SLICE_524 ( 
    .D1(\uEarlyPaketTimer/CountxDP_s[15] ), 
    .C1(\fifoStatemachine_1.StatexDP[0] ), .B1(FifoReadxE), 
    .A1(ECResetEarlyPaketTimerxS), .D0(\uEarlyPaketTimer/CountxDP_s[14] ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), 
    .A0(ECResetEarlyPaketTimerxS), .DI1(\uEarlyPaketTimer/CountxDP_lm[15] ), 
    .DI0(\uEarlyPaketTimer/CountxDP_lm[14] ), 
    .CE(\uEarlyPaketTimer.CountxDPe ), .CLK(ClockxC_c), 
    .F0(\uEarlyPaketTimer/CountxDP_lm[14] ), 
    .Q0(\uEarlyPaketTimer/CountxDP[14] ), 
    .F1(\uEarlyPaketTimer/CountxDP_lm[15] ), 
    .Q1(\uEarlyPaketTimer/CountxDP[15] ));
  uEarlyPaketTimer_SLICE_525 \uEarlyPaketTimer/SLICE_525 ( 
    .D1(\uEarlyPaketTimer/CountxDP_s[17] ), 
    .C1(\fifoStatemachine_1.StatexDP[0] ), .B1(FifoReadxE), 
    .A1(ECResetEarlyPaketTimerxS), .D0(\uEarlyPaketTimer/CountxDP_s[16] ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), 
    .A0(ECResetEarlyPaketTimerxS), .DI1(\uEarlyPaketTimer/CountxDP_lm[17] ), 
    .DI0(\uEarlyPaketTimer/CountxDP_lm[16] ), 
    .CE(\uEarlyPaketTimer.CountxDPe ), .CLK(ClockxC_c), 
    .F0(\uEarlyPaketTimer/CountxDP_lm[16] ), 
    .Q0(\uEarlyPaketTimer/CountxDP[16] ), 
    .F1(\uEarlyPaketTimer/CountxDP_lm[17] ), 
    .Q1(\uEarlyPaketTimer/CountxDP[17] ));
  uEarlyPaketTimer_SLICE_526 \uEarlyPaketTimer/SLICE_526 ( 
    .D1(\uEarlyPaketTimer/CountxDP_s[19] ), 
    .C1(\fifoStatemachine_1.StatexDP[0] ), .B1(FifoReadxE), 
    .A1(ECResetEarlyPaketTimerxS), .D0(\uEarlyPaketTimer/CountxDP_s[18] ), 
    .C0(\fifoStatemachine_1.StatexDP[0] ), .B0(FifoReadxE), 
    .A0(ECResetEarlyPaketTimerxS), .DI1(\uEarlyPaketTimer/CountxDP_lm[19] ), 
    .DI0(\uEarlyPaketTimer/CountxDP_lm[18] ), 
    .CE(\uEarlyPaketTimer.CountxDPe ), .CLK(ClockxC_c), 
    .F0(\uEarlyPaketTimer/CountxDP_lm[18] ), 
    .Q0(\uEarlyPaketTimer/CountxDP[18] ), 
    .F1(\uEarlyPaketTimer/CountxDP_lm[19] ), 
    .Q1(\uEarlyPaketTimer/CountxDP[19] ));
  uEventCounter_SLICE_527 \uEventCounter/SLICE_527 ( 
    .D1(\uEventCounter/CountxDP_s[1] ), .C1(\fifoStatemachine_1.StatexDP[0] ), 
    .B1(FifoReadxE), .A1(ECResetEarlyPaketTimerxS), 
    .D0(\uEventCounter/CountxDP_s[0] ), .C0(\fifoStatemachine_1.StatexDP[0] ), 
    .B0(FifoReadxE), .A0(ECResetEarlyPaketTimerxS), 
    .DI1(\uEventCounter/CountxDP_lm[1] ), .DI0(\uEventCounter/CountxDP_lm[0] ), 
    .CE(\uEventCounter/CountxDPe ), .CLK(ClockxC_c), 
    .F0(\uEventCounter/CountxDP_lm[0] ), .Q0(\uEventCounter/CountxDP[0] ), 
    .F1(\uEventCounter/CountxDP_lm[1] ), .Q1(\uEventCounter/CountxDP[1] ));
  uEventCounter_SLICE_528 \uEventCounter/SLICE_528 ( 
    .D1(\uEventCounter/CountxDP_s[3] ), .C1(\fifoStatemachine_1.StatexDP[0] ), 
    .B1(FifoReadxE), .A1(ECResetEarlyPaketTimerxS), 
    .D0(\uEventCounter/CountxDP_s[2] ), .C0(\fifoStatemachine_1.StatexDP[0] ), 
    .B0(FifoReadxE), .A0(ECResetEarlyPaketTimerxS), 
    .DI1(\uEventCounter/CountxDP_lm[3] ), .DI0(\uEventCounter/CountxDP_lm[2] ), 
    .CE(\uEventCounter/CountxDPe ), .CLK(ClockxC_c), 
    .F0(\uEventCounter/CountxDP_lm[2] ), .Q0(\uEventCounter/CountxDP[2] ), 
    .F1(\uEventCounter/CountxDP_lm[3] ), .Q1(\uEventCounter/CountxDP[3] ));
  uEventCounter_SLICE_529 \uEventCounter/SLICE_529 ( 
    .D1(\uEventCounter/CountxDP_s[5] ), .C1(\fifoStatemachine_1.StatexDP[0] ), 
    .B1(FifoReadxE), .A1(ECResetEarlyPaketTimerxS), 
    .D0(\uEventCounter/CountxDP_s[4] ), .C0(\fifoStatemachine_1.StatexDP[0] ), 
    .B0(FifoReadxE), .A0(ECResetEarlyPaketTimerxS), 
    .DI1(\uEventCounter/CountxDP_lm[5] ), .DI0(\uEventCounter/CountxDP_lm[4] ), 
    .CE(\uEventCounter/CountxDPe ), .CLK(ClockxC_c), 
    .F0(\uEventCounter/CountxDP_lm[4] ), .Q0(\uEventCounter/CountxDP[4] ), 
    .F1(\uEventCounter/CountxDP_lm[5] ), .Q1(\uEventCounter/CountxDP[5] ));
  uEventCounter_SLICE_530 \uEventCounter/SLICE_530 ( 
    .D1(\uEventCounter/CountxDP_s[7] ), .C1(\fifoStatemachine_1.StatexDP[0] ), 
    .B1(FifoReadxE), .A1(ECResetEarlyPaketTimerxS), 
    .D0(\uEventCounter/CountxDP_s[6] ), .C0(\fifoStatemachine_1.StatexDP[0] ), 
    .B0(FifoReadxE), .A0(ECResetEarlyPaketTimerxS), 
    .DI1(\uEventCounter/CountxDP_lm[7] ), .DI0(\uEventCounter/CountxDP_lm[6] ), 
    .CE(\uEventCounter/CountxDPe ), .CLK(ClockxC_c), 
    .F0(\uEventCounter/CountxDP_lm[6] ), .Q0(\uEventCounter/CountxDP[6] ), 
    .F1(\uEventCounter/CountxDP_lm[7] ), .Q1(\uEventCounter/CountxDP[7] ));
  uEventCounter_SLICE_531 \uEventCounter/SLICE_531 ( 
    .D1(\uEventCounter/countxdn15_5 ), .C1(\uEventCounter/countxdn15_4 ), 
    .B1(\uEventCounter/CountxDP[6] ), .A1(\uEventCounter/CountxDP[5] ), 
    .D0(\uEventCounter/CountxDP_s[8] ), .C0(\fifoStatemachine_1.StatexDP[0] ), 
    .B0(FifoReadxE), .A0(ECResetEarlyPaketTimerxS), 
    .DI0(\uEventCounter/CountxDP_lm[8] ), .CE(\uEventCounter/CountxDPe ), 
    .CLK(ClockxC_c), .F0(\uEventCounter/CountxDP_lm[8] ), 
    .Q0(\uEventCounter/CountxDP[8] ), .F1(ECResetEarlyPaketTimerxS));
  uSynchronizerStateMachine_1_SLICE_532 
    \uSynchronizerStateMachine_1/SLICE_532 ( 
    .D1(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C1(\uSynchronizerStateMachine_1/N_259 ), 
    .B1(\uSynchronizerStateMachine_1/N_195 ), 
    .A1(\uSynchronizerStateMachine_1/CounterxDP_s[8] ), 
    .D0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C0(\uSynchronizerStateMachine_1/N_259 ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP_s[7] ), 
    .DI1(\uSynchronizerStateMachine_1/CounterxDP_lm[8] ), 
    .DI0(\uSynchronizerStateMachine_1/CounterxDP_lm[7] ), 
    .CE(\uSynchronizerStateMachine_1/CounterxDPe ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/CounterxDP_lm[7] ), 
    .Q0(\uSynchronizerStateMachine_1.CounterxDP[7] ), 
    .F1(\uSynchronizerStateMachine_1/CounterxDP_lm[8] ), 
    .Q1(\uSynchronizerStateMachine_1.CounterxDP[8] ));
  uSynchronizerStateMachine_1_SLICE_533 
    \uSynchronizerStateMachine_1/SLICE_533 ( 
    .D1(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C1(\uSynchronizerStateMachine_1/N_259 ), 
    .B1(\uSynchronizerStateMachine_1/N_195 ), 
    .A1(\uSynchronizerStateMachine_1/CounterxDP_s[12] ), 
    .D0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C0(\uSynchronizerStateMachine_1/N_259 ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP_s[11] ), 
    .DI1(\uSynchronizerStateMachine_1/CounterxDP_lm[12] ), 
    .DI0(\uSynchronizerStateMachine_1/CounterxDP_lm[11] ), 
    .CE(\uSynchronizerStateMachine_1/CounterxDPe ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/CounterxDP_lm[11] ), 
    .Q0(\uSynchronizerStateMachine_1.CounterxDP[11] ), 
    .F1(\uSynchronizerStateMachine_1/CounterxDP_lm[12] ), 
    .Q1(\uSynchronizerStateMachine_1.CounterxDP[12] ));
  SLICE_534 SLICE_534( .D1(\uSynchronizerStateMachine_1.N_209 ), 
    .C1(\uSynchronizerStateMachine_1.CounterxDP[13] ), 
    .B1(\uSynchronizerStateMachine_1.CounterxDP[12] ), 
    .A1(\monitorStateMachine_1/TimestampResetxDP ), 
    .D0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C0(\uSynchronizerStateMachine_1/N_259 ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP_s[13] ), 
    .DI0(\uSynchronizerStateMachine_1/CounterxDP_lm[13] ), 
    .CE(\uSynchronizerStateMachine_1/CounterxDPe ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/CounterxDP_lm[13] ), 
    .Q0(\uSynchronizerStateMachine_1.CounterxDP[13] ), 
    .F1(\monitorStateMachine_1/TimestampResetxDN_0_a2_a2 ));
  uSynchronizerStateMachine_1_SLICE_535 
    \uSynchronizerStateMachine_1/SLICE_535 ( 
    .D1(\uSynchronizerStateMachine_1.StatexDP[2] ), 
    .C1(\uSynchronizerStateMachine_1/N_199 ), 
    .B1(\uSynchronizerStateMachine_1/N_110 ), .A1(LED2xSO_c), 
    .D0(\uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] ), 
    .C0(\uSynchronizerStateMachine_1.StatexDP[2] ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/N_110 ), 
    .DI1(\uSynchronizerStateMachine_1/N_185_i ), 
    .DI0(\uSynchronizerStateMachine_1/StatexDP_ns[3] ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/StatexDP_ns[3] ), 
    .Q0(\uSynchronizerStateMachine_1.StatexDP[2] ), 
    .F1(\uSynchronizerStateMachine_1/N_185_i ), 
    .Q1(\uSynchronizerStateMachine_1.StatexDP[4] ));
  SLICE_536 SLICE_536( .D1(LED2xSO_c), 
    .C1(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .B1(\monitorStateMachine_1/TimestampResetxDN_0_a2_a0_1 ), 
    .A1(\uSynchronizerStateMachine_1.p_memless.op_gt.op_gt.counterxdn5lt7 ), 
    .D0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C0(\uSynchronizerStateMachine_1.StatexDP[4] ), 
    .B0(\uSynchronizerStateMachine_1/StatexDP[3] ), .A0(LED2xSO_c), 
    .DI0(\uSynchronizerStateMachine_1/N_183_i ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/N_183_i ), 
    .Q0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .F1(\monitorStateMachine_1/TimestampResetxDN_0_a2_0_RNO ));
  uSynchronizerStateMachine_1_SLICE_538 
    \uSynchronizerStateMachine_1/SLICE_538 ( 
    .D1(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C1(\uSynchronizerStateMachine_1/N_259 ), 
    .B1(\uSynchronizerStateMachine_1/N_195 ), 
    .A1(\uSynchronizerStateMachine_1/CounterxDP_s[1] ), 
    .D0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C0(\uSynchronizerStateMachine_1/N_259 ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP_s[0] ), 
    .DI1(\uSynchronizerStateMachine_1/CounterxDP_lm[1] ), 
    .DI0(\uSynchronizerStateMachine_1/CounterxDP_lm[0] ), 
    .CE(\uSynchronizerStateMachine_1/CounterxDPe ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/CounterxDP_lm[0] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP[0] ), 
    .F1(\uSynchronizerStateMachine_1/CounterxDP_lm[1] ), 
    .Q1(\uSynchronizerStateMachine_1/CounterxDP[1] ));
  uSynchronizerStateMachine_1_SLICE_539 
    \uSynchronizerStateMachine_1/SLICE_539 ( 
    .D1(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C1(\uSynchronizerStateMachine_1/N_259 ), 
    .B1(\uSynchronizerStateMachine_1/N_195 ), 
    .A1(\uSynchronizerStateMachine_1/CounterxDP_s[3] ), 
    .D0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C0(\uSynchronizerStateMachine_1/N_259 ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP_s[2] ), 
    .DI1(\uSynchronizerStateMachine_1/CounterxDP_lm[3] ), 
    .DI0(\uSynchronizerStateMachine_1/CounterxDP_lm[2] ), 
    .CE(\uSynchronizerStateMachine_1/CounterxDPe ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/CounterxDP_lm[2] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP[2] ), 
    .F1(\uSynchronizerStateMachine_1/CounterxDP_lm[3] ), 
    .Q1(\uSynchronizerStateMachine_1/CounterxDP[3] ));
  uSynchronizerStateMachine_1_SLICE_540 
    \uSynchronizerStateMachine_1/SLICE_540 ( 
    .D1(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C1(\uSynchronizerStateMachine_1/N_259 ), 
    .B1(\uSynchronizerStateMachine_1/N_195 ), 
    .A1(\uSynchronizerStateMachine_1/CounterxDP_s[5] ), 
    .D0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C0(\uSynchronizerStateMachine_1/N_259 ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP_s[4] ), 
    .DI1(\uSynchronizerStateMachine_1/CounterxDP_lm[5] ), 
    .DI0(\uSynchronizerStateMachine_1/CounterxDP_lm[4] ), 
    .CE(\uSynchronizerStateMachine_1/CounterxDPe ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/CounterxDP_lm[4] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP[4] ), 
    .F1(\uSynchronizerStateMachine_1/CounterxDP_lm[5] ), 
    .Q1(\uSynchronizerStateMachine_1/CounterxDP[5] ));
  uSynchronizerStateMachine_1_SLICE_541 
    \uSynchronizerStateMachine_1/SLICE_541 ( 
    .D1(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C1(\uSynchronizerStateMachine_1/N_259 ), 
    .B1(\uSynchronizerStateMachine_1/N_195 ), 
    .A1(\uSynchronizerStateMachine_1/CounterxDP_s[9] ), 
    .D0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C0(\uSynchronizerStateMachine_1/N_259 ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP_s[6] ), 
    .DI1(\uSynchronizerStateMachine_1/CounterxDP_lm[9] ), 
    .DI0(\uSynchronizerStateMachine_1/CounterxDP_lm[6] ), 
    .CE(\uSynchronizerStateMachine_1/CounterxDPe ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/CounterxDP_lm[6] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP[6] ), 
    .F1(\uSynchronizerStateMachine_1/CounterxDP_lm[9] ), 
    .Q1(\uSynchronizerStateMachine_1/CounterxDP[9] ));
  uSynchronizerStateMachine_1_SLICE_542 
    \uSynchronizerStateMachine_1/SLICE_542 ( 
    .D1(\uSynchronizerStateMachine_1/un1_StatexDP_7_0_78_i_a3_6 ), 
    .C1(\uSynchronizerStateMachine_1/counterxdn21lt6 ), 
    .B1(\uSynchronizerStateMachine_1/CounterxDP[6] ), 
    .A1(\uSynchronizerStateMachine_1/CounterxDP[5] ), 
    .D0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .C0(\uSynchronizerStateMachine_1/N_259 ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP_s[10] ), 
    .DI0(\uSynchronizerStateMachine_1/CounterxDP_lm[10] ), 
    .CE(\uSynchronizerStateMachine_1/CounterxDPe ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/CounterxDP_lm[10] ), 
    .Q0(\uSynchronizerStateMachine_1/CounterxDP[10] ), 
    .F1(\uSynchronizerStateMachine_1/N_259 ));
  uSynchronizerStateMachine_1_SLICE_543 
    \uSynchronizerStateMachine_1/SLICE_543 ( 
    .D1(\uSynchronizerStateMachine_1/dividerxdn10 ), 
    .C1(\uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] ), 
    .B1(\uSynchronizerStateMachine_1/N_195 ), 
    .A1(\uSynchronizerStateMachine_1/DividerxDP_s[1] ), 
    .D0(\uSynchronizerStateMachine_1/dividerxdn10 ), 
    .C0(\uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/DividerxDP_s[0] ), 
    .DI1(\uSynchronizerStateMachine_1/DividerxDP_lm[1] ), 
    .DI0(\uSynchronizerStateMachine_1/DividerxDP_lm[0] ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/DividerxDP_lm[0] ), 
    .Q0(\uSynchronizerStateMachine_1/DividerxDP[0] ), 
    .F1(\uSynchronizerStateMachine_1/DividerxDP_lm[1] ), 
    .Q1(\uSynchronizerStateMachine_1/DividerxDP[1] ));
  uSynchronizerStateMachine_1_SLICE_544 
    \uSynchronizerStateMachine_1/SLICE_544 ( 
    .D1(\uSynchronizerStateMachine_1/dividerxdn10 ), 
    .C1(\uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] ), 
    .B1(\uSynchronizerStateMachine_1/N_195 ), 
    .A1(\uSynchronizerStateMachine_1/DividerxDP_s[3] ), 
    .D0(\uSynchronizerStateMachine_1/dividerxdn10 ), 
    .C0(\uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/DividerxDP_s[2] ), 
    .DI1(\uSynchronizerStateMachine_1/DividerxDP_lm[3] ), 
    .DI0(\uSynchronizerStateMachine_1/DividerxDP_lm[2] ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/DividerxDP_lm[2] ), 
    .Q0(\uSynchronizerStateMachine_1/DividerxDP[2] ), 
    .F1(\uSynchronizerStateMachine_1/DividerxDP_lm[3] ), 
    .Q1(\uSynchronizerStateMachine_1/DividerxDP[3] ));
  uSynchronizerStateMachine_1_SLICE_545 
    \uSynchronizerStateMachine_1/SLICE_545 ( 
    .D1(\uSynchronizerStateMachine_1/dividerxdn10 ), 
    .C1(\uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] ), 
    .B1(\uSynchronizerStateMachine_1/N_195 ), 
    .A1(\uSynchronizerStateMachine_1/DividerxDP_s[5] ), 
    .D0(\uSynchronizerStateMachine_1/dividerxdn10 ), 
    .C0(\uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/DividerxDP_s[4] ), 
    .DI1(\uSynchronizerStateMachine_1/DividerxDP_lm[5] ), 
    .DI0(\uSynchronizerStateMachine_1/DividerxDP_lm[4] ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/DividerxDP_lm[4] ), 
    .Q0(\uSynchronizerStateMachine_1/DividerxDP[4] ), 
    .F1(\uSynchronizerStateMachine_1/DividerxDP_lm[5] ), 
    .Q1(\uSynchronizerStateMachine_1/DividerxDP[5] ));
  uSynchronizerStateMachine_1_SLICE_546 
    \uSynchronizerStateMachine_1/SLICE_546 ( .B1(PA7xSIO_c), .A1(LED2xSO_c), 
    .D0(\uSynchronizerStateMachine_1/dividerxdn10 ), 
    .C0(\uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1/DividerxDP_s[6] ), 
    .DI0(\uSynchronizerStateMachine_1/DividerxDP_lm[6] ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/DividerxDP_lm[6] ), 
    .Q0(\uSynchronizerStateMachine_1/DividerxDP[6] ), 
    .F1(\uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] ));
  uSynchronizerStateMachine_1_SLICE_547 
    \uSynchronizerStateMachine_1/SLICE_547 ( 
    .B1(\uSynchronizerStateMachine_1.StatexDP[4] ), 
    .A1(\uSynchronizerStateMachine_1/StatexDP[3] ), 
    .D0(\uSynchronizerStateMachine_1.SyncInxSB ), 
    .C0(\uSynchronizerStateMachine_1/N_195 ), .B0(PA7xSIO_c), .A0(LED2xSO_c), 
    .DI0(\uSynchronizerStateMachine_1/N_187_i ), .CLK(ClockxC_c), 
    .F0(\uSynchronizerStateMachine_1/N_187_i ), 
    .Q0(\uSynchronizerStateMachine_1/StatexDP[3] ), 
    .F1(\uSynchronizerStateMachine_1/N_195 ));
  uSynchronizerStateMachine_1_SLICE_548 
    \uSynchronizerStateMachine_1/SLICE_548 ( 
    .M1(\uSynchronizerStateMachine_1/SyncInxSBN ), .M0(Sync1xABI_c), 
    .CLK(ClockxC_c), .Q0(\uSynchronizerStateMachine_1/SyncInxSBN ), 
    .Q1(\uSynchronizerStateMachine_1.SyncInxSB ));
  uTimestampCounter_SLICE_551 \uTimestampCounter/SLICE_551 ( 
    .M0(\uTimestampCounter/CountxDP_s[14] ), .CE(IncxS), 
    .LSR(ResetTimestampxSBO_i_0_o2_2_RNICSNV), .CLK(ClockxC_c), 
    .Q0(\uTimestampCounter/CountxDP_fast[14] ));
  monitorStateMachine_1_FifoDataInxD_3_8__SLICE_552 
    \monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552 ( 
    .C1(\monitorStateMachine_1.StatexDP[0] ), .B1(\MonitorTimestampxD[8] ), 
    .A1(ReadADCvaluexE), .C0(ReadADCvaluexE), .B0(\AERMonitorAddressxDI_c[8] ), 
    .A0(\ADCregOutxD[8] ), .M0(\monitorStateMachine_1/N_12 ), 
    .OFX0(\FifoDataInxD[8] ));
  monitorStateMachine_1_FifoDataInxD_3_6__SLICE_553 
    \monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553 ( 
    .C1(\monitorStateMachine_1.StatexDP[0] ), .B1(\MonitorTimestampxD[6] ), 
    .A1(ReadADCvaluexE), .C0(ReadADCvaluexE), .B0(\AERMonitorAddressxDI_c[6] ), 
    .A0(\ADCregOutxD[6] ), .M0(\monitorStateMachine_1/N_12 ), 
    .OFX0(\FifoDataInxD[6] ));
  monitorStateMachine_1_FifoDataInxD_3_4__SLICE_554 
    \monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554 ( 
    .C1(\monitorStateMachine_1.StatexDP[0] ), .B1(\MonitorTimestampxD[4] ), 
    .A1(ReadADCvaluexE), .C0(ReadADCvaluexE), .B0(\AERMonitorAddressxDI_c[4] ), 
    .A0(\ADCregOutxD[4] ), .M0(\monitorStateMachine_1/N_12 ), 
    .OFX0(\FifoDataInxD[4] ));
  ADCStateMachine_2_SLICE_555 \ADCStateMachine_2/SLICE_555 ( 
    .D1(\ADCStateMachine_2/un7_nobxs_x ), .C1(\ADCdataxD[11] ), 
    .B1(\ADCStateMachine_2/un23_nobxs ), .A1(\ADCStateMachine_2/NoBxS ), 
    .C0(\ADCStateMachine_2/un30_nobxs ), .B0(\ADCStateMachine_2/un22_nobxs ), 
    .A0(\ADCStateMachine_2/NoBxS ), .F0(\ADCStateMachine_2/un23_nobxs ), 
    .F1(\ADCStateMachine_2.N_323_i ));
  cDVSResetStateMachine_1_SLICE_556 \cDVSResetStateMachine_1/SLICE_556 ( 
    .D1(\cDVSResetStateMachine_1/CountxDP[18] ), 
    .C1(\cDVSResetStateMachine_1/CountxDP[17] ), 
    .B1(\cDVSResetStateMachine_1/CountxDP[16] ), .A1(AERREQxSB), 
    .D0(\cDVSResetStateMachine_1/CountxDP[18] ), 
    .C0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_3_1 ), 
    .B0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_0_0_tz ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_0 ), 
    .F0(\cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ), 
    .F1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_0_0_tz ));
  uSynchronizerStateMachine_1_SLICE_557 
    \uSynchronizerStateMachine_1/SLICE_557 ( 
    .C1(\monitorStateMachine_1.StatexDP[0] ), .B1(ReadADCvaluexE), .A1(N_141), 
    .D0(ReadADCvaluexE), .C0(\uSynchronizerStateMachine_1/N_144 ), 
    .B0(\MonitorTimestampxD[9] ), .A0(\ADCregOutxD[9] ), .F0(N_136_i), 
    .F1(\uSynchronizerStateMachine_1/N_144 ));
  SLICE_558 SLICE_558( .C1(\monitorStateMachine_1.StatexDP[0] ), 
    .B1(ReadADCvaluexE), .A1(N_141), .D0(ReadADCvaluexE), 
    .C0(\uSynchronizerStateMachine_1/N_177 ), 
    .B0(\uSynchronizerStateMachine_1/N_142 ), .A0(\ADCregOutxD[12] ), 
    .M0(\monitorStateMachine_1.StatexDP[1] ), .CLK(ClockxC_c), 
    .F0(\FifoDataInxD[12] ), .Q0(\monitorStateMachine_1.StatexDP[0] ), 
    .F1(\uSynchronizerStateMachine_1/N_142 ));
  ADCStateMachine_2_SLICE_559 \ADCStateMachine_2/SLICE_559 ( 
    .D1(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9_1_0 ), 
    .C1(\ADCStateMachine_2/g2 ), .B1(\ADCStateMachine_2/g0_1_1 ), 
    .A1(\ADCStateMachine_2/DividerColxDN_1_sqmuxa_2 ), 
    .C0(\ADCStateMachine_2/StateColxDP[11] ), 
    .B0(\ADCStateMachine_2/StateRowxDP[1] ), .A0(\ADCStateMachine_2/g0_6_1 ), 
    .F0(\ADCStateMachine_2/g0_1_1 ), .F1(\ADCStateMachine_2/g0_1 ));
  ADCStateMachine_2_SLICE_560 \ADCStateMachine_2/SLICE_560 ( 
    .D1(\ADCStateMachine_2/un6_countcolxdp_0_N_2 ), 
    .C1(\ADCStateMachine_2/colmodexd4lto17_6 ), 
    .B1(\ADCStateMachine_2/colmodexd4lto17_5 ), 
    .A1(\ADCStateMachine_2/colmodexd4lto17_4 ), 
    .B0(\ADCStateMachine_2/CountColxDP[17] ), 
    .A0(\ADCStateMachine_2/CountColxDP[16] ), 
    .F0(\ADCStateMachine_2/un6_countcolxdp_0_N_2 ), 
    .F1(\ADCStateMachine_2.p_col.op_lt.op_lt.colmodexd4 ));
  ADCStateMachine_2_SLICE_561 \ADCStateMachine_2/SLICE_561 ( 
    .D1(\ADCStateMachine_2/g0_3_sx_0 ), .C1(\ADCStateMachine_2/g0_3_sx ), 
    .B1(\ADCStateMachine_2/g0_0_0_0 ), 
    .A1(\ADCStateMachine_2/DividerColxDN_1_sqmuxa_2 ), 
    .D0(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9 ), 
    .C0(\ADCStateMachine_2/un1_DividerColxDP ), 
    .B0(\ADCStateMachine_2/StateColxDP_cnv_1[17] ), 
    .A0(\ADCStateMachine_2/StateColxDP[5] ), 
    .F0(\ADCStateMachine_2/StateColxDP_RNO_0[17] ), 
    .F1(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9 ));
  ADCStateMachine_2_SLICE_562 \ADCStateMachine_2/SLICE_562 ( 
    .D1(\ADCStateMachine_2/un23_nobxs ), .C1(\ADCStateMachine_2/un7_nobxs ), 
    .B1(\ADCStateMachine_2/StateColxDP[9] ), .A1(\ADCStateMachine_2/N_2 ), 
    .D0(PA1xSIO_c), .C0(\DebugxSIO_c[11] ), 
    .B0(\ADCStateMachine_2/CDVSTestColMode1xSO_c_1 ), 
    .A0(\ADCStateMachine_2/StateColxDP[5] ), .F0(CDVSTestColMode1xSO_c), 
    .F1(\ADCStateMachine_2/CDVSTestColMode1xSO_c_1 ));
  SLICE_563 SLICE_563( .D1(\DebugxSIO_c[11] ), 
    .C1(\ADCStateMachine_2/un1_DividerColxDP_4 ), 
    .B1(\ADCStateMachine_2/g0_6_sx ), .A1(\ADCStateMachine_2/StateColxDP[0] ), 
    .D0(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .C0(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_8 ), 
    .B0(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_4_6_0 ), 
    .A0(\ADCStateMachine_2/StateColxDP_cnv_2[9] ), 
    .M0(\shiftRegister_1/StatexD[118] ), .CLK(PC2xSIO_c), 
    .F0(\ADCStateMachine_2/StateColxDP_RNO[9] ), .Q0(\DebugxSIO_c[11] ), 
    .F1(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_8 ));
  ADCStateMachine_2_SLICE_564 \ADCStateMachine_2/SLICE_564 ( 
    .C1(\ADCStateMachine_2/StateRowxDP[7] ), 
    .B1(\ADCStateMachine_2/StateRowxDP[2] ), 
    .A1(\ADCStateMachine_2/StateRowxDP[0] ), 
    .C0(\ADCStateMachine_2/StateRowxDP[6] ), 
    .B0(\ADCStateMachine_2/StateRowxDP[5] ), 
    .A0(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ), 
    .F0(\ADCStateMachine_2/N_266_1 ), 
    .F1(\ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ));
  ADCStateMachine_2_SLICE_565 \ADCStateMachine_2/SLICE_565 ( 
    .B1(\ADCStateMachine_2/StateRowxDP[4] ), 
    .A1(\ADCStateMachine_2.StateRowxDP[3] ), .D0(ADCreadxEBO_c), 
    .C0(\ADCStateMachine_2/StateRowxDP[11] ), 
    .B0(\ADCStateMachine_2/StateRowxDP[6] ), 
    .A0(\ADCStateMachine_2/StateRowxDP[5] ), .F0(ADCconvstxEBO_c), 
    .F1(ADCreadxEBO_c));
  ADCStateMachine_2_SLICE_566 \ADCStateMachine_2/SLICE_566 ( 
    .D1(\ADCStateMachine_2/un1_DividerColxDP_4 ), .C1(\ADCStateMachine_2/g1 ), 
    .B1(\ADCStateMachine_2/g0_0_3_sx ), 
    .A1(\ADCStateMachine_2/StateColxDP[6] ), .D0(\SRDataOutxD[119] ), 
    .C0(\ADCStateMachine_2/un15_usecxei ), 
    .B0(\ADCStateMachine_2/un6_usecxei ), 
    .A0(\ADCStateMachine_2/StateColxDP[8] ), .F0(\ADCStateMachine_2/g1 ), 
    .F1(\ADCStateMachine_2/g0_1_2 ));
  ADCStateMachine_2_SLICE_567 \ADCStateMachine_2/SLICE_567 ( 
    .D1(\ADCStateMachine_2/un1_DividerColxDP ), 
    .C1(\ADCStateMachine_2/g0_6_1 ), .B1(\ADCStateMachine_2/g0_1_0 ), 
    .A1(\ADCStateMachine_2/StateColxDP[5] ), 
    .D0(\ADCStateMachine_2/un1_DividerColxDP_3 ), 
    .C0(\ADCStateMachine_2/StateColxDP[3] ), 
    .B0(\ADCStateMachine_2/StateColxDP[1] ), .A0(\ADCStateMachine_2/N_4 ), 
    .F0(\ADCStateMachine_2/g0_1_0 ), .F1(\ADCStateMachine_2/g0_1_5_sx ));
  ADCStateMachine_2_SLICE_568 \ADCStateMachine_2/SLICE_568 ( 
    .D1(\ADCStateMachine_2/g2 ), .C1(\ADCStateMachine_2/g0_1_5_sx_0 ), 
    .B1(\ADCStateMachine_2/g0_1_5_sx ), 
    .A1(\ADCStateMachine_2/StateColxDN_2_sqmuxa_1 ), 
    .B0(\ADCStateMachine_2/un1_DividerColxDP_1 ), 
    .A0(\ADCStateMachine_2/StateColxDP[4] ), .F0(\ADCStateMachine_2/g2 ), 
    .F1(\ADCStateMachine_2/g0_1_5 ));
  ADCStateMachine_2_SLICE_569 \ADCStateMachine_2/SLICE_569 ( 
    .C1(\ADCStateMachine_2/un1_DividerColxDP ), 
    .B1(\ADCStateMachine_2/g0_6_1 ), .A1(\ADCStateMachine_2/StateColxDP[5] ), 
    .D0(PC0xSIO_c), .C0(\DebugxSIO_c[11] ), 
    .B0(\ADCStateMachine_2/StateRowxDP[11] ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), .F0(\ADCStateMachine_2/g0_6_1 ), 
    .F1(\ADCStateMachine_2/g0_6_sx ));
  ADCStateMachine_2_SLICE_570 \ADCStateMachine_2/SLICE_570 ( 
    .C1(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9_1_0 ), 
    .B1(\ADCStateMachine_2/g0_0_0_0 ), 
    .A1(\ADCStateMachine_2/DividerColxDN_1_sqmuxa_2 ), 
    .C0(\ADCStateMachine_2/un1_DividerColxDP_3 ), 
    .B0(\ADCStateMachine_2/StateColxDP[3] ), 
    .A0(\ADCStateMachine_2/StateColxDP[1] ), 
    .F0(\ADCStateMachine_2/DividerColxDN_1_sqmuxa_2 ), 
    .F1(\ADCStateMachine_2/g0_0_1 ));
  ADCStateMachine_2_SLICE_571 \ADCStateMachine_2/SLICE_571 ( 
    .D1(\DebugxSIO_c[11] ), 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0_sx ), 
    .B1(\ADCStateMachine_2/un1_DividerColxDP_4 ), 
    .A1(\ADCStateMachine_2/StateColxDP[0] ), 
    .C0(\ADCStateMachine_2/un1_DividerColxDP ), 
    .B0(\ADCStateMachine_2/StateColxDP[13] ), 
    .A0(\ADCStateMachine_2/StateColxDP[5] ), 
    .F0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0_sx ), 
    .F1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_0 ));
  ADCStateMachine_2_SLICE_572 \ADCStateMachine_2/SLICE_572 ( 
    .C1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1_sx ), 
    .B1(\ADCStateMachine_2/un1_DividerColxDP_1 ), 
    .A1(\ADCStateMachine_2/StateColxDP[4] ), 
    .C0(\ADCStateMachine_2/un1_DividerColxDP_3 ), 
    .B0(\ADCStateMachine_2/StateColxDP[3] ), 
    .A0(\ADCStateMachine_2/StateColxDP[1] ), 
    .F0(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1_sx ), 
    .F1(\ADCStateMachine_2/un1_StateColxDP_9_i_0_199_a2_1 ));
  cDVSResetStateMachine_1_SLICE_573 \cDVSResetStateMachine_1/SLICE_573 ( 
    .D1(\cDVSResetStateMachine_1/CountxDP[3] ), 
    .C1(\cDVSResetStateMachine_1/CountxDP[2] ), 
    .B1(\cDVSResetStateMachine_1/CountxDP[1] ), 
    .A1(\cDVSResetStateMachine_1/CountxDP[0] ), 
    .D0(\cDVSResetStateMachine_1/CountxDP[4] ), 
    .C0(\cDVSResetStateMachine_1/CountxDP[5] ), 
    .B0(\cDVSResetStateMachine_1/CountxDP[6] ), 
    .A0(\cDVSResetStateMachine_1/StatexDP_ns_0_o7_1_2[1] ), 
    .F0(\cDVSResetStateMachine_1/N_132_1 ), 
    .F1(\cDVSResetStateMachine_1/StatexDP_ns_0_o7_1_2[1] ));
  cDVSResetStateMachine_1_SLICE_574 \cDVSResetStateMachine_1/SLICE_574 ( 
    .D1(\cDVSResetStateMachine_1/StatexDP_ns_0_2_tz[1] ), 
    .C1(\cDVSResetStateMachine_1/N_126 ), 
    .B1(\cDVSResetStateMachine_1/CountxDP[11] ), 
    .A1(\cDVSResetStateMachine_1/CountxDP[10] ), 
    .C0(\cDVSResetStateMachine_1/StatexDP_ns_0_3_tz[1] ), 
    .B0(\cDVSResetStateMachine_1/CountxDP[9] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[8] ), 
    .F0(\cDVSResetStateMachine_1/StatexDP_ns_0_2_tz[1] ), 
    .F1(\cDVSResetStateMachine_1/StatexDP_ns_0_1_0[1] ));
  cDVSResetStateMachine_1_SLICE_575 \cDVSResetStateMachine_1/SLICE_575 ( 
    .D1(\cDVSResetStateMachine_1/CountxDP[11] ), 
    .C1(\cDVSResetStateMachine_1/CountxDP[10] ), 
    .B1(\cDVSResetStateMachine_1/CountxDP[8] ), 
    .A1(\cDVSResetStateMachine_1/CountxDP[6] ), 
    .D0(\cDVSResetStateMachine_1/statexdn15lt18 ), 
    .C0(\cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_9[1] ), 
    .B0(\cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_6[1] ), 
    .A0(\cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_5[1] ), 
    .F0(\cDVSResetStateMachine_1/N_134 ), 
    .F1(\cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_6[1] ));
  cDVSResetStateMachine_1_SLICE_576 \cDVSResetStateMachine_1/SLICE_576 ( 
    .B1(\cDVSResetStateMachine_1/CountxDP[5] ), 
    .A1(\cDVSResetStateMachine_1/CountxDP[4] ), 
    .D0(\cDVSResetStateMachine_1/un3lt6_3 ), 
    .C0(\cDVSResetStateMachine_1/StatexDP_ns_0_o7_1_2[1] ), 
    .B0(\cDVSResetStateMachine_1/CountxDP[7] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[6] ), 
    .F0(\cDVSResetStateMachine_1/StatexDP_ns_0_3_tz[1] ), 
    .F1(\cDVSResetStateMachine_1/un3lt6_3 ));
  cDVSResetStateMachine_1_SLICE_577 \cDVSResetStateMachine_1/SLICE_577 ( 
    .B1(\cDVSResetStateMachine_1.StatexDP[1] ), 
    .A1(\cDVSResetStateMachine_1.StatexDP[0] ), 
    .D0(\cDVSResetStateMachine_1/CountxDP[17] ), 
    .C0(\cDVSResetStateMachine_1/CountxDP[16] ), 
    .B0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_0 ), .A0(AERREQxSB), 
    .F0(\cDVSResetStateMachine_1/N_142 ), 
    .F1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_0 ));
  cDVSResetStateMachine_1_SLICE_578 \cDVSResetStateMachine_1/SLICE_578 ( 
    .B1(\cDVSResetStateMachine_1/CountxDP[9] ), 
    .A1(\cDVSResetStateMachine_1/CountxDP[8] ), 
    .D0(\cDVSResetStateMachine_1/un3lto15_2 ), 
    .C0(\cDVSResetStateMachine_1/CountxDP[11] ), 
    .B0(\cDVSResetStateMachine_1/CountxDP[10] ), 
    .A0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a1_0 ), 
    .F0(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_3_1 ), 
    .F1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a1_0 ));
  cDVSResetStateMachine_1_SLICE_579 \cDVSResetStateMachine_1/SLICE_579 ( 
    .D1(\cDVSResetStateMachine_1/CountxDP[15] ), 
    .C1(\cDVSResetStateMachine_1/CountxDP[14] ), 
    .B1(\cDVSResetStateMachine_1/CountxDP[13] ), 
    .A1(\cDVSResetStateMachine_1/CountxDP[12] ), 
    .D0(\cDVSResetStateMachine_1/un3lt6_3 ), 
    .C0(\cDVSResetStateMachine_1/N_126 ), 
    .B0(\cDVSResetStateMachine_1/CountxDP[18] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[9] ), 
    .F0(\cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_9[1] ), 
    .F1(\cDVSResetStateMachine_1/N_126 ));
  monitorStateMachine_1_SLICE_580 \monitorStateMachine_1/SLICE_580 ( 
    .C1(\monitorStateMachine_1.StatexDP[8] ), 
    .B1(\monitorStateMachine_1.StatexDP[2] ), 
    .A1(\monitorStateMachine_1.StatexDP[1] ), 
    .D0(\monitorStateMachine_1/StatexDP_ns[2] ), 
    .C0(\monitorStateMachine_1/StatexDP[9] ), 
    .B0(\monitorStateMachine_1.StatexDP[0] ), .A0(N_141), 
    .F0(\monitorStateMachine_1.N_256_i ), .F1(N_141));
  monitorStateMachine_1_SLICE_581 \monitorStateMachine_1/SLICE_581 ( 
    .D1(\monitorStateMachine_1/TimestampOverflowxDP[7] ), 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP[6] ), 
    .B1(\monitorStateMachine_1/TimestampOverflowxDP[5] ), 
    .A1(\monitorStateMachine_1/TimestampOverflowxDP[4] ), 
    .D0(\monitorStateMachine_1/StatexDP_ns_i_0_a2_11[3] ), 
    .C0(\monitorStateMachine_1/StatexDP_ns_i_0_a2_10[3] ), 
    .B0(\monitorStateMachine_1/StatexDP_ns_i_0_a2_9[3] ), 
    .A0(\monitorStateMachine_1/StatexDP_ns_i_0_a2_8[3] ), 
    .F0(\monitorStateMachine_1/StatexDP_ns_i_0_a2[3] ), 
    .F1(\monitorStateMachine_1/StatexDP_ns_i_0_a2_11[3] ));
  monitorStateMachine_1_SLICE_582 \monitorStateMachine_1/SLICE_582 ( 
    .D1(\monitorStateMachine_1/StatexDP[9] ), .C1(FifoFullxS), .B1(AERREQxSB), 
    .A1(ADCvalueReadyxS), .D0(\monitorStateMachine_1/TimestampResetxDP ), 
    .C0(\monitorStateMachine_1/StatexDP_ns_0_a2_1_3[0] ), 
    .B0(\monitorStateMachine_1/CountxDP ), .A0(N_141), 
    .F0(\monitorStateMachine_1/StatexDP_ns_0_a2_1_5[0] ), 
    .F1(\monitorStateMachine_1/StatexDP_ns_0_a2_1_3[0] ));
  SLICE_583 SLICE_583( .B1(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .A1(LED2xSO_c), .D0(\uSynchronizerStateMachine_1.StatexDP[2] ), 
    .C0(\uSynchronizerStateMachine_1.N_209 ), 
    .B0(\monitorStateMachine_1/TimestampResetxDP ), 
    .A0(\monitorStateMachine_1/StatexDP[6] ), 
    .F0(\monitorStateMachine_1/TimestampResetxDN_0_a2_0_0 ), 
    .F1(\uSynchronizerStateMachine_1.N_209 ));
  monitorStateMachine_1_SLICE_584 \monitorStateMachine_1/SLICE_584 ( 
    .D1(\monitorStateMachine_1/un12_aerreqxsblto6_1 ), 
    .C1(\monitorStateMachine_1/CountxDP[6] ), 
    .B1(\monitorStateMachine_1/CountxDP[5] ), 
    .A1(\monitorStateMachine_1/CountxDP[4] ), 
    .D0(\monitorStateMachine_1/CountxDP[3] ), 
    .C0(\monitorStateMachine_1/CountxDP[2] ), 
    .B0(\monitorStateMachine_1/CountxDP[1] ), 
    .A0(\monitorStateMachine_1/CountxDP[0] ), 
    .F0(\monitorStateMachine_1/un12_aerreqxsblto6_1 ), 
    .F1(\monitorStateMachine_1/un12_aerreqxsblt7 ));
  uSynchronizerStateMachine_1_SLICE_585 
    \uSynchronizerStateMachine_1/SLICE_585 ( 
    .D1(\uSynchronizerStateMachine_1/ResetTimestampxSBO_i_0_o2_2_1 ), 
    .C1(\uSynchronizerStateMachine_1.CounterxDP[13] ), 
    .B1(\uSynchronizerStateMachine_1.CounterxDP[12] ), 
    .A1(\uSynchronizerStateMachine_1.CounterxDP[11] ), .D0(LED2xSO_c), 
    .C0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .B0(\uSynchronizerStateMachine_1/N_110 ), 
    .A0(\uSynchronizerStateMachine_1.StatexDP[2] ), 
    .F0(ResetTimestampxSBO_i_0_o2_2_RNICSNV), 
    .F1(\uSynchronizerStateMachine_1/N_110 ));
  uSynchronizerStateMachine_1_SLICE_586 
    \uSynchronizerStateMachine_1/SLICE_586 ( 
    .B1(\uSynchronizerStateMachine_1.StatexDP[5] ), .A1(Sync1xABI_c), 
    .D0(\uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_8 ), 
    .C0(\uSynchronizerStateMachine_1/SyncInxABI_i_m ), 
    .B0(\uSynchronizerStateMachine_1.CounterxDP[12] ), 
    .A0(\uSynchronizerStateMachine_1.CounterxDP[11] ), .F0(SynchOutxSBO_c), 
    .F1(\uSynchronizerStateMachine_1/SyncInxABI_i_m ));
  SLICE_587 SLICE_587( .D1(\monitorStateMachine_1.StatexDP[8] ), 
    .C1(\monitorStateMachine_1.StatexDP[2] ), 
    .B1(\monitorStateMachine_1.StatexDP[1] ), .A1(ReadADCvaluexE), 
    .D0(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[0] ), 
    .C0(\uSynchronizerStateMachine_1/N_189 ), 
    .B0(\uSynchronizerStateMachine_1/N_142 ), .A0(\AERMonitorAddressxDI_c[0] ), 
    .M0(\monitorStateMachine_1.StatexDP[2] ), .CLK(ClockxC_c), .F0(N_66_i), 
    .Q0(ReadADCvaluexE), .F1(\uSynchronizerStateMachine_1/N_189 ));
  uSynchronizerStateMachine_1_SLICE_588 
    \uSynchronizerStateMachine_1/SLICE_588 ( .D1(ReadADCvaluexE), .C1(N_141), 
    .B1(\MonitorTimestampxD[1] ), .A1(\ADCregOutxD[1] ), 
    .D0(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[1] ), 
    .C0(\uSynchronizerStateMachine_1/N_189 ), 
    .B0(\uSynchronizerStateMachine_1/N_142 ), .A0(\AERMonitorAddressxDI_c[1] ), 
    .F0(N_68_i), .F1(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[1] ));
  uSynchronizerStateMachine_1_SLICE_589 
    \uSynchronizerStateMachine_1/SLICE_589 ( .D1(ReadADCvaluexE), .C1(N_141), 
    .B1(\MonitorTimestampxD[2] ), .A1(\ADCregOutxD[2] ), 
    .D0(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[2] ), 
    .C0(\uSynchronizerStateMachine_1/N_189 ), 
    .B0(\uSynchronizerStateMachine_1/N_142 ), .A0(\AERMonitorAddressxDI_c[2] ), 
    .F0(N_70_i), .F1(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[2] ));
  uSynchronizerStateMachine_1_SLICE_590 
    \uSynchronizerStateMachine_1/SLICE_590 ( .D1(ReadADCvaluexE), .C1(N_141), 
    .B1(\MonitorTimestampxD[3] ), .A1(\ADCregOutxD[3] ), 
    .D0(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[3] ), 
    .C0(\uSynchronizerStateMachine_1/N_189 ), 
    .B0(\uSynchronizerStateMachine_1/N_142 ), .A0(\AERMonitorAddressxDI_c[3] ), 
    .F0(N_72_i), .F1(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[3] ));
  uSynchronizerStateMachine_1_SLICE_591 
    \uSynchronizerStateMachine_1/SLICE_591 ( .D1(ReadADCvaluexE), .C1(N_141), 
    .B1(\MonitorTimestampxD[5] ), .A1(\ADCregOutxD[5] ), 
    .D0(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[5] ), 
    .C0(\uSynchronizerStateMachine_1/N_189 ), 
    .B0(\uSynchronizerStateMachine_1/N_142 ), .A0(\AERMonitorAddressxDI_c[5] ), 
    .F0(N_134_i), .F1(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[5] ));
  uSynchronizerStateMachine_1_SLICE_592 
    \uSynchronizerStateMachine_1/SLICE_592 ( .D1(ReadADCvaluexE), .C1(N_141), 
    .B1(\MonitorTimestampxD[7] ), .A1(\ADCregOutxD[7] ), 
    .D0(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[7] ), 
    .C0(\uSynchronizerStateMachine_1/N_189 ), 
    .B0(\uSynchronizerStateMachine_1/N_142 ), .A0(\AERMonitorAddressxDI_c[7] ), 
    .F0(N_135_i), .F1(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[7] ));
  uSynchronizerStateMachine_1_SLICE_593 
    \uSynchronizerStateMachine_1/SLICE_593 ( 
    .D1(\uSynchronizerStateMachine_1/dividerxdn10lto6_1 ), 
    .C1(\uSynchronizerStateMachine_1/DividerxDP[6] ), 
    .B1(\uSynchronizerStateMachine_1/DividerxDP[5] ), 
    .A1(\uSynchronizerStateMachine_1/DividerxDP[4] ), 
    .D0(\uSynchronizerStateMachine_1/dividerxdn10 ), 
    .C0(\uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] ), 
    .B0(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .A0(\uSynchronizerStateMachine_1/N_195 ), 
    .F0(\uSynchronizerStateMachine_1/CounterxDPe ), 
    .F1(\uSynchronizerStateMachine_1/dividerxdn10 ));
  uSynchronizerStateMachine_1_SLICE_594 
    \uSynchronizerStateMachine_1/SLICE_594 ( 
    .D1(\uSynchronizerStateMachine_1/CounterxDP[10] ), 
    .C1(\uSynchronizerStateMachine_1/CounterxDP[9] ), 
    .B1(\uSynchronizerStateMachine_1.CounterxDP[8] ), 
    .A1(\uSynchronizerStateMachine_1.CounterxDP[7] ), 
    .D0(\uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_7 ), 
    .C0(\uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_2 ), 
    .B0(\uSynchronizerStateMachine_1/N_195 ), 
    .A0(\uSynchronizerStateMachine_1.CounterxDP[13] ), 
    .F0(\uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_8 ), 
    .F1(\uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_7 ));
  uSynchronizerStateMachine_1_SLICE_595 
    \uSynchronizerStateMachine_1/SLICE_595 ( .D1(LED2xSO_c), .C1(PA7xSIO_c), 
    .B1(\uSynchronizerStateMachine_1/CounterxDP[10] ), 
    .A1(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .D0(\uSynchronizerStateMachine_1/un1_StatexDP_7_0_78_i_a3_4 ), 
    .C0(\uSynchronizerStateMachine_1/un1_StatexDP_7_0_78_i_a3_3 ), 
    .B0(\uSynchronizerStateMachine_1.CounterxDP[13] ), 
    .A0(\uSynchronizerStateMachine_1.CounterxDP[11] ), 
    .F0(\uSynchronizerStateMachine_1/un1_StatexDP_7_0_78_i_a3_6 ), 
    .F1(\uSynchronizerStateMachine_1/un1_StatexDP_7_0_78_i_a3_3 ));
  uSynchronizerStateMachine_1_SLICE_596 
    \uSynchronizerStateMachine_1/SLICE_596 ( 
    .C1(\uSynchronizerStateMachine_1/CounterxDP[3] ), 
    .B1(\uSynchronizerStateMachine_1/CounterxDP[2] ), 
    .A1(\uSynchronizerStateMachine_1/CounterxDP[1] ), 
    .D0(\uSynchronizerStateMachine_1/syncoutxsbo4lt5 ), 
    .C0(\uSynchronizerStateMachine_1/CounterxDP[6] ), 
    .B0(\uSynchronizerStateMachine_1/CounterxDP[5] ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP[4] ), 
    .F0(\uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_2 ), 
    .F1(\uSynchronizerStateMachine_1/syncoutxsbo4lt5 ));
  uSynchronizerStateMachine_1_SLICE_597 
    \uSynchronizerStateMachine_1/SLICE_597 ( 
    .D1(\uSynchronizerStateMachine_1.p_memless.op_gt.op_gt.counterxdn5lt7 ), 
    .C1(\uSynchronizerStateMachine_1.ResetTimestampxSBO_i_0_a2_1_1_0 ), 
    .B1(\uSynchronizerStateMachine_1.CounterxDP[8] ), 
    .A1(\uSynchronizerStateMachine_1.CounterxDP[7] ), 
    .D0(\uSynchronizerStateMachine_1/counterxdn5lt6 ), 
    .C0(\uSynchronizerStateMachine_1/CounterxDP[6] ), 
    .B0(\uSynchronizerStateMachine_1/CounterxDP[5] ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP[4] ), 
    .F0(\uSynchronizerStateMachine_1.p_memless.op_gt.op_gt.counterxdn5lt7 ), 
    .F1(\uSynchronizerStateMachine_1/ResetTimestampxSBO_i_0_o2_2_1 ));
  uSynchronizerStateMachine_1_SLICE_598 
    \uSynchronizerStateMachine_1/SLICE_598 ( 
    .B1(\uSynchronizerStateMachine_1/CounterxDP[3] ), 
    .A1(\uSynchronizerStateMachine_1/CounterxDP[2] ), 
    .D0(\uSynchronizerStateMachine_1/counterxdn5lto3_1 ), 
    .C0(\uSynchronizerStateMachine_1/CounterxDP[4] ), 
    .B0(\uSynchronizerStateMachine_1/CounterxDP[1] ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP[0] ), 
    .F0(\uSynchronizerStateMachine_1/counterxdn21lt6 ), 
    .F1(\uSynchronizerStateMachine_1/counterxdn5lto3_1 ));
  ADCStateMachine_2_SLICE_599 \ADCStateMachine_2/SLICE_599 ( 
    .D1(\SRDataOutxD[104] ), .C1(\DebugxSIO_c[7] ), 
    .B1(\ADCStateMachine_2/DividerColxDP[18] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[17] ), .D0(\SRDataOutxD[104] ), 
    .C0(\DebugxSIO_c[7] ), .B0(\ADCStateMachine_2/DividerColxDP[18] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[17] ), 
    .F0(\ADCStateMachine_2/un1_DividerColxDP_11_df17 ), 
    .F1(\ADCStateMachine_2/un1_DividerColxDP_11_lt17 ));
  ADCStateMachine_2_SLICE_600 \ADCStateMachine_2/SLICE_600 ( 
    .D1(\SRDataOutxD[106] ), .C1(\SRDataOutxD[105] ), 
    .B1(\ADCStateMachine_2/DividerColxDP[20] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[19] ), .D0(\SRDataOutxD[106] ), 
    .C0(\SRDataOutxD[105] ), .B0(\ADCStateMachine_2/DividerColxDP[20] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[19] ), 
    .F0(\ADCStateMachine_2/un1_DividerColxDP_11_df19 ), 
    .F1(\ADCStateMachine_2/un1_DividerColxDP_11_lt19 ));
  ADCStateMachine_2_SLICE_601 \ADCStateMachine_2/SLICE_601 ( 
    .D1(\SRDataOutxD[108] ), .C1(\SRDataOutxD[107] ), 
    .B1(\ADCStateMachine_2/DividerColxDP[22] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[21] ), .D0(\SRDataOutxD[108] ), 
    .C0(\SRDataOutxD[107] ), .B0(\ADCStateMachine_2/DividerColxDP[22] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[21] ), 
    .F0(\ADCStateMachine_2/un1_DividerColxDP_11_df21 ), 
    .F1(\ADCStateMachine_2/un1_DividerColxDP_11_lt21 ));
  ADCStateMachine_2_SLICE_602 \ADCStateMachine_2/SLICE_602 ( 
    .D1(\SRDataOutxD[110] ), .C1(\SRDataOutxD[109] ), 
    .B1(\ADCStateMachine_2/DividerColxDP[24] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[23] ), .D0(\SRDataOutxD[110] ), 
    .C0(\SRDataOutxD[109] ), .B0(\ADCStateMachine_2/DividerColxDP[24] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[23] ), 
    .F0(\ADCStateMachine_2/un1_DividerColxDP_11_df23 ), 
    .F1(\ADCStateMachine_2/un1_DividerColxDP_11_lt23 ));
  ADCStateMachine_2_SLICE_603 \ADCStateMachine_2/SLICE_603 ( 
    .D1(\ADCStateMachine_2/un1_DividerColxDP_1 ), 
    .C1(\ADCStateMachine_2/StateRowxDP[1] ), 
    .B1(\ADCStateMachine_2/StateColxDP[11] ), 
    .A1(\ADCStateMachine_2/StateColxDP[4] ), 
    .D0(\ADCStateMachine_2/un1_DividerColxDP_1 ), 
    .C0(\ADCStateMachine_2/StateRowxDP[1] ), 
    .B0(\ADCStateMachine_2/StateColxDP[11] ), 
    .A0(\ADCStateMachine_2/StateColxDP[4] ), 
    .M0(\ADCStateMachine_2/StateColxDN[11] ), 
    .CE(\ADCStateMachine_2/ClockxC_RNIU9VN5 ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_4_6_0 ), 
    .Q0(\ADCStateMachine_2/StateColxDP[11] ), 
    .F1(\ADCStateMachine_2/g0_0_0_0 ));
  ADCStateMachine_2_SLICE_604 \ADCStateMachine_2/SLICE_604 ( 
    .D1(\ADCStateMachine_2/un1_DividerColxDP ), 
    .C1(\ADCStateMachine_2/StateRowxDP[1] ), 
    .B1(\ADCStateMachine_2/StateColxDP[13] ), 
    .A1(\ADCStateMachine_2/StateColxDP[9] ), 
    .D0(\ADCStateMachine_2/un1_DividerColxDP ), 
    .C0(\ADCStateMachine_2/StateRowxDP[1] ), 
    .B0(\ADCStateMachine_2/StateColxDP[13] ), 
    .A0(\ADCStateMachine_2/StateColxDP[9] ), 
    .M0(\ADCStateMachine_2/StateColxDP[10] ), 
    .CE(\ADCStateMachine_2/StateColxDP_RNO[9] ), .LSR(ADCsmRstxE_i), 
    .CLK(IfClockxCI_c), 
    .F0(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_9_1_0 ), 
    .Q0(\ADCStateMachine_2/StateColxDP[9] ), 
    .F1(\ADCStateMachine_2/g0_3_sx_0 ));
  ADCStateMachine_2_SLICE_605 \ADCStateMachine_2/SLICE_605 ( 
    .D1(\ADCStateMachine_2/un1_DividerColxDP_4 ), 
    .C1(\ADCStateMachine_2/un1_DividerColxDP_2 ), 
    .B1(\ADCStateMachine_2/StateColxDP[6] ), 
    .A1(\ADCStateMachine_2/StateColxDP[2] ), 
    .D0(\ADCStateMachine_2/un1_DividerColxDP_4 ), 
    .C0(\ADCStateMachine_2/un1_DividerColxDP_2 ), 
    .B0(\ADCStateMachine_2/StateColxDP[6] ), 
    .A0(\ADCStateMachine_2/StateColxDP[2] ), .F0(\ADCStateMachine_2/g0_3_sx ), 
    .F1(\ADCStateMachine_2/g0_1_5_sx_0 ));
  ADCStateMachine_2_SLICE_606 \ADCStateMachine_2/SLICE_606 ( 
    .C1(\SRDataOutxD[111] ), .B1(\ADCStateMachine_2/DividerColxDP[26] ), 
    .A1(\ADCStateMachine_2/DividerColxDP[25] ), .C0(\SRDataOutxD[111] ), 
    .B0(\ADCStateMachine_2/DividerColxDP[26] ), 
    .A0(\ADCStateMachine_2/DividerColxDP[25] ), 
    .F0(\ADCStateMachine_2/un1_DividerColxDP_11_df25 ), 
    .F1(\ADCStateMachine_2/un1_DividerColxDP_11_lt25 ));
  ADCStateMachine_2_SLICE_607 \ADCStateMachine_2/SLICE_607 ( 
    .C1(\DebugxSIO_c[11] ), .B1(\ADCStateMachine_2/un1_DividerColxDP_4 ), 
    .A1(\ADCStateMachine_2/StateColxDP[0] ), .D0(\DebugxSIO_c[11] ), 
    .C0(\ADCStateMachine_2/un1_DividerColxDP_4 ), 
    .B0(\ADCStateMachine_2/StateColxDP[17] ), 
    .A0(\ADCStateMachine_2/StateColxDP[0] ), .F0(\ADCStateMachine_2/N_347 ), 
    .F1(\ADCStateMachine_2/StateColxDN_2_sqmuxa_1 ));
  ADCStateMachine_2_SLICE_608 \ADCStateMachine_2/SLICE_608 ( .C1(PC0xSIO_c), 
    .B1(\DebugxSIO_c[11] ), .A1(\ADCStateMachine_2/StateRowxDP[11] ), 
    .C0(PC0xSIO_c), .B0(\DebugxSIO_c[11] ), 
    .A0(\ADCStateMachine_2/StateRowxDP[11] ), 
    .F0(\ADCStateMachine_2/un1_statecolxdn9_1 ), 
    .F1(\ADCStateMachine_2/StateColxDN_0_sqmuxa_3 ));
  SLICE_609 SLICE_609( .D1(\monitorStateMachine_1.StatexDP[8] ), 
    .C1(\monitorStateMachine_1.StatexDP[2] ), 
    .B1(\monitorStateMachine_1.StatexDP[1] ), .A1(\MonitorTimestampxD[12] ), 
    .D0(\monitorStateMachine_1.StatexDP[8] ), 
    .C0(\monitorStateMachine_1.StatexDP[2] ), 
    .B0(\monitorStateMachine_1.StatexDP[1] ), 
    .A0(\monitorStateMachine_1.StatexDP[0] ), 
    .F0(\monitorStateMachine_1/N_12 ), 
    .F1(\uSynchronizerStateMachine_1/N_177 ));
  monitorStateMachine_1_SLICE_610 \monitorStateMachine_1/SLICE_610 ( 
    .D1(\uSynchronizerStateMachine_1.CounterxDP[13] ), 
    .C1(\uSynchronizerStateMachine_1.CounterxDP[11] ), 
    .B1(\uSynchronizerStateMachine_1.CounterxDP[7] ), 
    .A1(\monitorStateMachine_1/TimestampResetxDP ), 
    .C0(\uSynchronizerStateMachine_1.CounterxDP[13] ), 
    .B0(\uSynchronizerStateMachine_1.CounterxDP[11] ), 
    .A0(\monitorStateMachine_1/TimestampResetxDP ), 
    .F0(\monitorStateMachine_1/TimestampResetxDN_0_a2_a1_0_0 ), 
    .F1(\monitorStateMachine_1/TimestampResetxDN_0_a2_a0_1 ));
  uEventCounter_SLICE_611 \uEventCounter/SLICE_611 ( 
    .B1(\fifoStatemachine_1.StatexDP[0] ), .A1(ECResetEarlyPaketTimerxS), 
    .C0(\uEventCounter/CountxDP[8] ), .B0(\uEventCounter/CountxDP[7] ), 
    .A0(\uEventCounter/CountxDP[2] ), .F0(\uEventCounter/countxdn15_4 ), 
    .F1(\uEventCounter/CountxDPe ));
  ADCStateMachine_2_SLICE_612 \ADCStateMachine_2/SLICE_612 ( 
    .D1(\ADCStateMachine_2/un1_StateColxDP_9_2 ), 
    .C1(\ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_8 ), 
    .B1(\ADCStateMachine_2/g0_0_1 ), .A1(\ADCStateMachine_2/ClockxC ), 
    .B0(\ADCStateMachine_2/StateRowxDP[10] ), 
    .A0(\ADCStateMachine_2/StateRowxDP[9] ), .M0(\ADCStateMachine_2/ClockxC ), 
    .LSR(ADCsmRstxE_i), .CLK(IfClockxCI_c), .F0(ADCwordWritexE_i_a2), 
    .Q0(\ADCStateMachine_2/ClockxC ), 
    .F1(\ADCStateMachine_2/ClockxC_RNIU9VN5 ));
  fifoStatemachine_1_SLICE_613 \fifoStatemachine_1/SLICE_613 ( 
    .B1(\fifoStatemachine_1.StatexDP[0] ), .A1(FifoReadxE), 
    .B0(\fifoStatemachine_1.StatexDP[0] ), .A0(FifoReadxE), 
    .F0(FX2FifoWritexEBO_c), .F1(FX2FifoPktEndxSBO_c));
  monitorStateMachine_1_SLICE_614 \monitorStateMachine_1/SLICE_614 ( 
    .D1(\monitorStateMachine_1/StatexDP_0[5] ), .C1(N_141), .B1(FifoFullxS), 
    .A1(AERREQxSB), .C0(\monitorStateMachine_1/StatexDP[10] ), 
    .B0(\monitorStateMachine_1/StatexDP_0[5] ), 
    .A0(\monitorStateMachine_1/CountxDP ), .F0(FifoWritexE), 
    .F1(\monitorStateMachine_1/N_157 ));
  monitorStateMachine_1_SLICE_615 \monitorStateMachine_1/SLICE_615 ( 
    .C1(AERREQxSB), .B1(\AERMonitorAddressxDI_c[8] ), .A1(ADCvalueReadyxS), 
    .C0(\monitorStateMachine_1/TimestampResetxDP ), 
    .B0(\monitorStateMachine_1/StatexDP[10] ), .A0(FifoFullxS), 
    .F0(\monitorStateMachine_1/N_112 ), 
    .F1(\monitorStateMachine_1/TimestampRegWritexEO_i_0_a2_0 ));
  uSynchronizerStateMachine_1_SLICE_616 
    \uSynchronizerStateMachine_1/SLICE_616 ( 
    .D1(\uSynchronizerStateMachine_1.SyncInxSB ), 
    .C1(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .B1(\uSynchronizerStateMachine_1.StatexDP[2] ), .A1(PA7xSIO_c), 
    .B0(\uSynchronizerStateMachine_1/CounterxDP[10] ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP[9] ), 
    .F0(\uSynchronizerStateMachine_1.ResetTimestampxSBO_i_0_a2_1_1_0 ), 
    .F1(\uSynchronizerStateMachine_1/N_199 ));
  SLICE_617 SLICE_617( .C1(\ADCdataxD[11] ), 
    .B1(\ADCStateMachine_2.p_col.op_lt.op_lt.colmodexd4 ), 
    .A1(\ADCStateMachine_2.StateRowxDP[3] ), .D0(\ADCdataxD[11] ), 
    .C0(\ADCStateMachine_2/un23_nobxs ), .B0(\ADCStateMachine_2/un7_nobxs ), 
    .A0(\ADCStateMachine_2/RegisterWritexEO_i_0 ), 
    .F0(\ADCStateMachine_2.N_321_i ), .F1(\uADCRegister/StatexDP_en[12] ));
  SLICE_618 SLICE_618( .C1(\ADCStateMachine_2/StateRowxDP[1] ), 
    .B1(\ADCStateMachine_2/StateColxDP[9] ), .A1(\ADCStateMachine_2/ClockxC ), 
    .C0(\SRDataOutxD[119] ), .B0(\ADCStateMachine_2/un15_usecxei ), 
    .A0(\ADCStateMachine_2/un6_usecxei ), .M0(\shiftRegister_1/SRoutxD ), 
    .CLK(PC2xSIO_c), .F0(\ADCStateMachine_2/un15_usecxei_cry_16_0_RNIHVDP ), 
    .Q0(\SRDataOutxD[119] ), .F1(\ADCStateMachine_2/StateColxDP_cnv_0[9] ));
  uSynchronizerStateMachine_1_SLICE_619 
    \uSynchronizerStateMachine_1/SLICE_619 ( 
    .C1(\uSynchronizerStateMachine_1/dividerxdn10 ), 
    .B1(\uSynchronizerStateMachine_1.StatexDP[5] ), 
    .A1(\uSynchronizerStateMachine_1.StatexDP[2] ), 
    .D0(\uSynchronizerStateMachine_1/DividerxDP[3] ), 
    .C0(\uSynchronizerStateMachine_1/DividerxDP[2] ), 
    .B0(\uSynchronizerStateMachine_1/DividerxDP[1] ), 
    .A0(\uSynchronizerStateMachine_1/DividerxDP[0] ), 
    .F0(\uSynchronizerStateMachine_1/dividerxdn10lto6_1 ), .F1(IncxS));
  monitorStateMachine_1_SLICE_620 \monitorStateMachine_1/SLICE_620 ( 
    .D1(\monitorStateMachine_1/TimestampOverflowxDP[13] ), 
    .C1(\monitorStateMachine_1/TimestampOverflowxDP[12] ), 
    .B1(\monitorStateMachine_1/TimestampOverflowxDP[9] ), 
    .A1(\monitorStateMachine_1/TimestampOverflowxDP[8] ), 
    .D0(\monitorStateMachine_1/TimestampOverflowxDP[3] ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP[2] ), 
    .B0(\monitorStateMachine_1/TimestampOverflowxDP[1] ), 
    .A0(\monitorStateMachine_1/TimestampOverflowxDP[0] ), 
    .F0(\monitorStateMachine_1/StatexDP_ns_i_0_a2_10[3] ), 
    .F1(\monitorStateMachine_1/StatexDP_ns_i_0_a2_9[3] ));
  ADCStateMachine_2_SLICE_621 \ADCStateMachine_2/SLICE_621 ( 
    .B1(\ADCStateMachine_2.p_col.op_lt.op_lt.colmodexd4 ), 
    .A1(\ADCStateMachine_2/StateColxDP[13] ), 
    .B0(\ADCStateMachine_2/CountColxDP[13] ), 
    .A0(\ADCStateMachine_2/CountColxDP[12] ), 
    .F0(\ADCStateMachine_2/colmodexd4lto17_4 ), .F1(\ADCStateMachine_2/N_2 ));
  ADCStateMachine_2_SLICE_622 \ADCStateMachine_2/SLICE_622 ( 
    .D1(\ADCStateMachine_2/CountColxDP[15] ), 
    .C1(\ADCStateMachine_2/CountColxDP[14] ), 
    .B1(\ADCStateMachine_2/CountColxDP[7] ), 
    .A1(\ADCStateMachine_2/CountColxDP[6] ), 
    .D0(\ADCStateMachine_2/CountColxDP[11] ), 
    .C0(\ADCStateMachine_2/CountColxDP[10] ), 
    .B0(\ADCStateMachine_2/CountColxDP[9] ), 
    .A0(\ADCStateMachine_2/CountColxDP[8] ), 
    .F0(\ADCStateMachine_2/colmodexd4lto17_6 ), 
    .F1(\ADCStateMachine_2/colmodexd4lto17_5 ));
  ADCStateMachine_2_SLICE_623 \ADCStateMachine_2/SLICE_623 ( 
    .B1(\ADCStateMachine_2/StateColxDP[11] ), 
    .A1(\ADCStateMachine_2/StateColxDP[9] ), 
    .B0(\ADCStateMachine_2/StateRowxDP[11] ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), .F0(LED3xSO_c), 
    .F1(\ADCStateMachine_2/un11_doreadxs ));
  monitorStateMachine_1_SLICE_624 \monitorStateMachine_1/SLICE_624 ( 
    .B1(\monitorStateMachine_1/CountxDP ), .A1(AERREQxSB), 
    .D0(\monitorStateMachine_1/StatexDP_0[5] ), 
    .C0(\monitorStateMachine_1/CountxDP ), .B0(\DebugxSIO_in[14] ), 
    .A0(AERREQxSB), .F0(AERMonitorACKxSBO_c), 
    .F1(\monitorStateMachine_1/N_130 ));
  cDVSResetStateMachine_1_SLICE_625 \cDVSResetStateMachine_1/SLICE_625 ( 
    .C1(\cDVSResetStateMachine_1/CountxDP[18] ), 
    .B1(\cDVSResetStateMachine_1/CountxDP[9] ), 
    .A1(\cDVSResetStateMachine_1/CountxDP[7] ), 
    .D0(\cDVSResetStateMachine_1/CountxDP[15] ), 
    .C0(\cDVSResetStateMachine_1/CountxDP[14] ), 
    .B0(\cDVSResetStateMachine_1/CountxDP[13] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[12] ), 
    .F0(\cDVSResetStateMachine_1/un3lto15_2 ), 
    .F1(\cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0_1 ));
  ADCStateMachine_2_SLICE_626 \ADCStateMachine_2/SLICE_626 ( 
    .B1(\ADCStateMachine_2/StateRowxDP[11] ), .A1(\ADCStateMachine_2/ClockxC ), 
    .A0(\ADCStateMachine_2/StateColxDP[17] ), 
    .F0(\ADCStateMachine_2/StateColxDP_i_0[17] ), .F1(ADCclockxCO_c));
  cDVSResetStateMachine_1_SLICE_627 \cDVSResetStateMachine_1/SLICE_627 ( 
    .D1(\cDVSResetStateMachine_1.StatexDP[1] ), 
    .C1(\cDVSResetStateMachine_1/CountxDP[17] ), 
    .B1(\cDVSResetStateMachine_1/CountxDP[16] ), 
    .A1(\cDVSResetStateMachine_1/CountxDP[7] ), 
    .D0(\cDVSResetStateMachine_1/CountxDP[3] ), 
    .C0(\cDVSResetStateMachine_1/CountxDP[2] ), 
    .B0(\cDVSResetStateMachine_1/CountxDP[1] ), 
    .A0(\cDVSResetStateMachine_1/CountxDP[0] ), 
    .F0(\cDVSResetStateMachine_1/statexdn15lt18 ), 
    .F1(\cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_5[1] ));
  SLICE_628 SLICE_628( .D1(ReadADCvaluexE), 
    .C1(\uSynchronizerStateMachine_1/N_144 ), .B1(\MonitorTimestampxD[13] ), 
    .A1(\ADCregOutxD[13] ), .C0(\fifoStatemachine_1.StatexDP[0] ), 
    .B0(LED2xSO_c), .A0(FX2FifoInFullxSBI_c), 
    .F0(\fifoStatemachine_1/N_10_mux ), .F1(N_139_i));
  ADCStateMachine_2_SLICE_629 \ADCStateMachine_2/SLICE_629 ( 
    .C1(\ADCStateMachine_2/StateRowxDP[11] ), 
    .B1(\ADCStateMachine_2.StateRowxDP[3] ), 
    .A1(\ADCStateMachine_2/StateRowxDP[2] ), 
    .B0(\ADCStateMachine_2/staterowxdn16_li ), 
    .A0(\ADCStateMachine_2/StateRowxDP[0] ), 
    .F0(\ADCStateMachine_2/un1_StateRowxDP_3_i_a2 ), 
    .F1(\ADCStateMachine_2/un1_StateRowxDP_3_i_1 ));
  ADCStateMachine_2_SLICE_630 \ADCStateMachine_2/SLICE_630 ( 
    .B1(\ADCStateMachine_2/StateRowxDP[1] ), 
    .A1(\ADCStateMachine_2/StateColxDP[11] ), .D0(\ADCStateMachine_2/G_33_3 ), 
    .C0(\ADCStateMachine_2/G_33_0 ), 
    .B0(\ADCStateMachine_2/DividerColxDN_1_sqmuxa ), 
    .A0(\ADCStateMachine_2/ClockxC ), 
    .F0(\ADCStateMachine_2/ClockxC_RNI4URR2 ), .F1(\ADCStateMachine_2/N_4 ));
  SLICE_631 SLICE_631( .D1(\cDVSResetStateMachine_1.StatexDP[1] ), 
    .C1(\cDVSResetStateMachine_1.StatexDP[0] ), .B1(PE3xSI_c), 
    .A1(\DebugxSIO_in[9] ), .D0(\cDVSResetStateMachine_1.StatexDP[1] ), 
    .C0(\cDVSResetStateMachine_1.StatexDP[0] ), 
    .B0(\cDVSResetStateMachine_1/CountxDP[18] ), .A0(AERREQxSB), 
    .F0(\cDVSResetStateMachine_1/N_135 ), .F1(LED1xSO_c));
  SLICE_632 SLICE_632( .D1(ReadADCvaluexE), 
    .C1(\uSynchronizerStateMachine_1/N_144 ), .B1(\MonitorTimestampxD[11] ), 
    .A1(\ADCregOutxD[11] ), .B0(\monitorStateMachine_1/StatexDP_fast[6] ), 
    .A0(\monitorStateMachine_1/StatexDP_fast[7] ), .F0(N_205_i), .F1(N_138_i));
  uSynchronizerStateMachine_1_SLICE_633 
    \uSynchronizerStateMachine_1/SLICE_633 ( .D1(ReadADCvaluexE), .C1(N_141), 
    .B1(\MonitorTimestampxD[0] ), .A1(\ADCregOutxD[0] ), .D0(ReadADCvaluexE), 
    .C0(\uSynchronizerStateMachine_1/N_144 ), .B0(\MonitorTimestampxD[10] ), 
    .A0(\ADCregOutxD[10] ), .F0(N_137_i), 
    .F1(\uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[0] ));
  ADCStateMachine_2_SLICE_634 \ADCStateMachine_2/SLICE_634 ( 
    .B1(\ADCStateMachine_2/un1_DividerColxDP ), 
    .A1(\ADCStateMachine_2/StateColxDP[5] ), 
    .D0(\ADCStateMachine_2/un1_DividerColxDP_2 ), 
    .C0(\ADCStateMachine_2/un1_DividerColxDP ), 
    .B0(\ADCStateMachine_2/StateColxDP[5] ), 
    .A0(\ADCStateMachine_2/StateColxDP[2] ), 
    .F0(\ADCStateMachine_2/g0_0_3_sx ), .F1(\ADCStateMachine_2/g1_0 ));
  ADCStateMachine_2_SLICE_635 \ADCStateMachine_2/SLICE_635 ( 
    .C0(\ADCStateMachine_2/StateColxDP[3] ), 
    .B0(\ADCStateMachine_2/StateColxDP[1] ), .A0(\ADCStateMachine_2/N_3 ), 
    .F0(CDVSTestColMode0xSO_c));
  ADCStateMachine_2_SLICE_636 \ADCStateMachine_2/SLICE_636 ( 
    .B0(\SRDataOutxD[32] ), .A0(\SRDataOutxD[16] ), 
    .F0(\ADCStateMachine_2/un19_nobxs_axb_0 ));
  ADCStateMachine_2_SLICE_637 \ADCStateMachine_2/SLICE_637 ( 
    .B0(\ADCStateMachine_2/un13_nobxs ), .A0(\ADCStateMachine_2/un6_nobxs ), 
    .F0(\ADCStateMachine_2/un7_nobxs_x ));
  ADCStateMachine_2_SLICE_638 \ADCStateMachine_2/SLICE_638 ( 
    .F0(\ADCStateMachine_2/VCC ));
  SLICE_639 SLICE_639( .D0(\uTimestampCounter.MSbDelayedxDP ), 
    .C0(\uTimestampCounter.CountxDP[14] ), 
    .B0(\monitorStateMachine_1/StatexDP_fast[7] ), 
    .A0(\monitorStateMachine_1/StatexDP_fast[6] ), 
    .M0(\uTimestampCounter/CountxDP_s[14] ), .CE(IncxS), 
    .LSR(ResetTimestampxSBO_i_0_o2_2_RNICSNV), .CLK(ClockxC_c), 
    .F0(\monitorStateMachine_1/TimestampOverflowxDP ), 
    .Q0(\uTimestampCounter.CountxDP[14] ));
  monitorStateMachine_1_SLICE_640 \monitorStateMachine_1/SLICE_640 ( 
    .D0(\monitorStateMachine_1/TimestampOverflowxDP[15] ), 
    .C0(\monitorStateMachine_1/TimestampOverflowxDP[14] ), 
    .B0(\monitorStateMachine_1/TimestampOverflowxDP[11] ), 
    .A0(\monitorStateMachine_1/TimestampOverflowxDP[10] ), 
    .F0(\monitorStateMachine_1/StatexDP_ns_i_0_a2_8[3] ));
  monitorStateMachine_1_SLICE_641 \monitorStateMachine_1/SLICE_641 ( 
    .B0(\monitorStateMachine_1/StatexDP_fast[7] ), 
    .A0(\monitorStateMachine_1/StatexDP_fast[6] ), 
    .F0(\monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ));
  uSynchronizerStateMachine_1_SLICE_642 
    \uSynchronizerStateMachine_1/SLICE_642 ( .B0(ResetxRBI_c), .A0(LED2xSO_c), 
    .F0(ADCsmRstxE_i));
  uSynchronizerStateMachine_1_SLICE_643 
    \uSynchronizerStateMachine_1/SLICE_643 ( 
    .D0(\uSynchronizerStateMachine_1/CounterxDP[3] ), 
    .C0(\uSynchronizerStateMachine_1/CounterxDP[2] ), 
    .B0(\uSynchronizerStateMachine_1/CounterxDP[1] ), 
    .A0(\uSynchronizerStateMachine_1/CounterxDP[0] ), 
    .F0(\uSynchronizerStateMachine_1/counterxdn5lt6 ));
  uSynchronizerStateMachine_1_SLICE_644 
    \uSynchronizerStateMachine_1/SLICE_644 ( 
    .D0(\uSynchronizerStateMachine_1.CounterxDP[12] ), 
    .C0(\uSynchronizerStateMachine_1/CounterxDP[9] ), 
    .B0(\uSynchronizerStateMachine_1.CounterxDP[8] ), 
    .A0(\uSynchronizerStateMachine_1.CounterxDP[7] ), 
    .F0(\uSynchronizerStateMachine_1/un1_StatexDP_7_0_78_i_a3_4 ));
  uTimestampCounter_SLICE_645 \uTimestampCounter/SLICE_645 ( 
    .B0(\uTimestampCounter.MSbDelayedxDP ), 
    .A0(\uTimestampCounter/CountxDP_fast[14] ), 
    .M0(\uTimestampCounter.CountxDP[14] ), 
    .LSR(ResetTimestampxSBO_i_0_o2_2_RNICSNV), .CLK(ClockxC_c), 
    .F0(TimestampOverflowxS), .Q0(\uTimestampCounter.MSbDelayedxDP ));
  uEventCounter_SLICE_646 \uEventCounter/SLICE_646 ( 
    .D0(\uEventCounter/CountxDP[4] ), .C0(\uEventCounter/CountxDP[3] ), 
    .B0(\uEventCounter/CountxDP[1] ), .A0(\uEventCounter/CountxDP[0] ), 
    .F0(\uEventCounter/countxdn15_5 ));
  SLICE_647 SLICE_647( .A0(PE2xSI_c), .F0(PE2xSI_c_i));
  SLICE_648 SLICE_648( .F0(VCC));
  SLICE_649 SLICE_649( .A0(ResetxRBI_c), .F0(ResetxRBI_c_i));
  ADCwordxDIO_1_ \ADCwordxDIO[1]_I ( .PADDI(\ADCwordxDIO_in[1] ), 
    .PADDT(ADCwordWritexE_i_a2), .ADCwordxDIO1(ADCwordxDIO[1]));
  ADCwordxDIO_0_ \ADCwordxDIO[0]_I ( .PADDT(ADCwordWritexE_i_a2), 
    .ADCwordxDIO0(ADCwordxDIO[0]));
  FX2FifoDataxDIO_0_ \FX2FifoDataxDIO[0]_I ( .PADDO(\FX2FifoDataxDIO_c[0] ), 
    .FX2FifoDataxDIO0(FX2FifoDataxDIO[0]));
  FX2FifoInFullxSBI FX2FifoInFullxSBI_I( .PADDI(FX2FifoInFullxSBI_c), 
    .FX2FifoInFullxSBI(FX2FifoInFullxSBI));
  AERMonitorAddressxDI_8_ \AERMonitorAddressxDI[8]_I ( 
    .PADDI(\AERMonitorAddressxDI_c[8] ), 
    .AERMonitorAddressxDI8(AERMonitorAddressxDI[8]));
  AERMonitorAddressxDI_7_ \AERMonitorAddressxDI[7]_I ( 
    .PADDI(\AERMonitorAddressxDI_c[7] ), 
    .AERMonitorAddressxDI7(AERMonitorAddressxDI[7]));
  AERMonitorAddressxDI_6_ \AERMonitorAddressxDI[6]_I ( 
    .PADDI(\AERMonitorAddressxDI_c[6] ), 
    .AERMonitorAddressxDI6(AERMonitorAddressxDI[6]));
  AERMonitorAddressxDI_5_ \AERMonitorAddressxDI[5]_I ( 
    .PADDI(\AERMonitorAddressxDI_c[5] ), 
    .AERMonitorAddressxDI5(AERMonitorAddressxDI[5]));
  AERMonitorAddressxDI_4_ \AERMonitorAddressxDI[4]_I ( 
    .PADDI(\AERMonitorAddressxDI_c[4] ), 
    .AERMonitorAddressxDI4(AERMonitorAddressxDI[4]));
  AERMonitorAddressxDI_3_ \AERMonitorAddressxDI[3]_I ( 
    .PADDI(\AERMonitorAddressxDI_c[3] ), 
    .AERMonitorAddressxDI3(AERMonitorAddressxDI[3]));
  AERMonitorAddressxDI_2_ \AERMonitorAddressxDI[2]_I ( 
    .PADDI(\AERMonitorAddressxDI_c[2] ), 
    .AERMonitorAddressxDI2(AERMonitorAddressxDI[2]));
  AERMonitorAddressxDI_1_ \AERMonitorAddressxDI[1]_I ( 
    .PADDI(\AERMonitorAddressxDI_c[1] ), 
    .AERMonitorAddressxDI1(AERMonitorAddressxDI[1]));
  AERMonitorAddressxDI_0_ \AERMonitorAddressxDI[0]_I ( 
    .PADDI(\AERMonitorAddressxDI_c[0] ), 
    .AERMonitorAddressxDI0(AERMonitorAddressxDI[0]));
  AERMonitorACKxSBO AERMonitorACKxSBO_I( .PADDO(AERMonitorACKxSBO_c), 
    .AERMonitorACKxSBO(AERMonitorACKxSBO));
  AERMonitorREQxABI AERMonitorREQxABI_I( .PADDI(AERMonitorREQxABI_c), 
    .AERMonitorREQxABI(AERMonitorREQxABI));
  DebugxSIO_15_ \DebugxSIO[15]_I ( .PADDO(VCC), .DebugxSIO15(DebugxSIO[15]));
  DebugxSIO_14_ \DebugxSIO[14]_I ( .PADDI(\DebugxSIO_in[14] ), 
    .DebugxSIO14(DebugxSIO[14]));
  DebugxSIO_13_ \DebugxSIO[13]_I ( .DebugxSIO13(DebugxSIO[13]));
  DebugxSIO_12_ \DebugxSIO[12]_I ( .PADDO(ADCbusyxSI_c), 
    .DebugxSIO12(DebugxSIO[12]));
  DebugxSIO_11_ \DebugxSIO[11]_I ( .PADDO(\DebugxSIO_c[11] ), 
    .DebugxSIO11(DebugxSIO[11]));
  DebugxSIO_10_ \DebugxSIO[10]_I ( .PADDO(VCC), .DebugxSIO10(DebugxSIO[10]));
  DebugxSIO_9_ \DebugxSIO[9]_I ( .PADDI(\DebugxSIO_in[9] ), 
    .DebugxSIO9(DebugxSIO[9]));
  DebugxSIO_8_ \DebugxSIO[8]_I ( .DebugxSIO8(DebugxSIO[8]));
  DebugxSIO_7_ \DebugxSIO[7]_I ( .PADDO(\DebugxSIO_c[7] ), 
    .DebugxSIO7(DebugxSIO[7]));
  DebugxSIO_6_ \DebugxSIO[6]_I ( .PADDO(\DebugxSIO_c[6] ), 
    .DebugxSIO6(DebugxSIO[6]));
  DebugxSIO_5_ \DebugxSIO[5]_I ( .PADDO(\DebugxSIO_c[5] ), 
    .DebugxSIO5(DebugxSIO[5]));
  DebugxSIO_4_ \DebugxSIO[4]_I ( .PADDO(\DebugxSIO_c[4] ), 
    .DebugxSIO4(DebugxSIO[4]));
  DebugxSIO_3_ \DebugxSIO[3]_I ( .PADDO(\DebugxSIO_c[3] ), 
    .DebugxSIO3(DebugxSIO[3]));
  DebugxSIO_2_ \DebugxSIO[2]_I ( .PADDO(\DebugxSIO_c[2] ), 
    .DebugxSIO2(DebugxSIO[2]));
  DebugxSIO_1_ \DebugxSIO[1]_I ( .PADDO(\DebugxSIO_c[1] ), 
    .DebugxSIO1(DebugxSIO[1]));
  DebugxSIO_0_ \DebugxSIO[0]_I ( .PADDO(\DebugxSIO_c[0] ), 
    .DebugxSIO0(DebugxSIO[0]));
  LED3xSO LED3xSO_I( .PADDO(LED3xSO_c), .LED3xSO(LED3xSO));
  LED2xSO LED2xSO_I( .PADDO(LED2xSO_c), .LED2xSO(LED2xSO));
  LED1xSO LED1xSO_I( .PADDO(LED1xSO_c), .LED1xSO(LED1xSO));
  CDVSTestBiasDiagSelxSO CDVSTestBiasDiagSelxSO_I( .PADDO(PA0xSIO_c), 
    .CDVSTestBiasDiagSelxSO(CDVSTestBiasDiagSelxSO));
  CDVSTestColMode1xSO CDVSTestColMode1xSO_I( .PADDO(CDVSTestColMode1xSO_c), 
    .CDVSTestColMode1xSO(CDVSTestColMode1xSO));
  CDVSTestColMode0xSO CDVSTestColMode0xSO_I( .PADDO(CDVSTestColMode0xSO_c), 
    .CDVSTestColMode0xSO(CDVSTestColMode0xSO));
  CDVSTestChipResetxRBO CDVSTestChipResetxRBO_I( .PADDO(LED1xSO_c), 
    .CDVSTestChipResetxRBO(CDVSTestChipResetxRBO));
  CDVSTestBiasEnablexEO CDVSTestBiasEnablexEO_I( .PADDO(PE2xSI_c_i), 
    .CDVSTestBiasEnablexEO(CDVSTestBiasEnablexEO));
  CDVSTestSRColInxSO CDVSTestSRColInxSO_I( .PADDO(CDVSTestSRColInxSO_c), 
    .CDVSTestSRColInxSO(CDVSTestSRColInxSO));
  CDVSTestSRRowInxSO CDVSTestSRRowInxSO_I( .PADDO(CDVSTestSRRowInxSO_c), 
    .CDVSTestSRRowInxSO(CDVSTestSRRowInxSO));
  CDVSTestSRColClockxSO CDVSTestSRColClockxSO_I( 
    .PADDO(CDVSTestSRColClockxSO_c), 
    .CDVSTestSRColClockxSO(CDVSTestSRColClockxSO));
  CDVSTestSRRowClockxSO CDVSTestSRRowClockxSO_I( 
    .PADDO(CDVSTestSRRowClockxSO_c), 
    .CDVSTestSRRowClockxSO(CDVSTestSRRowClockxSO));
  ADCbusyxSI ADCbusyxSI_I( .PADDI(ADCbusyxSI_c), .ADCbusyxSI(ADCbusyxSI));
  ADCconvstxEBO ADCconvstxEBO_I( .PADDO(ADCconvstxEBO_c), 
    .ADCconvstxEBO(ADCconvstxEBO));
  ADCreadxEBO ADCreadxEBO_I( .PADDO(ADCreadxEBO_c), .ADCreadxEBO(ADCreadxEBO));
  ADCwritexEBO ADCwritexEBO_I( .PADDO(ADCwritexEBO_c), 
    .ADCwritexEBO(ADCwritexEBO));
  ADCwordxDIO_11_ \ADCwordxDIO[11]_I ( .PADDI(\ADCwordxDIO_in[11] ), 
    .PADDT(ADCwordWritexE_i_a2), .ADCwordxDIO11(ADCwordxDIO[11]));
  ADCwordxDIO_10_ \ADCwordxDIO[10]_I ( .PADDI(\ADCwordxDIO_in[10] ), 
    .PADDT(ADCwordWritexE_i_a2), .ADCwordxDIO10(ADCwordxDIO[10]));
  ADCwordxDIO_9_ \ADCwordxDIO[9]_I ( .PADDI(\ADCwordxDIO_in[9] ), 
    .PADDT(ADCwordWritexE_i_a2), .ADCwordxDIO9(ADCwordxDIO[9]));
  ADCwordxDIO_8_ \ADCwordxDIO[8]_I ( .PADDI(\ADCwordxDIO_in[8] ), 
    .PADDT(ADCwordWritexE_i_a2), .PADDO(VCC), .ADCwordxDIO8(ADCwordxDIO[8]));
  ADCwordxDIO_7_ \ADCwordxDIO[7]_I ( .PADDI(\ADCwordxDIO_in[7] ), 
    .PADDT(ADCwordWritexE_i_a2), .ADCwordxDIO7(ADCwordxDIO[7]));
  ADCwordxDIO_6_ \ADCwordxDIO[6]_I ( .PADDI(\ADCwordxDIO_in[6] ), 
    .PADDT(ADCwordWritexE_i_a2), .PADDO(VCC), .ADCwordxDIO6(ADCwordxDIO[6]));
  ADCwordxDIO_5_ \ADCwordxDIO[5]_I ( .PADDI(\ADCwordxDIO_in[5] ), 
    .PADDT(ADCwordWritexE_i_a2), .PADDO(VCC), .ADCwordxDIO5(ADCwordxDIO[5]));
  ADCwordxDIO_4_ \ADCwordxDIO[4]_I ( .PADDI(\ADCwordxDIO_in[4] ), 
    .PADDT(ADCwordWritexE_i_a2), .ADCwordxDIO4(ADCwordxDIO[4]));
  ADCwordxDIO_3_ \ADCwordxDIO[3]_I ( .PADDI(\ADCwordxDIO_in[3] ), 
    .PADDT(ADCwordWritexE_i_a2), .ADCwordxDIO3(ADCwordxDIO[3]));
  ADCwordxDIO_2_ \ADCwordxDIO[2]_I ( .PADDI(\ADCwordxDIO_in[2] ), 
    .PADDT(ADCwordWritexE_i_a2), .ADCwordxDIO2(ADCwordxDIO[2]));
  ADCclockxCO ADCclockxCO_I( .PADDO(ADCclockxCO_c), .ADCclockxCO(ADCclockxCO));
  PE3xSI PE3xSI_I( .PADDI(PE3xSI_c), .PE3xSI(PE3xSI));
  PE2xSI PE2xSI_I( .PADDI(PE2xSI_c), .PE2xSI(PE2xSI));
  PA7xSIO PA7xSIO_I( .PADDI(PA7xSIO_c), .PA7xSIO(PA7xSIO));
  PA3xSIO PA3xSIO_I( .PADDI(LED2xSO_c), .PA3xSIO(PA3xSIO));
  PA1xSIO PA1xSIO_I( .PADDI(PA1xSIO_c), .PA1xSIO(PA1xSIO));
  PA0xSIO PA0xSIO_I( .PADDI(PA0xSIO_c), .PA0xSIO(PA0xSIO));
  PC3xSIO PC3xSIO_I( .PADDI(PC3xSIO_c), .PC3xSIO(PC3xSIO));
  PC2xSIO PC2xSIO_I( .PADDI(PC2xSIO_c), .PC2xSIO(PC2xSIO));
  PC1xSIO PC1xSIO_I( .PADDI(PC1xSIO_c), .PC1xSIO(PC1xSIO));
  PC0xSIO PC0xSIO_I( .PADDI(PC0xSIO_c), .PC0xSIO(PC0xSIO));
  SynchOutxSBO SynchOutxSBO_I( .PADDO(SynchOutxSBO_c), 
    .SynchOutxSBO(SynchOutxSBO));
  Sync1xABI Sync1xABI_I( .PADDI(Sync1xABI_c), .Sync1xABI(Sync1xABI));
  ResetxRBI ResetxRBI_I( .PADDI(ResetxRBI_c), .ResetxRBI(ResetxRBI));
  IfClockxCI IfClockxCI_I( .PADDI(IfClockxCI_c), .IfClockxCI(IfClockxCI));
  FX2FifoAddressxDO_1_ \FX2FifoAddressxDO[1]_I ( .PADDO(VCC), 
    .FX2FifoAddressxDO1(FX2FifoAddressxDO[1]));
  FX2FifoAddressxDO_0_ \FX2FifoAddressxDO[0]_I ( 
    .FX2FifoAddressxDO0(FX2FifoAddressxDO[0]));
  FX2FifoPktEndxSBO FX2FifoPktEndxSBO_I( .PADDO(FX2FifoPktEndxSBO_c), 
    .FX2FifoPktEndxSBO(FX2FifoPktEndxSBO));
  FX2FifoReadxEBO FX2FifoReadxEBO_I( .PADDO(VCC), 
    .FX2FifoReadxEBO(FX2FifoReadxEBO));
  FX2FifoWritexEBO FX2FifoWritexEBO_I( .PADDO(FX2FifoWritexEBO_c), 
    .FX2FifoWritexEBO(FX2FifoWritexEBO));
  FX2FifoDataxDIO_15_ \FX2FifoDataxDIO[15]_I ( .PADDO(\FX2FifoDataxDIO_c[15] ), 
    .FX2FifoDataxDIO15(FX2FifoDataxDIO[15]));
  FX2FifoDataxDIO_14_ \FX2FifoDataxDIO[14]_I ( .PADDO(\FX2FifoDataxDIO_c[14] ), 
    .FX2FifoDataxDIO14(FX2FifoDataxDIO[14]));
  FX2FifoDataxDIO_13_ \FX2FifoDataxDIO[13]_I ( .PADDO(\FX2FifoDataxDIO_c[13] ), 
    .FX2FifoDataxDIO13(FX2FifoDataxDIO[13]));
  FX2FifoDataxDIO_12_ \FX2FifoDataxDIO[12]_I ( .PADDO(\FX2FifoDataxDIO_c[12] ), 
    .FX2FifoDataxDIO12(FX2FifoDataxDIO[12]));
  FX2FifoDataxDIO_11_ \FX2FifoDataxDIO[11]_I ( .PADDO(\FX2FifoDataxDIO_c[11] ), 
    .FX2FifoDataxDIO11(FX2FifoDataxDIO[11]));
  FX2FifoDataxDIO_10_ \FX2FifoDataxDIO[10]_I ( .PADDO(\FX2FifoDataxDIO_c[10] ), 
    .FX2FifoDataxDIO10(FX2FifoDataxDIO[10]));
  FX2FifoDataxDIO_9_ \FX2FifoDataxDIO[9]_I ( .PADDO(\FX2FifoDataxDIO_c[9] ), 
    .FX2FifoDataxDIO9(FX2FifoDataxDIO[9]));
  FX2FifoDataxDIO_8_ \FX2FifoDataxDIO[8]_I ( .PADDO(\FX2FifoDataxDIO_c[8] ), 
    .FX2FifoDataxDIO8(FX2FifoDataxDIO[8]));
  FX2FifoDataxDIO_7_ \FX2FifoDataxDIO[7]_I ( .PADDO(\FX2FifoDataxDIO_c[7] ), 
    .FX2FifoDataxDIO7(FX2FifoDataxDIO[7]));
  FX2FifoDataxDIO_6_ \FX2FifoDataxDIO[6]_I ( .PADDO(\FX2FifoDataxDIO_c[6] ), 
    .FX2FifoDataxDIO6(FX2FifoDataxDIO[6]));
  FX2FifoDataxDIO_5_ \FX2FifoDataxDIO[5]_I ( .PADDO(\FX2FifoDataxDIO_c[5] ), 
    .FX2FifoDataxDIO5(FX2FifoDataxDIO[5]));
  FX2FifoDataxDIO_4_ \FX2FifoDataxDIO[4]_I ( .PADDO(\FX2FifoDataxDIO_c[4] ), 
    .FX2FifoDataxDIO4(FX2FifoDataxDIO[4]));
  FX2FifoDataxDIO_3_ \FX2FifoDataxDIO[3]_I ( .PADDO(\FX2FifoDataxDIO_c[3] ), 
    .FX2FifoDataxDIO3(FX2FifoDataxDIO[3]));
  FX2FifoDataxDIO_2_ \FX2FifoDataxDIO[2]_I ( .PADDO(\FX2FifoDataxDIO_c[2] ), 
    .FX2FifoDataxDIO2(FX2FifoDataxDIO[2]));
  FX2FifoDataxDIO_1_ \FX2FifoDataxDIO[1]_I ( .PADDO(\FX2FifoDataxDIO_c[1] ), 
    .FX2FifoDataxDIO1(FX2FifoDataxDIO[1]));
  uFifo_AERfifo_0_1 \uFifo/AERfifo_0_1 ( .DIA8(\FifoDataInxD[8] ), 
    .DIA7(N_135_i), .DIA6(\FifoDataInxD[6] ), .DIA5(N_134_i), 
    .DIA4(\FifoDataInxD[4] ), .DIA3(N_72_i), .DIA2(N_70_i), .DIA1(N_68_i), 
    .DIA0(N_66_i), .CEA(FifoWritexE), .CSA2(FifoFullxS), .RSTA(ResetxRBI_c), 
    .CEB(FifoReadxE), .CSB2(FifoEmptyxS), .RSTB(ResetxRBI_c), .CLKA(ClockxC_c), 
    .CLKB(IfClockxCI_c), .MORCLKA(ClockxC_c), .MORCLKB(IfClockxCI_c), 
    .DOB0(\FX2FifoDataxDIO_c[0] ), .DOB1(\FX2FifoDataxDIO_c[1] ), 
    .DOB2(\FX2FifoDataxDIO_c[2] ), .DOB3(\FX2FifoDataxDIO_c[3] ), 
    .DOB4(\FX2FifoDataxDIO_c[4] ), .DOB5(\FX2FifoDataxDIO_c[5] ), 
    .DOB6(\FX2FifoDataxDIO_c[6] ), .DOB7(\FX2FifoDataxDIO_c[7] ), 
    .DOB8(\FX2FifoDataxDIO_c[8] ), .EF(FifoEmptyxS), .FF(FifoFullxS));
  uFifo_AERfifo_1_0 \uFifo/AERfifo_1_0 ( .DIA6(N_205_i), .DIA5(N_17), 
    .DIA4(N_139_i), .DIA3(\FifoDataInxD[12] ), .DIA2(N_138_i), .DIA1(N_137_i), 
    .DIA0(N_136_i), .CEA(FifoWritexE), .CSA2(FifoFullxS), .RSTA(ResetxRBI_c), 
    .CEB(FifoReadxE), .CSB2(FifoEmptyxS), .RSTB(ResetxRBI_c), .CLKA(ClockxC_c), 
    .CLKB(IfClockxCI_c), .MORCLKA(ClockxC_c), .MORCLKB(IfClockxCI_c), 
    .DOB0(\FX2FifoDataxDIO_c[9] ), .DOB1(\FX2FifoDataxDIO_c[10] ), 
    .DOB2(\FX2FifoDataxDIO_c[11] ), .DOB3(\FX2FifoDataxDIO_c[12] ), 
    .DOB4(\FX2FifoDataxDIO_c[13] ), .DOB5(\FX2FifoDataxDIO_c[14] ), 
    .DOB6(\FX2FifoDataxDIO_c[15] ));
  uClockGen_PLLCInst_0 \uClockGen/PLLCInst_0 ( .CLKI(IfClockxCI_c), 
    .CLKFB(ClockxC_c), .CNTRST(ResetxRBI_c_i), .CLKOP(ClockxC_c));
  GSR_INST GSR_INST( .GSRNET(ResetxRBI_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
  VLO VLO_INST( .Z(GNDI_TSALL));
  TSALL TSALL_INST( .TSALL(GNDI_TSALL));
endmodule

module ADCStateMachine_2_SLICE_0 ( input B0, A0, FCI, output OFX0 );
  wire   GNDI;

  ccu2 \ADCStateMachine_2/p_col.un6_countcolxdp_0_I_51_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(OFX0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (FCI => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5001;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ADCStateMachine_2_SLICE_1 ( input D1, C1, B1, A1, D0, C0, B0, A0, FCI, 
    output FCO );

  ccu20001 \ADCStateMachine_2/p_col.un6_countcolxdp_0_I_39_0 ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h8421;
  defparam inst1.INIT1 = 16'h8421;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module ADCStateMachine_2_SLICE_2 ( input D1, C1, B1, A1, D0, C0, B0, A0, FCI, 
    output FCO );

  ccu20001 \ADCStateMachine_2/p_col.un6_countcolxdp_0_I_27_0 ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_3 ( input D1, C1, B1, A1, D0, C0, B0, A0, FCI, 
    output FCO );

  ccu20001 \ADCStateMachine_2/p_col.un6_countcolxdp_0_I_15_0 ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_4 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output FCO );
  wire   GNDI;

  ccu20001 \ADCStateMachine_2/p_col.un6_countcolxdp_0_I_1_0 ( .A0(A0), .B0(B0), 
    .C0(C0), .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(GNDI), .S0(), 
    .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_5 ( input B0, A0, FCI, output OFX0 );
  wire   GNDI;

  ccu2 \ADCStateMachine_2/p_col.un1_countcolxdp_0_I_51_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(OFX0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (FCI => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_6 ( input D1, C1, B1, A1, D0, C0, B0, A0, FCI, 
    output FCO );

  ccu20001 \ADCStateMachine_2/p_col.un1_countcolxdp_0_I_39_0 ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_7 ( input D1, C1, B1, A1, D0, C0, B0, A0, FCI, 
    output FCO );

  ccu20001 \ADCStateMachine_2/p_col.un1_countcolxdp_0_I_27_0 ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_8 ( input D1, C1, B1, A1, D0, C0, B0, A0, FCI, 
    output FCO );

  ccu20001 \ADCStateMachine_2/p_col.un1_countcolxdp_0_I_15_0 ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_9 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output FCO );
  wire   GNDI;

  ccu20001 \ADCStateMachine_2/p_col.un1_countcolxdp_0_I_1_0 ( .A0(A0), .B0(B0), 
    .C0(C0), .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(GNDI), .S0(), 
    .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_10 ( input B0, A0, FCI, output OFX0 );
  wire   GNDI;

  ccu20002 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[31] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(OFX0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (FCI => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf001;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_11 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[27] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf001;
  defparam inst1.INIT1 = 16'hf001;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_12 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[23] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_13 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[19] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_14 ( input B1, A1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[16] ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20004 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf003;
  defparam inst1.INIT1 = 16'hf001;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_15 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[14] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5009;
  defparam inst1.INIT1 = 16'h5009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_16 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[12] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_17 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[10] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_18 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[8] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_19 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[6] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_20 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[4] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_21 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[2] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_22 ( input B1, A1, B0, A0, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0[0] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(GNDI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_23 ( input B0, A0, FCI, output OFX0 );
  wire   GNDI;

  ccu20002 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[31] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(OFX0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (FCI => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_24 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[27] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_25 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20006 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[23] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h300a;
  defparam inst1.INIT1 = 16'h300a;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_26 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20006 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[19] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_27 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20007 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[16] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5009;
  defparam inst1.INIT1 = 16'h300a;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_28 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[14] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_29 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[12] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_30 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[10] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_31 ( input B1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20008 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[8] ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf003;
  defparam inst1.INIT1 = 16'hf003;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_32 ( input B1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20008 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[6] ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_33 ( input B1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20008 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[4] ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_34 ( input B1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20008 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[2] ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_35 ( input B1, B0, A0, output FCO );
  wire   GNDI;

  ccu20009 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0[0] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(GNDI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h000a;
  defparam inst1.INIT1 = 16'hf003;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_36 ( input B0, A0, FCI, output OFX0 );
  wire   GNDI;

  ccu20002 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[31] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(OFX0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (FCI => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_37 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[27] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_38 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[23] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_39 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[19] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_40 ( input B1, A1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[16] ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_41 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[14] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_42 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[12] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_43 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[10] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_44 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[8] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_45 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[6] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_46 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[4] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_47 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[2] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_48 ( input B1, A1, B0, A0, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0[0] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(GNDI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_49 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20010 \ADCStateMachine_2/p_col.un6_usecxei_cry_16_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20010 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5001;
  defparam inst1.INIT1 = 16'h5001;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module ADCStateMachine_2_SLICE_50 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_usecxei_cry_14_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_51 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_usecxei_cry_12_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_52 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_usecxei_cry_10_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_53 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_usecxei_cry_8_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_54 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20011 \ADCStateMachine_2/p_col.un6_usecxei_cry_6_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20011 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5006;
  defparam inst1.INIT1 = 16'h5009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_55 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_usecxei_cry_4_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_56 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_usecxei_cry_2_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_57 ( input B1, A1, B0, A0, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_usecxei_cry_0_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_58 ( input A1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \ADCStateMachine_2/p_col.un13_nobxs_cry_16_0 ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_59 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un13_nobxs_cry_14_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_60 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un13_nobxs_cry_12_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_61 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un13_nobxs_cry_10_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_62 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un13_nobxs_cry_8_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_63 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un13_nobxs_cry_6_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_64 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un13_nobxs_cry_4_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_65 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un13_nobxs_cry_2_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_66 ( input C1, B1, A1, B0, A0, output FCO );
  wire   GNDI;

  ccu20012 \ADCStateMachine_2/p_col.un13_nobxs_cry_0_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20012 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5009;
  defparam inst1.INIT1 = 16'ha03c;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_67 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20010 \ADCStateMachine_2/p_col.un6_nobxs_cry_16_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_68 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_nobxs_cry_14_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_69 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_nobxs_cry_12_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_70 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_nobxs_cry_10_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_71 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_nobxs_cry_8_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_72 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_nobxs_cry_6_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_73 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_nobxs_cry_4_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_74 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un6_nobxs_cry_2_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_75 ( input B1, A1, B0, A0, output FCO );
  wire   GNDI;

  ccu20011 \ADCStateMachine_2/p_col.un6_nobxs_cry_0_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_76 ( input A1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \ADCStateMachine_2/p_col.un30_nobxs_cry_16_0 ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_77 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un30_nobxs_cry_14_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_78 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un30_nobxs_cry_12_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_79 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un30_nobxs_cry_10_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_80 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un30_nobxs_cry_8_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_81 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un30_nobxs_cry_6_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_82 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un30_nobxs_cry_4_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_83 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un30_nobxs_cry_2_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_84 ( input C1, B1, A1, C0, B0, A0, output FCO );
  wire   GNDI;

  ccu20013 \ADCStateMachine_2/p_col.un30_nobxs_cry_0_0 ( .A0(A0), .B0(B0), 
    .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20013 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h9069;
  defparam inst1.INIT1 = 16'ha03c;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_85 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20010 \ADCStateMachine_2/p_col.un22_nobxs_cry_16_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_86 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un22_nobxs_cry_14_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_87 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un22_nobxs_cry_12_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_88 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un22_nobxs_cry_10_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_89 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un22_nobxs_cry_8_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_90 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un22_nobxs_cry_6_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_91 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un22_nobxs_cry_4_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_92 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un22_nobxs_cry_2_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_93 ( input B1, A1, C0, B0, A0, output FCO );
  wire   GNDI;

  ccu20014 \ADCStateMachine_2/p_col.un22_nobxs_cry_0_0 ( .A0(A0), .B0(B0), 
    .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20014 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5096;
  defparam inst1.INIT1 = 16'h5009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_94 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20010 \ADCStateMachine_2/p_col.un15_usecxei_cry_16_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_95 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un15_usecxei_cry_14_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_96 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un15_usecxei_cry_12_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_97 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un15_usecxei_cry_10_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_98 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un15_usecxei_cry_8_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_99 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un15_usecxei_cry_6_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_100 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un15_usecxei_cry_4_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_101 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un15_usecxei_cry_2_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_102 ( input B1, A1, C0, B0, A0, output FCO );
  wire   GNDI;

  ccu20015 \ADCStateMachine_2/p_col.un15_usecxei_cry_0_0 ( .A0(A0), .B0(B0), 
    .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20015 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5069;
  defparam inst1.INIT1 = 16'h5009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_103 ( input B0, FCI, output OFX0 );
  wire   GNDI;

  ccu20016 \ADCStateMachine_2/p_row.un1_DividerRowxDP_cry_16_0 ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(OFX0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => OFX0) = (0:0:0,0:0:0);
    (FCI => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20016 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf003;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_104 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_cry_14_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_105 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_cry_12_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_106 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_cry_10_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_107 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_cry_8_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_108 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_cry_6_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_109 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_cry_4_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_110 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_cry_2_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_111 ( input B1, A1, B0, A0, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_cry_0_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(GNDI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_112 ( input B0, FCI, output OFX0 );
  wire   GNDI;

  ccu20016 \ADCStateMachine_2/p_row.un1_DividerRowxDP_1_cry_16_0 ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(OFX0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => OFX0) = (0:0:0,0:0:0);
    (FCI => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_113 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_1_cry_14_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_114 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_1_cry_12_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_115 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_1_cry_10_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_116 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_1_cry_8_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_117 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_1_cry_6_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_118 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_1_cry_4_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_119 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_1_cry_2_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_120 ( input B1, A1, B0, A0, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_row.un1_DividerRowxDP_1_cry_0_0 ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(GNDI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_121 ( input B0, A0, FCI, output OFX0 );
  wire   GNDI;

  ccu20002 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[31] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(OFX0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (FCI => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_122 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[27] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_123 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[23] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_124 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[19] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_125 ( input B1, A1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[16] ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_126 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[14] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_127 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[12] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_128 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[10] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_129 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[8] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_130 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[6] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_131 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[4] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_132 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[2] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_133 ( input B1, A1, B0, A0, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_cry_0[0] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(GNDI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_134 ( input B0, A0, FCI, output OFX0 );
  wire   GNDI;

  ccu20002 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[31] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(OFX0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (FCI => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_135 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[27] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_136 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[23] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_137 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[19] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_138 ( input B1, A1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[16] ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_139 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[14] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_140 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[12] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_141 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[10] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_142 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[8] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_143 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[6] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_144 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[4] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_145 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[2] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_146 ( input B1, A1, B0, A0, output FCO );
  wire   GNDI;

  ccu20005 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0[0] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(GNDI), .S0(), .S1(), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_147 ( input A1, A0, FCI, output Q0, Q1 );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_147/ADCStateMachine_2/un3_usecxei_cry_8_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_147/ADCStateMachine_2/un3_usecxei_cry_8_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_147_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_147/ADCStateMachine_2/un3_usecxei_cry_8_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_147_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_147/ADCStateMachine_2/un3_usecxei_cry_8_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un3_usecxei_cry_8_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_147/ADCStateMachine_2/un3_usecxei_cry_8_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_147/ADCStateMachine_2/un3_usecxei_cry_8_0_S1 ), 
    .CO0(), .CO1());

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1D INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module ADCStateMachine_2_SLICE_148 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_148/ADCStateMachine_2/un3_usecxei_cry_6_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_148/ADCStateMachine_2/un3_usecxei_cry_6_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_148_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_148/ADCStateMachine_2/un3_usecxei_cry_6_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_148_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_148/ADCStateMachine_2/un3_usecxei_cry_6_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un3_usecxei_cry_6_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_148/ADCStateMachine_2/un3_usecxei_cry_6_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_148/ADCStateMachine_2/un3_usecxei_cry_6_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_149 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_149/ADCStateMachine_2/un3_usecxei_cry_4_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_149/ADCStateMachine_2/un3_usecxei_cry_4_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_149_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_149/ADCStateMachine_2/un3_usecxei_cry_4_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_149_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_149/ADCStateMachine_2/un3_usecxei_cry_4_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un3_usecxei_cry_4_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_149/ADCStateMachine_2/un3_usecxei_cry_4_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_149/ADCStateMachine_2/un3_usecxei_cry_4_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_150 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_150/ADCStateMachine_2/un3_usecxei_cry_2_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_150/ADCStateMachine_2/un3_usecxei_cry_2_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_150_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_150/ADCStateMachine_2/un3_usecxei_cry_2_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_150_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_150/ADCStateMachine_2/un3_usecxei_cry_2_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un3_usecxei_cry_2_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_150/ADCStateMachine_2/un3_usecxei_cry_2_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_150/ADCStateMachine_2/un3_usecxei_cry_2_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_151 ( input A1, A0, output Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_151/ADCStateMachine_2/un3_usecxei_cry_0_0_S1 , 
         GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_151_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_151/ADCStateMachine_2/un3_usecxei_cry_0_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20006 \ADCStateMachine_2/un3_usecxei_cry_0_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(VCCI), 
    .S0(), 
    .S1(\ADCStateMachine_2/SLICE_151/ADCStateMachine_2/un3_usecxei_cry_0_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_152 ( input A0, FCI, output Q0 );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_152/ADCStateMachine_2/un10_nobxs_s_14_0_S0 , 
         GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_152_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_152/ADCStateMachine_2/un10_nobxs_s_14_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20017 \ADCStateMachine_2/un10_nobxs_s_14_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_152/ADCStateMachine_2/un10_nobxs_s_14_0_S0 ), 
    .S1(), .CO0(), .CO1());

  specify
    (A0 => Q0) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20017 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h300a;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_153 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_153/ADCStateMachine_2/un10_nobxs_cry_12_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_153/ADCStateMachine_2/un10_nobxs_cry_12_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_153_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_153/ADCStateMachine_2/un10_nobxs_cry_12_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_153_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_153/ADCStateMachine_2/un10_nobxs_cry_12_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un10_nobxs_cry_12_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_153/ADCStateMachine_2/un10_nobxs_cry_12_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_153/ADCStateMachine_2/un10_nobxs_cry_12_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_154 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_154/ADCStateMachine_2/un10_nobxs_cry_10_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_154/ADCStateMachine_2/un10_nobxs_cry_10_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_154_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_154/ADCStateMachine_2/un10_nobxs_cry_10_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_154_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_154/ADCStateMachine_2/un10_nobxs_cry_10_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un10_nobxs_cry_10_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_154/ADCStateMachine_2/un10_nobxs_cry_10_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_154/ADCStateMachine_2/un10_nobxs_cry_10_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_155 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_155/ADCStateMachine_2/un10_nobxs_cry_8_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_155/ADCStateMachine_2/un10_nobxs_cry_8_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_155_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_155/ADCStateMachine_2/un10_nobxs_cry_8_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_155_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_155/ADCStateMachine_2/un10_nobxs_cry_8_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un10_nobxs_cry_8_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_155/ADCStateMachine_2/un10_nobxs_cry_8_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_155/ADCStateMachine_2/un10_nobxs_cry_8_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_156 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_156/ADCStateMachine_2/un10_nobxs_cry_6_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_156/ADCStateMachine_2/un10_nobxs_cry_6_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_156_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_156/ADCStateMachine_2/un10_nobxs_cry_6_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_156_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_156/ADCStateMachine_2/un10_nobxs_cry_6_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un10_nobxs_cry_6_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_156/ADCStateMachine_2/un10_nobxs_cry_6_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_156/ADCStateMachine_2/un10_nobxs_cry_6_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_157 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_157/ADCStateMachine_2/un10_nobxs_cry_4_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_157/ADCStateMachine_2/un10_nobxs_cry_4_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_157_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_157/ADCStateMachine_2/un10_nobxs_cry_4_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_157_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_157/ADCStateMachine_2/un10_nobxs_cry_4_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20018 \ADCStateMachine_2/un10_nobxs_cry_4_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_157/ADCStateMachine_2/un10_nobxs_cry_4_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_157/ADCStateMachine_2/un10_nobxs_cry_4_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20018 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h300a;
  defparam inst1.INIT1 = 16'h5001;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_158 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_158/ADCStateMachine_2/un10_nobxs_cry_2_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_158/ADCStateMachine_2/un10_nobxs_cry_2_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_158_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_158/ADCStateMachine_2/un10_nobxs_cry_2_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_158_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_158/ADCStateMachine_2/un10_nobxs_cry_2_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un10_nobxs_cry_2_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_158/ADCStateMachine_2/un10_nobxs_cry_2_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_158/ADCStateMachine_2/un10_nobxs_cry_2_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_159 ( input A1, A0, output Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_159/ADCStateMachine_2/un10_nobxs_cry_0_0_S1 , 
         GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_159_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_159/ADCStateMachine_2/un10_nobxs_cry_0_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20019 \ADCStateMachine_2/un10_nobxs_cry_0_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), 
    .S1(\ADCStateMachine_2/SLICE_159/ADCStateMachine_2/un10_nobxs_cry_0_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20019 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5001;
  defparam inst1.INIT1 = 16'h300a;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_160 ( input B1, A1, B0, A0, FCI, output Q0, Q1 );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_160/ADCStateMachine_2/un16_nobxs_cry_14_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_160/ADCStateMachine_2/un16_nobxs_cry_14_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_160_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_160/ADCStateMachine_2/un16_nobxs_cry_14_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_160_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_160/ADCStateMachine_2/un16_nobxs_cry_14_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un16_nobxs_cry_14_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_160/ADCStateMachine_2/un16_nobxs_cry_14_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_160/ADCStateMachine_2/un16_nobxs_cry_14_0_S1 ), 
    .CO0(), .CO1());

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20020 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5006;
  defparam inst1.INIT1 = 16'h5006;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_161 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_161/ADCStateMachine_2/un16_nobxs_cry_12_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_161/ADCStateMachine_2/un16_nobxs_cry_12_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_161_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_161/ADCStateMachine_2/un16_nobxs_cry_12_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_161_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_161/ADCStateMachine_2/un16_nobxs_cry_12_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un16_nobxs_cry_12_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_161/ADCStateMachine_2/un16_nobxs_cry_12_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_161/ADCStateMachine_2/un16_nobxs_cry_12_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_162 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_162/ADCStateMachine_2/un16_nobxs_cry_10_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_162/ADCStateMachine_2/un16_nobxs_cry_10_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_162_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_162/ADCStateMachine_2/un16_nobxs_cry_10_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_162_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_162/ADCStateMachine_2/un16_nobxs_cry_10_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un16_nobxs_cry_10_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_162/ADCStateMachine_2/un16_nobxs_cry_10_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_162/ADCStateMachine_2/un16_nobxs_cry_10_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_163 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_163/ADCStateMachine_2/un16_nobxs_cry_8_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_163/ADCStateMachine_2/un16_nobxs_cry_8_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_163_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_163/ADCStateMachine_2/un16_nobxs_cry_8_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_163_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_163/ADCStateMachine_2/un16_nobxs_cry_8_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un16_nobxs_cry_8_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_163/ADCStateMachine_2/un16_nobxs_cry_8_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_163/ADCStateMachine_2/un16_nobxs_cry_8_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_164 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_164/ADCStateMachine_2/un16_nobxs_cry_6_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_164/ADCStateMachine_2/un16_nobxs_cry_6_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_164_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_164/ADCStateMachine_2/un16_nobxs_cry_6_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_164_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_164/ADCStateMachine_2/un16_nobxs_cry_6_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un16_nobxs_cry_6_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_164/ADCStateMachine_2/un16_nobxs_cry_6_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_164/ADCStateMachine_2/un16_nobxs_cry_6_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_165 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_165/ADCStateMachine_2/un16_nobxs_cry_4_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_165/ADCStateMachine_2/un16_nobxs_cry_4_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_165_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_165/ADCStateMachine_2/un16_nobxs_cry_4_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_165_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_165/ADCStateMachine_2/un16_nobxs_cry_4_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un16_nobxs_cry_4_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_165/ADCStateMachine_2/un16_nobxs_cry_4_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_165/ADCStateMachine_2/un16_nobxs_cry_4_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_166 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_166/ADCStateMachine_2/un16_nobxs_cry_2_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_166/ADCStateMachine_2/un16_nobxs_cry_2_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_166_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_166/ADCStateMachine_2/un16_nobxs_cry_2_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_166_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_166/ADCStateMachine_2/un16_nobxs_cry_2_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un16_nobxs_cry_2_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_166/ADCStateMachine_2/un16_nobxs_cry_2_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_166/ADCStateMachine_2/un16_nobxs_cry_2_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_167 ( input B1, A1, B0, A0, output Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_167/ADCStateMachine_2/un16_nobxs_cry_0_0_S1 , 
         GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_167_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_167/ADCStateMachine_2/un16_nobxs_cry_0_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20020 \ADCStateMachine_2/un16_nobxs_cry_0_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(\ADCStateMachine_2/SLICE_167/ADCStateMachine_2/un16_nobxs_cry_0_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_168 ( input A1, A0, FCI, output Q0, Q1 );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_168/ADCStateMachine_2/un3_nobxs_cry_14_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_168/ADCStateMachine_2/un3_nobxs_cry_14_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_168_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_168/ADCStateMachine_2/un3_nobxs_cry_14_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_168_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_168/ADCStateMachine_2/un3_nobxs_cry_14_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un3_nobxs_cry_14_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_168/ADCStateMachine_2/un3_nobxs_cry_14_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_168/ADCStateMachine_2/un3_nobxs_cry_14_0_S1 ), 
    .CO0(), .CO1());

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_169 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_169/ADCStateMachine_2/un3_nobxs_cry_12_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_169/ADCStateMachine_2/un3_nobxs_cry_12_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_169_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_169/ADCStateMachine_2/un3_nobxs_cry_12_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_169_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_169/ADCStateMachine_2/un3_nobxs_cry_12_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un3_nobxs_cry_12_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_169/ADCStateMachine_2/un3_nobxs_cry_12_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_169/ADCStateMachine_2/un3_nobxs_cry_12_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_170 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_170/ADCStateMachine_2/un3_nobxs_cry_10_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_170/ADCStateMachine_2/un3_nobxs_cry_10_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_170_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_170/ADCStateMachine_2/un3_nobxs_cry_10_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_170_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_170/ADCStateMachine_2/un3_nobxs_cry_10_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un3_nobxs_cry_10_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_170/ADCStateMachine_2/un3_nobxs_cry_10_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_170/ADCStateMachine_2/un3_nobxs_cry_10_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_171 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_171/ADCStateMachine_2/un3_nobxs_cry_8_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_171/ADCStateMachine_2/un3_nobxs_cry_8_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_171_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_171/ADCStateMachine_2/un3_nobxs_cry_8_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_171_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_171/ADCStateMachine_2/un3_nobxs_cry_8_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un3_nobxs_cry_8_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_171/ADCStateMachine_2/un3_nobxs_cry_8_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_171/ADCStateMachine_2/un3_nobxs_cry_8_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_172 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_172/ADCStateMachine_2/un3_nobxs_cry_6_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_172/ADCStateMachine_2/un3_nobxs_cry_6_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_172_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_172/ADCStateMachine_2/un3_nobxs_cry_6_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_172_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_172/ADCStateMachine_2/un3_nobxs_cry_6_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un3_nobxs_cry_6_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_172/ADCStateMachine_2/un3_nobxs_cry_6_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_172/ADCStateMachine_2/un3_nobxs_cry_6_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_173 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_173/ADCStateMachine_2/un3_nobxs_cry_4_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_173/ADCStateMachine_2/un3_nobxs_cry_4_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_173_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_173/ADCStateMachine_2/un3_nobxs_cry_4_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_173_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_173/ADCStateMachine_2/un3_nobxs_cry_4_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un3_nobxs_cry_4_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_173/ADCStateMachine_2/un3_nobxs_cry_4_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_173/ADCStateMachine_2/un3_nobxs_cry_4_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_174 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_174/ADCStateMachine_2/un3_nobxs_cry_2_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_174/ADCStateMachine_2/un3_nobxs_cry_2_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_174_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_174/ADCStateMachine_2/un3_nobxs_cry_2_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_174_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_174/ADCStateMachine_2/un3_nobxs_cry_2_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un3_nobxs_cry_2_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_174/ADCStateMachine_2/un3_nobxs_cry_2_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_174/ADCStateMachine_2/un3_nobxs_cry_2_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_175 ( input A1, A0, output Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_175/ADCStateMachine_2/un3_nobxs_cry_0_0_S1 , 
         GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_175_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_175/ADCStateMachine_2/un3_nobxs_cry_0_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20006 \ADCStateMachine_2/un3_nobxs_cry_0_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(VCCI), 
    .S0(), 
    .S1(\ADCStateMachine_2/SLICE_175/ADCStateMachine_2/un3_nobxs_cry_0_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_176 ( input A1, A0, FCI, output Q0, Q1 );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_176/ADCStateMachine_2/un19_nobxs_cry_14_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_176/ADCStateMachine_2/un19_nobxs_cry_14_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_176_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_176/ADCStateMachine_2/un19_nobxs_cry_14_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_176_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_176/ADCStateMachine_2/un19_nobxs_cry_14_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un19_nobxs_cry_14_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_176/ADCStateMachine_2/un19_nobxs_cry_14_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_176/ADCStateMachine_2/un19_nobxs_cry_14_0_S1 ), 
    .CO0(), .CO1());

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_177 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_177/ADCStateMachine_2/un19_nobxs_cry_12_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_177/ADCStateMachine_2/un19_nobxs_cry_12_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_177_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_177/ADCStateMachine_2/un19_nobxs_cry_12_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_177_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_177/ADCStateMachine_2/un19_nobxs_cry_12_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un19_nobxs_cry_12_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_177/ADCStateMachine_2/un19_nobxs_cry_12_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_177/ADCStateMachine_2/un19_nobxs_cry_12_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_178 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_178/ADCStateMachine_2/un19_nobxs_cry_10_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_178/ADCStateMachine_2/un19_nobxs_cry_10_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_178_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_178/ADCStateMachine_2/un19_nobxs_cry_10_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_178_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_178/ADCStateMachine_2/un19_nobxs_cry_10_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un19_nobxs_cry_10_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_178/ADCStateMachine_2/un19_nobxs_cry_10_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_178/ADCStateMachine_2/un19_nobxs_cry_10_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_179 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_179/ADCStateMachine_2/un19_nobxs_cry_8_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_179/ADCStateMachine_2/un19_nobxs_cry_8_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_179_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_179/ADCStateMachine_2/un19_nobxs_cry_8_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_179_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_179/ADCStateMachine_2/un19_nobxs_cry_8_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un19_nobxs_cry_8_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_179/ADCStateMachine_2/un19_nobxs_cry_8_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_179/ADCStateMachine_2/un19_nobxs_cry_8_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_180 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_180/ADCStateMachine_2/un19_nobxs_cry_6_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_180/ADCStateMachine_2/un19_nobxs_cry_6_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_180_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_180/ADCStateMachine_2/un19_nobxs_cry_6_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_180_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_180/ADCStateMachine_2/un19_nobxs_cry_6_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un19_nobxs_cry_6_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_180/ADCStateMachine_2/un19_nobxs_cry_6_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_180/ADCStateMachine_2/un19_nobxs_cry_6_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_181 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_181/ADCStateMachine_2/un19_nobxs_cry_4_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_181/ADCStateMachine_2/un19_nobxs_cry_4_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_181_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_181/ADCStateMachine_2/un19_nobxs_cry_4_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_181_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_181/ADCStateMachine_2/un19_nobxs_cry_4_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un19_nobxs_cry_4_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_181/ADCStateMachine_2/un19_nobxs_cry_4_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_181/ADCStateMachine_2/un19_nobxs_cry_4_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_182 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_182/ADCStateMachine_2/un19_nobxs_cry_2_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_182/ADCStateMachine_2/un19_nobxs_cry_2_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_182_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_182/ADCStateMachine_2/un19_nobxs_cry_2_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_182_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_182/ADCStateMachine_2/un19_nobxs_cry_2_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un19_nobxs_cry_2_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_182/ADCStateMachine_2/un19_nobxs_cry_2_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_182/ADCStateMachine_2/un19_nobxs_cry_2_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_183 ( input A1, C0, B0, output Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_183/ADCStateMachine_2/un19_nobxs_cry_0_0_S1 , 
         GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_183_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_183/ADCStateMachine_2/un19_nobxs_cry_0_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20021 \ADCStateMachine_2/un19_nobxs_cry_0_0 ( .A0(GNDI), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(VCCI), .S0(), 
    .S1(\ADCStateMachine_2/SLICE_183/ADCStateMachine_2/un19_nobxs_cry_0_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => Q1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20021 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf03c;
  defparam inst1.INIT1 = 16'h300a;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_184 ( input B1, A1, B0, A0, FCI, output Q0, Q1 );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_184/ADCStateMachine_2/un12_usecxei_cry_14_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_184/ADCStateMachine_2/un12_usecxei_cry_14_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_184_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_184/ADCStateMachine_2/un12_usecxei_cry_14_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_184_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_184/ADCStateMachine_2/un12_usecxei_cry_14_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un12_usecxei_cry_14_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_184/ADCStateMachine_2/un12_usecxei_cry_14_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_184/ADCStateMachine_2/un12_usecxei_cry_14_0_S1 ), 
    .CO0(), .CO1());

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_185 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_185/ADCStateMachine_2/un12_usecxei_cry_12_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_185/ADCStateMachine_2/un12_usecxei_cry_12_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_185_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_185/ADCStateMachine_2/un12_usecxei_cry_12_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_185_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_185/ADCStateMachine_2/un12_usecxei_cry_12_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un12_usecxei_cry_12_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_185/ADCStateMachine_2/un12_usecxei_cry_12_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_185/ADCStateMachine_2/un12_usecxei_cry_12_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_186 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_186/ADCStateMachine_2/un12_usecxei_cry_10_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_186/ADCStateMachine_2/un12_usecxei_cry_10_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_186_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_186/ADCStateMachine_2/un12_usecxei_cry_10_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_186_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_186/ADCStateMachine_2/un12_usecxei_cry_10_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un12_usecxei_cry_10_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_186/ADCStateMachine_2/un12_usecxei_cry_10_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_186/ADCStateMachine_2/un12_usecxei_cry_10_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_187 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_187/ADCStateMachine_2/un12_usecxei_cry_8_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_187/ADCStateMachine_2/un12_usecxei_cry_8_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_187_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_187/ADCStateMachine_2/un12_usecxei_cry_8_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_187_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_187/ADCStateMachine_2/un12_usecxei_cry_8_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un12_usecxei_cry_8_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_187/ADCStateMachine_2/un12_usecxei_cry_8_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_187/ADCStateMachine_2/un12_usecxei_cry_8_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_188 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_188/ADCStateMachine_2/un12_usecxei_cry_6_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_188/ADCStateMachine_2/un12_usecxei_cry_6_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_188_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_188/ADCStateMachine_2/un12_usecxei_cry_6_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_188_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_188/ADCStateMachine_2/un12_usecxei_cry_6_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20022 \ADCStateMachine_2/un12_usecxei_cry_6_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_188/ADCStateMachine_2/un12_usecxei_cry_6_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_188/ADCStateMachine_2/un12_usecxei_cry_6_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20022 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5009;
  defparam inst1.INIT1 = 16'h5006;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_189 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_189/ADCStateMachine_2/un12_usecxei_cry_4_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_189/ADCStateMachine_2/un12_usecxei_cry_4_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_189_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_189/ADCStateMachine_2/un12_usecxei_cry_4_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_189_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_189/ADCStateMachine_2/un12_usecxei_cry_4_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un12_usecxei_cry_4_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_189/ADCStateMachine_2/un12_usecxei_cry_4_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_189/ADCStateMachine_2/un12_usecxei_cry_4_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_190 ( input B1, A1, B0, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_190/ADCStateMachine_2/un12_usecxei_cry_2_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_190/ADCStateMachine_2/un12_usecxei_cry_2_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_190_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_190/ADCStateMachine_2/un12_usecxei_cry_2_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_190_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_190/ADCStateMachine_2/un12_usecxei_cry_2_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20020 \ADCStateMachine_2/un12_usecxei_cry_2_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_190/ADCStateMachine_2/un12_usecxei_cry_2_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_190/ADCStateMachine_2/un12_usecxei_cry_2_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_191 ( input B1, A1, B0, A0, output Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_191/ADCStateMachine_2/un12_usecxei_cry_0_0_S1 , 
         GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_191_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_191/ADCStateMachine_2/un12_usecxei_cry_0_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20020 \ADCStateMachine_2/un12_usecxei_cry_0_0 ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), 
    .S1(\ADCStateMachine_2/SLICE_191/ADCStateMachine_2/un12_usecxei_cry_0_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_192 ( input A0, FCI, output Q0 );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_192/ADCStateMachine_2/un27_nobxs_s_15_0_S0 , 
         GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_192_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_192/ADCStateMachine_2/un27_nobxs_s_15_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20017 \ADCStateMachine_2/un27_nobxs_s_15_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_192/ADCStateMachine_2/un27_nobxs_s_15_0_S0 ), 
    .S1(), .CO0(), .CO1());

  specify
    (A0 => Q0) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_193 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_193/ADCStateMachine_2/un27_nobxs_cry_13_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_193/ADCStateMachine_2/un27_nobxs_cry_13_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_193_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_193/ADCStateMachine_2/un27_nobxs_cry_13_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_193_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_193/ADCStateMachine_2/un27_nobxs_cry_13_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un27_nobxs_cry_13_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_193/ADCStateMachine_2/un27_nobxs_cry_13_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_193/ADCStateMachine_2/un27_nobxs_cry_13_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_194 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_194/ADCStateMachine_2/un27_nobxs_cry_11_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_194/ADCStateMachine_2/un27_nobxs_cry_11_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_194_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_194/ADCStateMachine_2/un27_nobxs_cry_11_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_194_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_194/ADCStateMachine_2/un27_nobxs_cry_11_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un27_nobxs_cry_11_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_194/ADCStateMachine_2/un27_nobxs_cry_11_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_194/ADCStateMachine_2/un27_nobxs_cry_11_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_195 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_195/ADCStateMachine_2/un27_nobxs_cry_9_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_195/ADCStateMachine_2/un27_nobxs_cry_9_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_195_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_195/ADCStateMachine_2/un27_nobxs_cry_9_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_195_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_195/ADCStateMachine_2/un27_nobxs_cry_9_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un27_nobxs_cry_9_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_195/ADCStateMachine_2/un27_nobxs_cry_9_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_195/ADCStateMachine_2/un27_nobxs_cry_9_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_196 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_196/ADCStateMachine_2/un27_nobxs_cry_7_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_196/ADCStateMachine_2/un27_nobxs_cry_7_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_196_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_196/ADCStateMachine_2/un27_nobxs_cry_7_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_196_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_196/ADCStateMachine_2/un27_nobxs_cry_7_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un27_nobxs_cry_7_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_196/ADCStateMachine_2/un27_nobxs_cry_7_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_196/ADCStateMachine_2/un27_nobxs_cry_7_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_197 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_197/ADCStateMachine_2/un27_nobxs_cry_5_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_197/ADCStateMachine_2/un27_nobxs_cry_5_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_197_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_197/ADCStateMachine_2/un27_nobxs_cry_5_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_197_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_197/ADCStateMachine_2/un27_nobxs_cry_5_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20018 \ADCStateMachine_2/un27_nobxs_cry_5_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_197/ADCStateMachine_2/un27_nobxs_cry_5_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_197/ADCStateMachine_2/un27_nobxs_cry_5_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_198 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_198/ADCStateMachine_2/un27_nobxs_cry_3_0_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_198/ADCStateMachine_2/un27_nobxs_cry_3_0_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_198_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_198/ADCStateMachine_2/un27_nobxs_cry_3_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_198_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_198/ADCStateMachine_2/un27_nobxs_cry_3_0_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20006 \ADCStateMachine_2/un27_nobxs_cry_3_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_198/ADCStateMachine_2/un27_nobxs_cry_3_0_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_198/ADCStateMachine_2/un27_nobxs_cry_3_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_199 ( input A1, A0, output Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_199/ADCStateMachine_2/un27_nobxs_cry_1_0_S1 , 
         GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_199_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_199/ADCStateMachine_2/un27_nobxs_cry_1_0_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20019 \ADCStateMachine_2/un27_nobxs_cry_1_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), 
    .S1(\ADCStateMachine_2/SLICE_199/ADCStateMachine_2/un27_nobxs_cry_1_0_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_200 ( input A0, FCI, output Q0 );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_200/ADCStateMachine_2/DividerColxDP_s_0[32]_S0 , 
         GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_200_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_200/ADCStateMachine_2/DividerColxDP_s_0[32]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20023 \ADCStateMachine_2/DividerColxDP_s_0[32] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_200/ADCStateMachine_2/DividerColxDP_s_0[32]_S0 ), 
    .S1(), .CO0(), .CO1());

  specify
    (A0 => Q0) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20023 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h5006;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_201 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_201/ADCStateMachine_2/DividerColxDP_cry_0[30]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_201/ADCStateMachine_2/DividerColxDP_cry_0[30]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_201_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_201/ADCStateMachine_2/DividerColxDP_cry_0[30]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_201_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_201/ADCStateMachine_2/DividerColxDP_cry_0[30]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[30] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_201/ADCStateMachine_2/DividerColxDP_cry_0[30]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_201/ADCStateMachine_2/DividerColxDP_cry_0[30]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20024 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf006;
  defparam inst1.INIT1 = 16'hf006;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_202 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_202/ADCStateMachine_2/DividerColxDP_cry_0[28]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_202/ADCStateMachine_2/DividerColxDP_cry_0[28]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_202_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_202/ADCStateMachine_2/DividerColxDP_cry_0[28]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_202_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_202/ADCStateMachine_2/DividerColxDP_cry_0[28]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[28] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_202/ADCStateMachine_2/DividerColxDP_cry_0[28]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_202/ADCStateMachine_2/DividerColxDP_cry_0[28]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_203 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_203/ADCStateMachine_2/DividerColxDP_cry_0[26]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_203/ADCStateMachine_2/DividerColxDP_cry_0[26]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_203_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_203/ADCStateMachine_2/DividerColxDP_cry_0[26]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_203_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_203/ADCStateMachine_2/DividerColxDP_cry_0[26]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[26] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_203/ADCStateMachine_2/DividerColxDP_cry_0[26]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_203/ADCStateMachine_2/DividerColxDP_cry_0[26]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_204 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_204/ADCStateMachine_2/DividerColxDP_cry_0[24]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_204/ADCStateMachine_2/DividerColxDP_cry_0[24]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_204_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_204/ADCStateMachine_2/DividerColxDP_cry_0[24]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_204_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_204/ADCStateMachine_2/DividerColxDP_cry_0[24]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[24] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_204/ADCStateMachine_2/DividerColxDP_cry_0[24]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_204/ADCStateMachine_2/DividerColxDP_cry_0[24]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_205 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_205/ADCStateMachine_2/DividerColxDP_cry_0[22]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_205/ADCStateMachine_2/DividerColxDP_cry_0[22]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_205_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_205/ADCStateMachine_2/DividerColxDP_cry_0[22]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_205_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_205/ADCStateMachine_2/DividerColxDP_cry_0[22]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[22] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_205/ADCStateMachine_2/DividerColxDP_cry_0[22]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_205/ADCStateMachine_2/DividerColxDP_cry_0[22]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_206 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_206/ADCStateMachine_2/DividerColxDP_cry_0[20]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_206/ADCStateMachine_2/DividerColxDP_cry_0[20]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_206_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_206/ADCStateMachine_2/DividerColxDP_cry_0[20]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_206_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_206/ADCStateMachine_2/DividerColxDP_cry_0[20]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[20] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_206/ADCStateMachine_2/DividerColxDP_cry_0[20]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_206/ADCStateMachine_2/DividerColxDP_cry_0[20]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_207 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_207/ADCStateMachine_2/DividerColxDP_cry_0[18]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_207/ADCStateMachine_2/DividerColxDP_cry_0[18]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_207_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_207/ADCStateMachine_2/DividerColxDP_cry_0[18]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_207_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_207/ADCStateMachine_2/DividerColxDP_cry_0[18]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[18] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_207/ADCStateMachine_2/DividerColxDP_cry_0[18]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_207/ADCStateMachine_2/DividerColxDP_cry_0[18]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_208 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_208/ADCStateMachine_2/DividerColxDP_cry_0[16]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_208/ADCStateMachine_2/DividerColxDP_cry_0[16]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_208_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_208/ADCStateMachine_2/DividerColxDP_cry_0[16]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_208_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_208/ADCStateMachine_2/DividerColxDP_cry_0[16]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[16] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_208/ADCStateMachine_2/DividerColxDP_cry_0[16]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_208/ADCStateMachine_2/DividerColxDP_cry_0[16]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_209 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_209/ADCStateMachine_2/DividerColxDP_cry_0[14]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_209/ADCStateMachine_2/DividerColxDP_cry_0[14]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_209_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_209/ADCStateMachine_2/DividerColxDP_cry_0[14]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_209_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_209/ADCStateMachine_2/DividerColxDP_cry_0[14]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[14] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_209/ADCStateMachine_2/DividerColxDP_cry_0[14]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_209/ADCStateMachine_2/DividerColxDP_cry_0[14]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_210 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_210/ADCStateMachine_2/DividerColxDP_cry_0[12]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_210/ADCStateMachine_2/DividerColxDP_cry_0[12]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_210_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_210/ADCStateMachine_2/DividerColxDP_cry_0[12]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_210_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_210/ADCStateMachine_2/DividerColxDP_cry_0[12]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[12] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_210/ADCStateMachine_2/DividerColxDP_cry_0[12]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_210/ADCStateMachine_2/DividerColxDP_cry_0[12]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_211 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_211/ADCStateMachine_2/DividerColxDP_cry_0[10]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_211/ADCStateMachine_2/DividerColxDP_cry_0[10]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_211_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_211/ADCStateMachine_2/DividerColxDP_cry_0[10]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_211_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_211/ADCStateMachine_2/DividerColxDP_cry_0[10]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[10] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_211/ADCStateMachine_2/DividerColxDP_cry_0[10]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_211/ADCStateMachine_2/DividerColxDP_cry_0[10]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_212 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_212/ADCStateMachine_2/DividerColxDP_cry_0[8]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_212/ADCStateMachine_2/DividerColxDP_cry_0[8]_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_212_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_212/ADCStateMachine_2/DividerColxDP_cry_0[8]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_212_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_212/ADCStateMachine_2/DividerColxDP_cry_0[8]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[8] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_212/ADCStateMachine_2/DividerColxDP_cry_0[8]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_212/ADCStateMachine_2/DividerColxDP_cry_0[8]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_213 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_213/ADCStateMachine_2/DividerColxDP_cry_0[6]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_213/ADCStateMachine_2/DividerColxDP_cry_0[6]_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_213_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_213/ADCStateMachine_2/DividerColxDP_cry_0[6]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_213_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_213/ADCStateMachine_2/DividerColxDP_cry_0[6]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[6] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_213/ADCStateMachine_2/DividerColxDP_cry_0[6]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_213/ADCStateMachine_2/DividerColxDP_cry_0[6]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_214 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_214/ADCStateMachine_2/DividerColxDP_cry_0[4]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_214/ADCStateMachine_2/DividerColxDP_cry_0[4]_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_214_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_214/ADCStateMachine_2/DividerColxDP_cry_0[4]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_214_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_214/ADCStateMachine_2/DividerColxDP_cry_0[4]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[4] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_214/ADCStateMachine_2/DividerColxDP_cry_0[4]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_214/ADCStateMachine_2/DividerColxDP_cry_0[4]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_215 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_215/ADCStateMachine_2/DividerColxDP_cry_0[2]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_215/ADCStateMachine_2/DividerColxDP_cry_0[2]_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_215_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_215/ADCStateMachine_2/DividerColxDP_cry_0[2]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_215_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_215/ADCStateMachine_2/DividerColxDP_cry_0[2]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[2] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_215/ADCStateMachine_2/DividerColxDP_cry_0[2]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_215/ADCStateMachine_2/DividerColxDP_cry_0[2]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_216 ( input A1, A0, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_216/ADCStateMachine_2/DividerColxDP_cry_0[0]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_216/ADCStateMachine_2/DividerColxDP_cry_0[0]_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_216_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_216/ADCStateMachine_2/DividerColxDP_cry_0[0]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_216_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_216/ADCStateMachine_2/DividerColxDP_cry_0[0]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerColxDP_cry_0[0] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(VCCI), 
    .S0(\ADCStateMachine_2/SLICE_216/ADCStateMachine_2/DividerColxDP_cry_0[0]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_216/ADCStateMachine_2/DividerColxDP_cry_0[0]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_217 ( input A0, FCI, output Q0 );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_217/ADCStateMachine_2/CountRowxDP_s_0[4]_S0 , 
         GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_217_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_217/ADCStateMachine_2/CountRowxDP_s_0[4]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20023 \ADCStateMachine_2/CountRowxDP_s_0[4] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_217/ADCStateMachine_2/CountRowxDP_s_0[4]_S0 ), 
    .S1(), .CO0(), .CO1());

  specify
    (A0 => Q0) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_218 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_218/ADCStateMachine_2/CountRowxDP_cry_0[2]_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_218/ADCStateMachine_2/CountRowxDP_cry_0[2]_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_218_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_218/ADCStateMachine_2/CountRowxDP_cry_0[2]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_218_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_218/ADCStateMachine_2/CountRowxDP_cry_0[2]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/CountRowxDP_cry_0[2] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_218/ADCStateMachine_2/CountRowxDP_cry_0[2]_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_218/ADCStateMachine_2/CountRowxDP_cry_0[2]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_219 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_219/ADCStateMachine_2/CountRowxDP_cry_0[0]_S1 , 
         GNDI, 
         \ADCStateMachine_2/SLICE_219/ADCStateMachine_2/CountRowxDP_cry_0[0]_S0 ;

  vmuxregsre \ADCStateMachine_2/SLICE_219_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_219/ADCStateMachine_2/CountRowxDP_cry_0[0]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_219_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_219/ADCStateMachine_2/CountRowxDP_cry_0[0]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/CountRowxDP_cry_0[0] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_219/ADCStateMachine_2/CountRowxDP_cry_0[0]_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_219/ADCStateMachine_2/CountRowxDP_cry_0[0]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_220 ( input C1, A1, C0, A0, CE, LSR, CLK, FCI, 
    output Q0, Q1 );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_220/ADCStateMachine_2/CountColxDP_cry_0[16]_S1 , 
         \ADCStateMachine_2/SLICE_220/ADCStateMachine_2/CountColxDP_cry_0[16]_S0 , 
         GNDI, C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, CE_dly, LSR_dly, 
         FCI_dly;

  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[17] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_220/ADCStateMachine_2/CountColxDP_cry_0[16]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[16] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_220/ADCStateMachine_2/CountColxDP_cry_0[16]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20026 \ADCStateMachine_2/CountColxDP_cry_0[16] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\ADCStateMachine_2/SLICE_220/ADCStateMachine_2/CountColxDP_cry_0[16]_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_220/ADCStateMachine_2/CountColxDP_cry_0[16]_S1 ), 
    .CO0(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module vmuxregsre0025 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module ccu20026 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf0d8;
  defparam inst1.INIT1 = 16'ha0d8;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_221 ( input C1, A1, C0, A0, CE, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_221/ADCStateMachine_2/CountColxDP_cry_0[14]_S1 , 
         \ADCStateMachine_2/SLICE_221/ADCStateMachine_2/CountColxDP_cry_0[14]_S0 , 
         GNDI, C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, CE_dly, LSR_dly, 
         FCI_dly;

  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[15] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_221/ADCStateMachine_2/CountColxDP_cry_0[14]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[14] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_221/ADCStateMachine_2/CountColxDP_cry_0[14]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20027 \ADCStateMachine_2/CountColxDP_cry_0[14] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\ADCStateMachine_2/SLICE_221/ADCStateMachine_2/CountColxDP_cry_0[14]_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_221/ADCStateMachine_2/CountColxDP_cry_0[14]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module ccu20027 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf0d8;
  defparam inst1.INIT1 = 16'hf0d8;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module ADCStateMachine_2_SLICE_222 ( input C1, A1, C0, A0, CE, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_222/ADCStateMachine_2/CountColxDP_cry_0[12]_S1 , 
         \ADCStateMachine_2/SLICE_222/ADCStateMachine_2/CountColxDP_cry_0[12]_S0 , 
         GNDI, C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, CE_dly, LSR_dly, 
         FCI_dly;

  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[13] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_222/ADCStateMachine_2/CountColxDP_cry_0[12]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[12] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_222/ADCStateMachine_2/CountColxDP_cry_0[12]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20027 \ADCStateMachine_2/CountColxDP_cry_0[12] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\ADCStateMachine_2/SLICE_222/ADCStateMachine_2/CountColxDP_cry_0[12]_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_222/ADCStateMachine_2/CountColxDP_cry_0[12]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_223 ( input C1, A1, C0, A0, CE, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_223/ADCStateMachine_2/CountColxDP_cry_0[10]_S1 , 
         \ADCStateMachine_2/SLICE_223/ADCStateMachine_2/CountColxDP_cry_0[10]_S0 , 
         GNDI, C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, CE_dly, LSR_dly, 
         FCI_dly;

  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[11] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_223/ADCStateMachine_2/CountColxDP_cry_0[10]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[10] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_223/ADCStateMachine_2/CountColxDP_cry_0[10]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20027 \ADCStateMachine_2/CountColxDP_cry_0[10] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\ADCStateMachine_2/SLICE_223/ADCStateMachine_2/CountColxDP_cry_0[10]_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_223/ADCStateMachine_2/CountColxDP_cry_0[10]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_224 ( input C1, A1, C0, A0, CE, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_224/ADCStateMachine_2/CountColxDP_cry_0[8]_S1 , 
         \ADCStateMachine_2/SLICE_224/ADCStateMachine_2/CountColxDP_cry_0[8]_S0 , 
         GNDI, C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, CE_dly, LSR_dly, 
         FCI_dly;

  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[9] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_224/ADCStateMachine_2/CountColxDP_cry_0[8]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[8] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_224/ADCStateMachine_2/CountColxDP_cry_0[8]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20027 \ADCStateMachine_2/CountColxDP_cry_0[8] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\ADCStateMachine_2/SLICE_224/ADCStateMachine_2/CountColxDP_cry_0[8]_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_224/ADCStateMachine_2/CountColxDP_cry_0[8]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_225 ( input C1, A1, C0, A0, CE, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_225/ADCStateMachine_2/CountColxDP_cry_0[6]_S1 , 
         \ADCStateMachine_2/SLICE_225/ADCStateMachine_2/CountColxDP_cry_0[6]_S0 , 
         GNDI, C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, CE_dly, LSR_dly, 
         FCI_dly;

  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[7] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_225/ADCStateMachine_2/CountColxDP_cry_0[6]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[6] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_225/ADCStateMachine_2/CountColxDP_cry_0[6]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20027 \ADCStateMachine_2/CountColxDP_cry_0[6] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\ADCStateMachine_2/SLICE_225/ADCStateMachine_2/CountColxDP_cry_0[6]_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_225/ADCStateMachine_2/CountColxDP_cry_0[6]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_226 ( input C1, A1, C0, A0, CE, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_226/ADCStateMachine_2/CountColxDP_cry_0[4]_S1 , 
         \ADCStateMachine_2/SLICE_226/ADCStateMachine_2/CountColxDP_cry_0[4]_S0 , 
         GNDI, C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, CE_dly, LSR_dly, 
         FCI_dly;

  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[5] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_226/ADCStateMachine_2/CountColxDP_cry_0[4]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[4] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_226/ADCStateMachine_2/CountColxDP_cry_0[4]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20027 \ADCStateMachine_2/CountColxDP_cry_0[4] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\ADCStateMachine_2/SLICE_226/ADCStateMachine_2/CountColxDP_cry_0[4]_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_226/ADCStateMachine_2/CountColxDP_cry_0[4]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_227 ( input C1, A1, C0, A0, CE, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_227/ADCStateMachine_2/CountColxDP_cry_0[2]_S1 , 
         \ADCStateMachine_2/SLICE_227/ADCStateMachine_2/CountColxDP_cry_0[2]_S0 , 
         GNDI, C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, CE_dly, LSR_dly, 
         FCI_dly;

  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[3] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_227/ADCStateMachine_2/CountColxDP_cry_0[2]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[2] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_227/ADCStateMachine_2/CountColxDP_cry_0[2]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20027 \ADCStateMachine_2/CountColxDP_cry_0[2] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\ADCStateMachine_2/SLICE_227/ADCStateMachine_2/CountColxDP_cry_0[2]_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_227/ADCStateMachine_2/CountColxDP_cry_0[2]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_228 ( input C1, A1, C0, A0, CE, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_228/ADCStateMachine_2/CountColxDP_cry_0[0]_S1 , 
         \ADCStateMachine_2/SLICE_228/ADCStateMachine_2/CountColxDP_cry_0[0]_S0 , 
         GNDI, C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, CE_dly, LSR_dly, 
         FCI_dly;

  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[1] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_228/ADCStateMachine_2/CountColxDP_cry_0[0]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/CountColxDP[0] ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_228/ADCStateMachine_2/CountColxDP_cry_0[0]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20027 \ADCStateMachine_2/CountColxDP_cry_0[0] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\ADCStateMachine_2/SLICE_228/ADCStateMachine_2/CountColxDP_cry_0[0]_S0 ), 
    .S1(\ADCStateMachine_2/SLICE_228/ADCStateMachine_2/CountColxDP_cry_0[0]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_229 ( input A0, FCI, output Q0 );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_229/ADCStateMachine_2/DividerRowxDP_s_s1_0[16]_S0 
         , GNDI;

  vmuxregsre \ADCStateMachine_2/SLICE_229_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_229/ADCStateMachine_2/DividerRowxDP_s_s1_0[16]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20023 \ADCStateMachine_2/DividerRowxDP_s_s1_0[16] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_229/ADCStateMachine_2/DividerRowxDP_s_s1_0[16]_S0 )
    , .S1(), .CO0(), .CO1());

  specify
    (A0 => Q0) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_230 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_230/ADCStateMachine_2/DividerRowxDP_cry_s1_0[14]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_230/ADCStateMachine_2/DividerRowxDP_cry_s1_0[14]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_230_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_230/ADCStateMachine_2/DividerRowxDP_cry_s1_0[14]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_230_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_230/ADCStateMachine_2/DividerRowxDP_cry_s1_0[14]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerRowxDP_cry_s1_0[14] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_230/ADCStateMachine_2/DividerRowxDP_cry_s1_0[14]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_230/ADCStateMachine_2/DividerRowxDP_cry_s1_0[14]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_231 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_231/ADCStateMachine_2/DividerRowxDP_cry_s1_0[12]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_231/ADCStateMachine_2/DividerRowxDP_cry_s1_0[12]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_231_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_231/ADCStateMachine_2/DividerRowxDP_cry_s1_0[12]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_231_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_231/ADCStateMachine_2/DividerRowxDP_cry_s1_0[12]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerRowxDP_cry_s1_0[12] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_231/ADCStateMachine_2/DividerRowxDP_cry_s1_0[12]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_231/ADCStateMachine_2/DividerRowxDP_cry_s1_0[12]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_232 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_232/ADCStateMachine_2/DividerRowxDP_cry_s1_0[10]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_232/ADCStateMachine_2/DividerRowxDP_cry_s1_0[10]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_232_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_232/ADCStateMachine_2/DividerRowxDP_cry_s1_0[10]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_232_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_232/ADCStateMachine_2/DividerRowxDP_cry_s1_0[10]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerRowxDP_cry_s1_0[10] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_232/ADCStateMachine_2/DividerRowxDP_cry_s1_0[10]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_232/ADCStateMachine_2/DividerRowxDP_cry_s1_0[10]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_233 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_233/ADCStateMachine_2/DividerRowxDP_cry_s1_0[8]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_233/ADCStateMachine_2/DividerRowxDP_cry_s1_0[8]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_233_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_233/ADCStateMachine_2/DividerRowxDP_cry_s1_0[8]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_233_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_233/ADCStateMachine_2/DividerRowxDP_cry_s1_0[8]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerRowxDP_cry_s1_0[8] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_233/ADCStateMachine_2/DividerRowxDP_cry_s1_0[8]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_233/ADCStateMachine_2/DividerRowxDP_cry_s1_0[8]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_234 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_234/ADCStateMachine_2/DividerRowxDP_cry_s1_0[6]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_234/ADCStateMachine_2/DividerRowxDP_cry_s1_0[6]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_234_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_234/ADCStateMachine_2/DividerRowxDP_cry_s1_0[6]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_234_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_234/ADCStateMachine_2/DividerRowxDP_cry_s1_0[6]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerRowxDP_cry_s1_0[6] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_234/ADCStateMachine_2/DividerRowxDP_cry_s1_0[6]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_234/ADCStateMachine_2/DividerRowxDP_cry_s1_0[6]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_235 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_235/ADCStateMachine_2/DividerRowxDP_cry_s1_0[4]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_235/ADCStateMachine_2/DividerRowxDP_cry_s1_0[4]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_235_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_235/ADCStateMachine_2/DividerRowxDP_cry_s1_0[4]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_235_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_235/ADCStateMachine_2/DividerRowxDP_cry_s1_0[4]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerRowxDP_cry_s1_0[4] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_235/ADCStateMachine_2/DividerRowxDP_cry_s1_0[4]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_235/ADCStateMachine_2/DividerRowxDP_cry_s1_0[4]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_236 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_236/ADCStateMachine_2/DividerRowxDP_cry_s1_0[2]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_236/ADCStateMachine_2/DividerRowxDP_cry_s1_0[2]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_236_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_236/ADCStateMachine_2/DividerRowxDP_cry_s1_0[2]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_236_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_236/ADCStateMachine_2/DividerRowxDP_cry_s1_0[2]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerRowxDP_cry_s1_0[2] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\ADCStateMachine_2/SLICE_236/ADCStateMachine_2/DividerRowxDP_cry_s1_0[2]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_236/ADCStateMachine_2/DividerRowxDP_cry_s1_0[2]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_237 ( input A1, A0, output Q0, Q1, FCO );
  wire   VCCI, 
         \ADCStateMachine_2/SLICE_237/ADCStateMachine_2/DividerRowxDP_cry_s1_0[0]_S1 
         , GNDI, 
         \ADCStateMachine_2/SLICE_237/ADCStateMachine_2/DividerRowxDP_cry_s1_0[0]_S0 
         ;

  vmuxregsre \ADCStateMachine_2/SLICE_237_REG1 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_237/ADCStateMachine_2/DividerRowxDP_cry_s1_0[0]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ADCStateMachine_2/SLICE_237_REG0 ( .D0(VCCI), 
    .D1(\ADCStateMachine_2/SLICE_237/ADCStateMachine_2/DividerRowxDP_cry_s1_0[0]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \ADCStateMachine_2/DividerRowxDP_cry_s1_0[0] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(VCCI), 
    .S0(\ADCStateMachine_2/SLICE_237/ADCStateMachine_2/DividerRowxDP_cry_s1_0[0]_S0 )
    , 
    .S1(\ADCStateMachine_2/SLICE_237/ADCStateMachine_2/DividerRowxDP_cry_s1_0[0]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_238 ( input A0, FCI, output Q0 );
  wire   VCCI, 
         \cDVSResetStateMachine_1/SLICE_238/cDVSResetStateMachine_1/CountxDP_s_0[18]_S0 
         , GNDI;

  vmuxregsre \cDVSResetStateMachine_1/SLICE_238_REG0 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_238/cDVSResetStateMachine_1/CountxDP_s_0[18]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20023 \cDVSResetStateMachine_1/CountxDP_s_0[18] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\cDVSResetStateMachine_1/SLICE_238/cDVSResetStateMachine_1/CountxDP_s_0[18]_S0 )
    , .S1(), .CO0(), .CO1());

  specify
    (A0 => Q0) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_239 ( input A1, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \cDVSResetStateMachine_1/SLICE_239/cDVSResetStateMachine_1/CountxDP_cry_0[16]_S1 
         , GNDI, 
         \cDVSResetStateMachine_1/SLICE_239/cDVSResetStateMachine_1/CountxDP_cry_0[16]_S0 
         ;

  vmuxregsre \cDVSResetStateMachine_1/SLICE_239_REG1 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_239/cDVSResetStateMachine_1/CountxDP_cry_0[16]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cDVSResetStateMachine_1/SLICE_239_REG0 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_239/cDVSResetStateMachine_1/CountxDP_cry_0[16]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \cDVSResetStateMachine_1/CountxDP_cry_0[16] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\cDVSResetStateMachine_1/SLICE_239/cDVSResetStateMachine_1/CountxDP_cry_0[16]_S0 )
    , 
    .S1(\cDVSResetStateMachine_1/SLICE_239/cDVSResetStateMachine_1/CountxDP_cry_0[16]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_240 ( input A1, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \cDVSResetStateMachine_1/SLICE_240/cDVSResetStateMachine_1/CountxDP_cry_0[14]_S1 
         , GNDI, 
         \cDVSResetStateMachine_1/SLICE_240/cDVSResetStateMachine_1/CountxDP_cry_0[14]_S0 
         ;

  vmuxregsre \cDVSResetStateMachine_1/SLICE_240_REG1 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_240/cDVSResetStateMachine_1/CountxDP_cry_0[14]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cDVSResetStateMachine_1/SLICE_240_REG0 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_240/cDVSResetStateMachine_1/CountxDP_cry_0[14]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \cDVSResetStateMachine_1/CountxDP_cry_0[14] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\cDVSResetStateMachine_1/SLICE_240/cDVSResetStateMachine_1/CountxDP_cry_0[14]_S0 )
    , 
    .S1(\cDVSResetStateMachine_1/SLICE_240/cDVSResetStateMachine_1/CountxDP_cry_0[14]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_241 ( input A1, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \cDVSResetStateMachine_1/SLICE_241/cDVSResetStateMachine_1/CountxDP_cry_0[12]_S1 
         , GNDI, 
         \cDVSResetStateMachine_1/SLICE_241/cDVSResetStateMachine_1/CountxDP_cry_0[12]_S0 
         ;

  vmuxregsre \cDVSResetStateMachine_1/SLICE_241_REG1 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_241/cDVSResetStateMachine_1/CountxDP_cry_0[12]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cDVSResetStateMachine_1/SLICE_241_REG0 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_241/cDVSResetStateMachine_1/CountxDP_cry_0[12]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \cDVSResetStateMachine_1/CountxDP_cry_0[12] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\cDVSResetStateMachine_1/SLICE_241/cDVSResetStateMachine_1/CountxDP_cry_0[12]_S0 )
    , 
    .S1(\cDVSResetStateMachine_1/SLICE_241/cDVSResetStateMachine_1/CountxDP_cry_0[12]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_242 ( input A1, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \cDVSResetStateMachine_1/SLICE_242/cDVSResetStateMachine_1/CountxDP_cry_0[10]_S1 
         , GNDI, 
         \cDVSResetStateMachine_1/SLICE_242/cDVSResetStateMachine_1/CountxDP_cry_0[10]_S0 
         ;

  vmuxregsre \cDVSResetStateMachine_1/SLICE_242_REG1 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_242/cDVSResetStateMachine_1/CountxDP_cry_0[10]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cDVSResetStateMachine_1/SLICE_242_REG0 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_242/cDVSResetStateMachine_1/CountxDP_cry_0[10]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \cDVSResetStateMachine_1/CountxDP_cry_0[10] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\cDVSResetStateMachine_1/SLICE_242/cDVSResetStateMachine_1/CountxDP_cry_0[10]_S0 )
    , 
    .S1(\cDVSResetStateMachine_1/SLICE_242/cDVSResetStateMachine_1/CountxDP_cry_0[10]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_243 ( input A1, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \cDVSResetStateMachine_1/SLICE_243/cDVSResetStateMachine_1/CountxDP_cry_0[8]_S1 
         , GNDI, 
         \cDVSResetStateMachine_1/SLICE_243/cDVSResetStateMachine_1/CountxDP_cry_0[8]_S0 
         ;

  vmuxregsre \cDVSResetStateMachine_1/SLICE_243_REG1 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_243/cDVSResetStateMachine_1/CountxDP_cry_0[8]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cDVSResetStateMachine_1/SLICE_243_REG0 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_243/cDVSResetStateMachine_1/CountxDP_cry_0[8]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \cDVSResetStateMachine_1/CountxDP_cry_0[8] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\cDVSResetStateMachine_1/SLICE_243/cDVSResetStateMachine_1/CountxDP_cry_0[8]_S0 )
    , 
    .S1(\cDVSResetStateMachine_1/SLICE_243/cDVSResetStateMachine_1/CountxDP_cry_0[8]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_244 ( input A1, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \cDVSResetStateMachine_1/SLICE_244/cDVSResetStateMachine_1/CountxDP_cry_0[6]_S1 
         , GNDI, 
         \cDVSResetStateMachine_1/SLICE_244/cDVSResetStateMachine_1/CountxDP_cry_0[6]_S0 
         ;

  vmuxregsre \cDVSResetStateMachine_1/SLICE_244_REG1 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_244/cDVSResetStateMachine_1/CountxDP_cry_0[6]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cDVSResetStateMachine_1/SLICE_244_REG0 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_244/cDVSResetStateMachine_1/CountxDP_cry_0[6]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \cDVSResetStateMachine_1/CountxDP_cry_0[6] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\cDVSResetStateMachine_1/SLICE_244/cDVSResetStateMachine_1/CountxDP_cry_0[6]_S0 )
    , 
    .S1(\cDVSResetStateMachine_1/SLICE_244/cDVSResetStateMachine_1/CountxDP_cry_0[6]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_245 ( input A1, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \cDVSResetStateMachine_1/SLICE_245/cDVSResetStateMachine_1/CountxDP_cry_0[4]_S1 
         , GNDI, 
         \cDVSResetStateMachine_1/SLICE_245/cDVSResetStateMachine_1/CountxDP_cry_0[4]_S0 
         ;

  vmuxregsre \cDVSResetStateMachine_1/SLICE_245_REG1 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_245/cDVSResetStateMachine_1/CountxDP_cry_0[4]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cDVSResetStateMachine_1/SLICE_245_REG0 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_245/cDVSResetStateMachine_1/CountxDP_cry_0[4]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \cDVSResetStateMachine_1/CountxDP_cry_0[4] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\cDVSResetStateMachine_1/SLICE_245/cDVSResetStateMachine_1/CountxDP_cry_0[4]_S0 )
    , 
    .S1(\cDVSResetStateMachine_1/SLICE_245/cDVSResetStateMachine_1/CountxDP_cry_0[4]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_246 ( input A1, A0, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \cDVSResetStateMachine_1/SLICE_246/cDVSResetStateMachine_1/CountxDP_cry_0[2]_S1 
         , GNDI, 
         \cDVSResetStateMachine_1/SLICE_246/cDVSResetStateMachine_1/CountxDP_cry_0[2]_S0 
         ;

  vmuxregsre \cDVSResetStateMachine_1/SLICE_246_REG1 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_246/cDVSResetStateMachine_1/CountxDP_cry_0[2]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cDVSResetStateMachine_1/SLICE_246_REG0 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_246/cDVSResetStateMachine_1/CountxDP_cry_0[2]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \cDVSResetStateMachine_1/CountxDP_cry_0[2] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\cDVSResetStateMachine_1/SLICE_246/cDVSResetStateMachine_1/CountxDP_cry_0[2]_S0 )
    , 
    .S1(\cDVSResetStateMachine_1/SLICE_246/cDVSResetStateMachine_1/CountxDP_cry_0[2]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_247 ( input A1, A0, output Q0, Q1, FCO );
  wire   VCCI, 
         \cDVSResetStateMachine_1/SLICE_247/cDVSResetStateMachine_1/CountxDP_cry_0[0]_S1 
         , GNDI, 
         \cDVSResetStateMachine_1/SLICE_247/cDVSResetStateMachine_1/CountxDP_cry_0[0]_S0 
         ;

  vmuxregsre \cDVSResetStateMachine_1/SLICE_247_REG1 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_247/cDVSResetStateMachine_1/CountxDP_cry_0[0]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cDVSResetStateMachine_1/SLICE_247_REG0 ( .D0(VCCI), 
    .D1(\cDVSResetStateMachine_1/SLICE_247/cDVSResetStateMachine_1/CountxDP_cry_0[0]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \cDVSResetStateMachine_1/CountxDP_cry_0[0] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(VCCI), 
    .S0(\cDVSResetStateMachine_1/SLICE_247/cDVSResetStateMachine_1/CountxDP_cry_0[0]_S0 )
    , 
    .S1(\cDVSResetStateMachine_1/SLICE_247/cDVSResetStateMachine_1/CountxDP_cry_0[0]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_248 ( input C1, B1, A1, C0, B0, A0, FCI, 
    output Q0, Q1 );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_248/monitorStateMachine_1/TimestampOverflowxDP_cry_0[14]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_248/monitorStateMachine_1/TimestampOverflowxDP_cry_0[14]_S0 
         ;

  vmuxregsre \monitorStateMachine_1/SLICE_248_REG1 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_248/monitorStateMachine_1/TimestampOverflowxDP_cry_0[14]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \monitorStateMachine_1/SLICE_248_REG0 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_248/monitorStateMachine_1/TimestampOverflowxDP_cry_0[14]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20028 \monitorStateMachine_1/TimestampOverflowxDP_cry_0[14] ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), 
    .CI(FCI), 
    .S0(\monitorStateMachine_1/SLICE_248/monitorStateMachine_1/TimestampOverflowxDP_cry_0[14]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_248/monitorStateMachine_1/TimestampOverflowxDP_cry_0[14]_S1 )
    , .CO0(), .CO1());

  specify
    (C1 => Q1) = (0:0:0,0:0:0);
    (B1 => Q1) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (C0 => Q0) = (0:0:0,0:0:0);
    (C0 => Q1) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20028 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h8087;
  defparam inst1.INIT1 = 16'h5095;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module monitorStateMachine_1_SLICE_249 ( input C1, B1, A1, C0, B0, A0, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_249/monitorStateMachine_1/TimestampOverflowxDP_cry_0[12]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_249/monitorStateMachine_1/TimestampOverflowxDP_cry_0[12]_S0 
         ;

  vmuxregsre \monitorStateMachine_1/SLICE_249_REG1 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_249/monitorStateMachine_1/TimestampOverflowxDP_cry_0[12]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \monitorStateMachine_1/SLICE_249_REG0 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_249/monitorStateMachine_1/TimestampOverflowxDP_cry_0[12]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20029 \monitorStateMachine_1/TimestampOverflowxDP_cry_0[12] ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), 
    .CI(FCI), 
    .S0(\monitorStateMachine_1/SLICE_249/monitorStateMachine_1/TimestampOverflowxDP_cry_0[12]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_249/monitorStateMachine_1/TimestampOverflowxDP_cry_0[12]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (C1 => Q1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => Q0) = (0:0:0,0:0:0);
    (C0 => Q1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20029 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h8087;
  defparam inst1.INIT1 = 16'h8087;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module monitorStateMachine_1_SLICE_250 ( input C1, B1, A1, C0, B0, A0, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_250/monitorStateMachine_1/TimestampOverflowxDP_cry_0[10]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_250/monitorStateMachine_1/TimestampOverflowxDP_cry_0[10]_S0 
         ;

  vmuxregsre \monitorStateMachine_1/SLICE_250_REG1 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_250/monitorStateMachine_1/TimestampOverflowxDP_cry_0[10]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \monitorStateMachine_1/SLICE_250_REG0 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_250/monitorStateMachine_1/TimestampOverflowxDP_cry_0[10]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20029 \monitorStateMachine_1/TimestampOverflowxDP_cry_0[10] ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), 
    .CI(FCI), 
    .S0(\monitorStateMachine_1/SLICE_250/monitorStateMachine_1/TimestampOverflowxDP_cry_0[10]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_250/monitorStateMachine_1/TimestampOverflowxDP_cry_0[10]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (C1 => Q1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => Q0) = (0:0:0,0:0:0);
    (C0 => Q1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_251 ( input C1, B1, A1, C0, B0, A0, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_251/monitorStateMachine_1/TimestampOverflowxDP_cry_0[8]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_251/monitorStateMachine_1/TimestampOverflowxDP_cry_0[8]_S0 
         ;

  vmuxregsre \monitorStateMachine_1/SLICE_251_REG1 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_251/monitorStateMachine_1/TimestampOverflowxDP_cry_0[8]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \monitorStateMachine_1/SLICE_251_REG0 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_251/monitorStateMachine_1/TimestampOverflowxDP_cry_0[8]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20029 \monitorStateMachine_1/TimestampOverflowxDP_cry_0[8] ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), 
    .CI(FCI), 
    .S0(\monitorStateMachine_1/SLICE_251/monitorStateMachine_1/TimestampOverflowxDP_cry_0[8]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_251/monitorStateMachine_1/TimestampOverflowxDP_cry_0[8]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (C1 => Q1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => Q0) = (0:0:0,0:0:0);
    (C0 => Q1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_252 ( input C1, B1, A1, C0, B0, A0, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_252/monitorStateMachine_1/TimestampOverflowxDP_cry_0[6]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_252/monitorStateMachine_1/TimestampOverflowxDP_cry_0[6]_S0 
         ;

  vmuxregsre \monitorStateMachine_1/SLICE_252_REG1 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_252/monitorStateMachine_1/TimestampOverflowxDP_cry_0[6]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \monitorStateMachine_1/SLICE_252_REG0 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_252/monitorStateMachine_1/TimestampOverflowxDP_cry_0[6]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20029 \monitorStateMachine_1/TimestampOverflowxDP_cry_0[6] ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), 
    .CI(FCI), 
    .S0(\monitorStateMachine_1/SLICE_252/monitorStateMachine_1/TimestampOverflowxDP_cry_0[6]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_252/monitorStateMachine_1/TimestampOverflowxDP_cry_0[6]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (C1 => Q1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => Q0) = (0:0:0,0:0:0);
    (C0 => Q1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_253 ( input C1, B1, A1, C0, B0, A0, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_253/monitorStateMachine_1/TimestampOverflowxDP_cry_0[4]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_253/monitorStateMachine_1/TimestampOverflowxDP_cry_0[4]_S0 
         ;

  vmuxregsre \monitorStateMachine_1/SLICE_253_REG1 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_253/monitorStateMachine_1/TimestampOverflowxDP_cry_0[4]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \monitorStateMachine_1/SLICE_253_REG0 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_253/monitorStateMachine_1/TimestampOverflowxDP_cry_0[4]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20029 \monitorStateMachine_1/TimestampOverflowxDP_cry_0[4] ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), 
    .CI(FCI), 
    .S0(\monitorStateMachine_1/SLICE_253/monitorStateMachine_1/TimestampOverflowxDP_cry_0[4]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_253/monitorStateMachine_1/TimestampOverflowxDP_cry_0[4]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (C1 => Q1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => Q0) = (0:0:0,0:0:0);
    (C0 => Q1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_254 ( input C1, B1, A1, C0, B0, A0, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_254/monitorStateMachine_1/TimestampOverflowxDP_cry_0[2]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_254/monitorStateMachine_1/TimestampOverflowxDP_cry_0[2]_S0 
         ;

  vmuxregsre \monitorStateMachine_1/SLICE_254_REG1 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_254/monitorStateMachine_1/TimestampOverflowxDP_cry_0[2]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \monitorStateMachine_1/SLICE_254_REG0 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_254/monitorStateMachine_1/TimestampOverflowxDP_cry_0[2]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20029 \monitorStateMachine_1/TimestampOverflowxDP_cry_0[2] ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), 
    .CI(FCI), 
    .S0(\monitorStateMachine_1/SLICE_254/monitorStateMachine_1/TimestampOverflowxDP_cry_0[2]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_254/monitorStateMachine_1/TimestampOverflowxDP_cry_0[2]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (C1 => Q1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => Q0) = (0:0:0,0:0:0);
    (C0 => Q1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_255 ( input C1, B1, A1, C0, B0, A0, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_255/monitorStateMachine_1/TimestampOverflowxDP_cry_0[0]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_255/monitorStateMachine_1/TimestampOverflowxDP_cry_0[0]_S0 
         ;

  vmuxregsre \monitorStateMachine_1/SLICE_255_REG1 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_255/monitorStateMachine_1/TimestampOverflowxDP_cry_0[0]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \monitorStateMachine_1/SLICE_255_REG0 ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_255/monitorStateMachine_1/TimestampOverflowxDP_cry_0[0]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20029 \monitorStateMachine_1/TimestampOverflowxDP_cry_0[0] ( .A0(A0), 
    .B0(B0), .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), 
    .CI(FCI), 
    .S0(\monitorStateMachine_1/SLICE_255/monitorStateMachine_1/TimestampOverflowxDP_cry_0[0]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_255/monitorStateMachine_1/TimestampOverflowxDP_cry_0[0]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (C1 => Q1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => Q1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => Q0) = (0:0:0,0:0:0);
    (C0 => Q1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => Q0) = (0:0:0,0:0:0);
    (B0 => Q1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_256 ( input C1, A1, C0, A0, CLK, FCI, 
    output Q0, Q1 );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_256/monitorStateMachine_1/CountxDP_cry_0[6]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_256/monitorStateMachine_1/CountxDP_cry_0[6]_S0 
         , C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, FCI_dly;

  vmuxregsre0030 \monitorStateMachine_1/CountxDP[7] ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_256/monitorStateMachine_1/CountxDP_cry_0[6]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/CountxDP[6] ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_256/monitorStateMachine_1/CountxDP_cry_0[6]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20031 \monitorStateMachine_1/CountxDP_cry_0[6] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\monitorStateMachine_1/SLICE_256/monitorStateMachine_1/CountxDP_cry_0[6]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_256/monitorStateMachine_1/CountxDP_cry_0[6]_S1 )
    , .CO0(), .CO1());

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module vmuxregsre0030 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module ccu20031 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf0e4;
  defparam inst1.INIT1 = 16'h50e4;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module monitorStateMachine_1_SLICE_257 ( input C1, A1, C0, A0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_257/monitorStateMachine_1/CountxDP_cry_0[4]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_257/monitorStateMachine_1/CountxDP_cry_0[4]_S0 
         , C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, FCI_dly;

  vmuxregsre0030 \monitorStateMachine_1/CountxDP[5] ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_257/monitorStateMachine_1/CountxDP_cry_0[4]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/CountxDP[4] ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_257/monitorStateMachine_1/CountxDP_cry_0[4]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20032 \monitorStateMachine_1/CountxDP_cry_0[4] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\monitorStateMachine_1/SLICE_257/monitorStateMachine_1/CountxDP_cry_0[4]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_257/monitorStateMachine_1/CountxDP_cry_0[4]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module ccu20032 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf0e4;
  defparam inst1.INIT1 = 16'hf0e4;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module monitorStateMachine_1_SLICE_258 ( input C1, A1, C0, A0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_258/monitorStateMachine_1/CountxDP_cry_0[2]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_258/monitorStateMachine_1/CountxDP_cry_0[2]_S0 
         , C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, FCI_dly;

  vmuxregsre0030 \monitorStateMachine_1/CountxDP[3] ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_258/monitorStateMachine_1/CountxDP_cry_0[2]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/CountxDP[2] ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_258/monitorStateMachine_1/CountxDP_cry_0[2]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20032 \monitorStateMachine_1/CountxDP_cry_0[2] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\monitorStateMachine_1/SLICE_258/monitorStateMachine_1/CountxDP_cry_0[2]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_258/monitorStateMachine_1/CountxDP_cry_0[2]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_259 ( input C1, A1, C0, A0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, 
         \monitorStateMachine_1/SLICE_259/monitorStateMachine_1/CountxDP_cry_0[0]_S1 
         , GNDI, 
         \monitorStateMachine_1/SLICE_259/monitorStateMachine_1/CountxDP_cry_0[0]_S0 
         , C1_dly, CLK_dly, A1_dly, C0_dly, A0_dly, FCI_dly;

  vmuxregsre0030 \monitorStateMachine_1/CountxDP[1] ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_259/monitorStateMachine_1/CountxDP_cry_0[0]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/CountxDP[0] ( .D0(VCCI), 
    .D1(\monitorStateMachine_1/SLICE_259/monitorStateMachine_1/CountxDP_cry_0[0]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20032 \monitorStateMachine_1/CountxDP_cry_0[0] ( .A0(A0_dly), .B0(GNDI), 
    .C0(C0_dly), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(C1_dly), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\monitorStateMachine_1/SLICE_259/monitorStateMachine_1/CountxDP_cry_0[0]_S0 )
    , 
    .S1(\monitorStateMachine_1/SLICE_259/monitorStateMachine_1/CountxDP_cry_0[0]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, C1, 0:0:0, 0:0:0,,,, CLK_dly, C1_dly);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, C0, 0:0:0, 0:0:0,,,, CLK_dly, C0_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_260 ( input A1, A0, FCI, output Q0, 
    Q1 );
  wire   VCCI, 
         \uSynchronizerStateMachine_1/SLICE_260/uSynchronizerStateMachine_1/CounterxDP_cry_0[12]_S1 
         , GNDI, 
         \uSynchronizerStateMachine_1/SLICE_260/uSynchronizerStateMachine_1/CounterxDP_cry_0[12]_S0 
         ;

  vmuxregsre \uSynchronizerStateMachine_1/SLICE_260_REG1 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_260/uSynchronizerStateMachine_1/CounterxDP_cry_0[12]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uSynchronizerStateMachine_1/SLICE_260_REG0 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_260/uSynchronizerStateMachine_1/CounterxDP_cry_0[12]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20033 \uSynchronizerStateMachine_1/CounterxDP_cry_0[12] ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), 
    .S0(\uSynchronizerStateMachine_1/SLICE_260/uSynchronizerStateMachine_1/CounterxDP_cry_0[12]_S0 )
    , 
    .S1(\uSynchronizerStateMachine_1/SLICE_260/uSynchronizerStateMachine_1/CounterxDP_cry_0[12]_S1 )
    , .CO0(), .CO1());

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20033 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hf006;
  defparam inst1.INIT1 = 16'h5006;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module uSynchronizerStateMachine_1_SLICE_261 ( input A1, A0, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, 
         \uSynchronizerStateMachine_1/SLICE_261/uSynchronizerStateMachine_1/CounterxDP_cry_0[10]_S1 
         , GNDI, 
         \uSynchronizerStateMachine_1/SLICE_261/uSynchronizerStateMachine_1/CounterxDP_cry_0[10]_S0 
         ;

  vmuxregsre \uSynchronizerStateMachine_1/SLICE_261_REG1 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_261/uSynchronizerStateMachine_1/CounterxDP_cry_0[10]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uSynchronizerStateMachine_1/SLICE_261_REG0 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_261/uSynchronizerStateMachine_1/CounterxDP_cry_0[10]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uSynchronizerStateMachine_1/CounterxDP_cry_0[10] ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), 
    .S0(\uSynchronizerStateMachine_1/SLICE_261/uSynchronizerStateMachine_1/CounterxDP_cry_0[10]_S0 )
    , 
    .S1(\uSynchronizerStateMachine_1/SLICE_261/uSynchronizerStateMachine_1/CounterxDP_cry_0[10]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_262 ( input A1, A0, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, 
         \uSynchronizerStateMachine_1/SLICE_262/uSynchronizerStateMachine_1/CounterxDP_cry_0[8]_S1 
         , GNDI, 
         \uSynchronizerStateMachine_1/SLICE_262/uSynchronizerStateMachine_1/CounterxDP_cry_0[8]_S0 
         ;

  vmuxregsre \uSynchronizerStateMachine_1/SLICE_262_REG1 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_262/uSynchronizerStateMachine_1/CounterxDP_cry_0[8]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uSynchronizerStateMachine_1/SLICE_262_REG0 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_262/uSynchronizerStateMachine_1/CounterxDP_cry_0[8]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uSynchronizerStateMachine_1/CounterxDP_cry_0[8] ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), 
    .S0(\uSynchronizerStateMachine_1/SLICE_262/uSynchronizerStateMachine_1/CounterxDP_cry_0[8]_S0 )
    , 
    .S1(\uSynchronizerStateMachine_1/SLICE_262/uSynchronizerStateMachine_1/CounterxDP_cry_0[8]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_263 ( input A1, A0, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, 
         \uSynchronizerStateMachine_1/SLICE_263/uSynchronizerStateMachine_1/CounterxDP_cry_0[6]_S1 
         , GNDI, 
         \uSynchronizerStateMachine_1/SLICE_263/uSynchronizerStateMachine_1/CounterxDP_cry_0[6]_S0 
         ;

  vmuxregsre \uSynchronizerStateMachine_1/SLICE_263_REG1 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_263/uSynchronizerStateMachine_1/CounterxDP_cry_0[6]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uSynchronizerStateMachine_1/SLICE_263_REG0 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_263/uSynchronizerStateMachine_1/CounterxDP_cry_0[6]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uSynchronizerStateMachine_1/CounterxDP_cry_0[6] ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), 
    .S0(\uSynchronizerStateMachine_1/SLICE_263/uSynchronizerStateMachine_1/CounterxDP_cry_0[6]_S0 )
    , 
    .S1(\uSynchronizerStateMachine_1/SLICE_263/uSynchronizerStateMachine_1/CounterxDP_cry_0[6]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_264 ( input A1, A0, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, 
         \uSynchronizerStateMachine_1/SLICE_264/uSynchronizerStateMachine_1/CounterxDP_cry_0[4]_S1 
         , GNDI, 
         \uSynchronizerStateMachine_1/SLICE_264/uSynchronizerStateMachine_1/CounterxDP_cry_0[4]_S0 
         ;

  vmuxregsre \uSynchronizerStateMachine_1/SLICE_264_REG1 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_264/uSynchronizerStateMachine_1/CounterxDP_cry_0[4]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uSynchronizerStateMachine_1/SLICE_264_REG0 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_264/uSynchronizerStateMachine_1/CounterxDP_cry_0[4]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uSynchronizerStateMachine_1/CounterxDP_cry_0[4] ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), 
    .S0(\uSynchronizerStateMachine_1/SLICE_264/uSynchronizerStateMachine_1/CounterxDP_cry_0[4]_S0 )
    , 
    .S1(\uSynchronizerStateMachine_1/SLICE_264/uSynchronizerStateMachine_1/CounterxDP_cry_0[4]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_265 ( input A1, A0, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, 
         \uSynchronizerStateMachine_1/SLICE_265/uSynchronizerStateMachine_1/CounterxDP_cry_0[2]_S1 
         , GNDI, 
         \uSynchronizerStateMachine_1/SLICE_265/uSynchronizerStateMachine_1/CounterxDP_cry_0[2]_S0 
         ;

  vmuxregsre \uSynchronizerStateMachine_1/SLICE_265_REG1 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_265/uSynchronizerStateMachine_1/CounterxDP_cry_0[2]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uSynchronizerStateMachine_1/SLICE_265_REG0 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_265/uSynchronizerStateMachine_1/CounterxDP_cry_0[2]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uSynchronizerStateMachine_1/CounterxDP_cry_0[2] ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), 
    .S0(\uSynchronizerStateMachine_1/SLICE_265/uSynchronizerStateMachine_1/CounterxDP_cry_0[2]_S0 )
    , 
    .S1(\uSynchronizerStateMachine_1/SLICE_265/uSynchronizerStateMachine_1/CounterxDP_cry_0[2]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_266 ( input A1, A0, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \uSynchronizerStateMachine_1/SLICE_266/uSynchronizerStateMachine_1/CounterxDP_cry_0[0]_S1 
         , GNDI, 
         \uSynchronizerStateMachine_1/SLICE_266/uSynchronizerStateMachine_1/CounterxDP_cry_0[0]_S0 
         ;

  vmuxregsre \uSynchronizerStateMachine_1/SLICE_266_REG1 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_266/uSynchronizerStateMachine_1/CounterxDP_cry_0[0]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uSynchronizerStateMachine_1/SLICE_266_REG0 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_266/uSynchronizerStateMachine_1/CounterxDP_cry_0[0]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uSynchronizerStateMachine_1/CounterxDP_cry_0[0] ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(VCCI), 
    .S0(\uSynchronizerStateMachine_1/SLICE_266/uSynchronizerStateMachine_1/CounterxDP_cry_0[0]_S0 )
    , 
    .S1(\uSynchronizerStateMachine_1/SLICE_266/uSynchronizerStateMachine_1/CounterxDP_cry_0[0]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_267 ( input A0, FCI, output Q0 );
  wire   VCCI, 
         \uSynchronizerStateMachine_1/SLICE_267/uSynchronizerStateMachine_1/DividerxDP_s_0[6]_S0 
         , GNDI;

  vmuxregsre \uSynchronizerStateMachine_1/SLICE_267_REG0 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_267/uSynchronizerStateMachine_1/DividerxDP_s_0[6]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20023 \uSynchronizerStateMachine_1/DividerxDP_s_0[6] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uSynchronizerStateMachine_1/SLICE_267/uSynchronizerStateMachine_1/DividerxDP_s_0[6]_S0 )
    , .S1(), .CO0(), .CO1());

  specify
    (A0 => Q0) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_268 ( input A1, A0, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, 
         \uSynchronizerStateMachine_1/SLICE_268/uSynchronizerStateMachine_1/DividerxDP_cry_0[4]_S1 
         , GNDI, 
         \uSynchronizerStateMachine_1/SLICE_268/uSynchronizerStateMachine_1/DividerxDP_cry_0[4]_S0 
         ;

  vmuxregsre \uSynchronizerStateMachine_1/SLICE_268_REG1 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_268/uSynchronizerStateMachine_1/DividerxDP_cry_0[4]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uSynchronizerStateMachine_1/SLICE_268_REG0 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_268/uSynchronizerStateMachine_1/DividerxDP_cry_0[4]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uSynchronizerStateMachine_1/DividerxDP_cry_0[4] ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), 
    .S0(\uSynchronizerStateMachine_1/SLICE_268/uSynchronizerStateMachine_1/DividerxDP_cry_0[4]_S0 )
    , 
    .S1(\uSynchronizerStateMachine_1/SLICE_268/uSynchronizerStateMachine_1/DividerxDP_cry_0[4]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_269 ( input A1, A0, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, 
         \uSynchronizerStateMachine_1/SLICE_269/uSynchronizerStateMachine_1/DividerxDP_cry_0[2]_S1 
         , GNDI, 
         \uSynchronizerStateMachine_1/SLICE_269/uSynchronizerStateMachine_1/DividerxDP_cry_0[2]_S0 
         ;

  vmuxregsre \uSynchronizerStateMachine_1/SLICE_269_REG1 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_269/uSynchronizerStateMachine_1/DividerxDP_cry_0[2]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uSynchronizerStateMachine_1/SLICE_269_REG0 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_269/uSynchronizerStateMachine_1/DividerxDP_cry_0[2]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uSynchronizerStateMachine_1/DividerxDP_cry_0[2] ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), 
    .S0(\uSynchronizerStateMachine_1/SLICE_269/uSynchronizerStateMachine_1/DividerxDP_cry_0[2]_S0 )
    , 
    .S1(\uSynchronizerStateMachine_1/SLICE_269/uSynchronizerStateMachine_1/DividerxDP_cry_0[2]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_270 ( input A1, A0, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \uSynchronizerStateMachine_1/SLICE_270/uSynchronizerStateMachine_1/DividerxDP_cry_0[0]_S1 
         , GNDI, 
         \uSynchronizerStateMachine_1/SLICE_270/uSynchronizerStateMachine_1/DividerxDP_cry_0[0]_S0 
         ;

  vmuxregsre \uSynchronizerStateMachine_1/SLICE_270_REG1 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_270/uSynchronizerStateMachine_1/DividerxDP_cry_0[0]_S1 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uSynchronizerStateMachine_1/SLICE_270_REG0 ( .D0(VCCI), 
    .D1(\uSynchronizerStateMachine_1/SLICE_270/uSynchronizerStateMachine_1/DividerxDP_cry_0[0]_S0 )
    , .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uSynchronizerStateMachine_1/DividerxDP_cry_0[0] ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(VCCI), 
    .S0(\uSynchronizerStateMachine_1/SLICE_270/uSynchronizerStateMachine_1/DividerxDP_cry_0[0]_S0 )
    , 
    .S1(\uSynchronizerStateMachine_1/SLICE_270/uSynchronizerStateMachine_1/DividerxDP_cry_0[0]_S1 )
    , .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uTimestampCounter_SLICE_271 ( input A0, FCI, output Q0 );
  wire   VCCI, 
         \uTimestampCounter/SLICE_271/uTimestampCounter/CountxDP_s_0[14]_S0 , 
         GNDI;

  vmuxregsre \uTimestampCounter/SLICE_271_REG0 ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_271/uTimestampCounter/CountxDP_s_0[14]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20023 \uTimestampCounter/CountxDP_s_0[14] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uTimestampCounter/SLICE_271/uTimestampCounter/CountxDP_s_0[14]_S0 ), 
    .S1(), .CO0(), .CO1());

  specify
    (A0 => Q0) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uTimestampCounter_SLICE_272 ( input A1, A0, CE, LSR, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, 
         \uTimestampCounter/SLICE_272/uTimestampCounter/CountxDP_cry_0[12]_S1 , 
         \uTimestampCounter/SLICE_272/uTimestampCounter/CountxDP_cry_0[12]_S0 , 
         GNDI, A1_dly, CLK_dly, A0_dly, CE_dly, LSR_dly, FCI_dly;

  vmuxregsre0025 \uTimestampCounter/CountxDP[13] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_272/uTimestampCounter/CountxDP_cry_0[12]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \uTimestampCounter/CountxDP[12] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_272/uTimestampCounter/CountxDP_cry_0[12]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20024 \uTimestampCounter/CountxDP_cry_0[12] ( .A0(A0_dly), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\uTimestampCounter/SLICE_272/uTimestampCounter/CountxDP_cry_0[12]_S0 ), 
    .S1(\uTimestampCounter/SLICE_272/uTimestampCounter/CountxDP_cry_0[12]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module uTimestampCounter_SLICE_273 ( input A1, A0, CE, LSR, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, 
         \uTimestampCounter/SLICE_273/uTimestampCounter/CountxDP_cry_0[10]_S1 , 
         \uTimestampCounter/SLICE_273/uTimestampCounter/CountxDP_cry_0[10]_S0 , 
         GNDI, A1_dly, CLK_dly, A0_dly, CE_dly, LSR_dly, FCI_dly;

  vmuxregsre0025 \uTimestampCounter/CountxDP[11] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_273/uTimestampCounter/CountxDP_cry_0[10]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \uTimestampCounter/CountxDP[10] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_273/uTimestampCounter/CountxDP_cry_0[10]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20024 \uTimestampCounter/CountxDP_cry_0[10] ( .A0(A0_dly), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\uTimestampCounter/SLICE_273/uTimestampCounter/CountxDP_cry_0[10]_S0 ), 
    .S1(\uTimestampCounter/SLICE_273/uTimestampCounter/CountxDP_cry_0[10]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module uTimestampCounter_SLICE_274 ( input A1, A0, CE, LSR, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, 
         \uTimestampCounter/SLICE_274/uTimestampCounter/CountxDP_cry_0[8]_S1 , 
         \uTimestampCounter/SLICE_274/uTimestampCounter/CountxDP_cry_0[8]_S0 , 
         GNDI, A1_dly, CLK_dly, A0_dly, CE_dly, LSR_dly, FCI_dly;

  vmuxregsre0025 \uTimestampCounter/CountxDP[9] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_274/uTimestampCounter/CountxDP_cry_0[8]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \uTimestampCounter/CountxDP[8] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_274/uTimestampCounter/CountxDP_cry_0[8]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20024 \uTimestampCounter/CountxDP_cry_0[8] ( .A0(A0_dly), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\uTimestampCounter/SLICE_274/uTimestampCounter/CountxDP_cry_0[8]_S0 ), 
    .S1(\uTimestampCounter/SLICE_274/uTimestampCounter/CountxDP_cry_0[8]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module uTimestampCounter_SLICE_275 ( input A1, A0, CE, LSR, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, 
         \uTimestampCounter/SLICE_275/uTimestampCounter/CountxDP_cry_0[6]_S1 , 
         \uTimestampCounter/SLICE_275/uTimestampCounter/CountxDP_cry_0[6]_S0 , 
         GNDI, A1_dly, CLK_dly, A0_dly, CE_dly, LSR_dly, FCI_dly;

  vmuxregsre0025 \uTimestampCounter/CountxDP[7] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_275/uTimestampCounter/CountxDP_cry_0[6]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \uTimestampCounter/CountxDP[6] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_275/uTimestampCounter/CountxDP_cry_0[6]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20024 \uTimestampCounter/CountxDP_cry_0[6] ( .A0(A0_dly), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\uTimestampCounter/SLICE_275/uTimestampCounter/CountxDP_cry_0[6]_S0 ), 
    .S1(\uTimestampCounter/SLICE_275/uTimestampCounter/CountxDP_cry_0[6]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module uTimestampCounter_SLICE_276 ( input A1, A0, CE, LSR, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, 
         \uTimestampCounter/SLICE_276/uTimestampCounter/CountxDP_cry_0[4]_S1 , 
         \uTimestampCounter/SLICE_276/uTimestampCounter/CountxDP_cry_0[4]_S0 , 
         GNDI, A1_dly, CLK_dly, A0_dly, CE_dly, LSR_dly, FCI_dly;

  vmuxregsre0025 \uTimestampCounter/CountxDP[5] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_276/uTimestampCounter/CountxDP_cry_0[4]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \uTimestampCounter/CountxDP[4] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_276/uTimestampCounter/CountxDP_cry_0[4]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20024 \uTimestampCounter/CountxDP_cry_0[4] ( .A0(A0_dly), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\uTimestampCounter/SLICE_276/uTimestampCounter/CountxDP_cry_0[4]_S0 ), 
    .S1(\uTimestampCounter/SLICE_276/uTimestampCounter/CountxDP_cry_0[4]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module uTimestampCounter_SLICE_277 ( input A1, A0, CE, LSR, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, 
         \uTimestampCounter/SLICE_277/uTimestampCounter/CountxDP_cry_0[2]_S1 , 
         \uTimestampCounter/SLICE_277/uTimestampCounter/CountxDP_cry_0[2]_S0 , 
         GNDI, A1_dly, CLK_dly, A0_dly, CE_dly, LSR_dly, FCI_dly;

  vmuxregsre0025 \uTimestampCounter/CountxDP[3] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_277/uTimestampCounter/CountxDP_cry_0[2]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \uTimestampCounter/CountxDP[2] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_277/uTimestampCounter/CountxDP_cry_0[2]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20024 \uTimestampCounter/CountxDP_cry_0[2] ( .A0(A0_dly), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI_dly), 
    .S0(\uTimestampCounter/SLICE_277/uTimestampCounter/CountxDP_cry_0[2]_S0 ), 
    .S1(\uTimestampCounter/SLICE_277/uTimestampCounter/CountxDP_cry_0[2]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module uTimestampCounter_SLICE_278 ( input A1, A0, CE, LSR, CLK, output Q0, Q1, 
    FCO );
  wire   VCCI, 
         \uTimestampCounter/SLICE_278/uTimestampCounter/CountxDP_cry_0[0]_S1 , 
         \uTimestampCounter/SLICE_278/uTimestampCounter/CountxDP_cry_0[0]_S0 , 
         GNDI, A1_dly, CLK_dly, A0_dly, CE_dly, LSR_dly;

  vmuxregsre0025 \uTimestampCounter/CountxDP[1] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_278/uTimestampCounter/CountxDP_cry_0[0]_S1 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \uTimestampCounter/CountxDP[0] ( .D0(VCCI), 
    .D1(\uTimestampCounter/SLICE_278/uTimestampCounter/CountxDP_cry_0[0]_S0 ), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20024 \uTimestampCounter/CountxDP_cry_0[0] ( .A0(A0_dly), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(VCCI), 
    .S0(\uTimestampCounter/SLICE_278/uTimestampCounter/CountxDP_cry_0[0]_S0 ), 
    .S1(\uTimestampCounter/SLICE_278/uTimestampCounter/CountxDP_cry_0[0]_S1 ), 
    .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module uEventCounter_SLICE_279 ( input A0, FCI, output Q0 );
  wire   VCCI, \uEventCounter/SLICE_279/uEventCounter/CountxDP_s_0[8]_S0 , 
         GNDI;

  vmuxregsre \uEventCounter/SLICE_279_REG0 ( .D0(VCCI), 
    .D1(\uEventCounter/SLICE_279/uEventCounter/CountxDP_s_0[8]_S0 ), .SD(VCCI), 
    .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20023 \uEventCounter/CountxDP_s_0[8] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEventCounter/SLICE_279/uEventCounter/CountxDP_s_0[8]_S0 ), .S1(), 
    .CO0(), .CO1());

  specify
    (A0 => Q0) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEventCounter_SLICE_280 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, \uEventCounter/SLICE_280/uEventCounter/CountxDP_cry_0[6]_S1 , 
         GNDI, \uEventCounter/SLICE_280/uEventCounter/CountxDP_cry_0[6]_S0 ;

  vmuxregsre \uEventCounter/SLICE_280_REG1 ( .D0(VCCI), 
    .D1(\uEventCounter/SLICE_280/uEventCounter/CountxDP_cry_0[6]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEventCounter/SLICE_280_REG0 ( .D0(VCCI), 
    .D1(\uEventCounter/SLICE_280/uEventCounter/CountxDP_cry_0[6]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEventCounter/CountxDP_cry_0[6] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEventCounter/SLICE_280/uEventCounter/CountxDP_cry_0[6]_S0 ), 
    .S1(\uEventCounter/SLICE_280/uEventCounter/CountxDP_cry_0[6]_S1 ), .CO0(), 
    .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEventCounter_SLICE_281 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, \uEventCounter/SLICE_281/uEventCounter/CountxDP_cry_0[4]_S1 , 
         GNDI, \uEventCounter/SLICE_281/uEventCounter/CountxDP_cry_0[4]_S0 ;

  vmuxregsre \uEventCounter/SLICE_281_REG1 ( .D0(VCCI), 
    .D1(\uEventCounter/SLICE_281/uEventCounter/CountxDP_cry_0[4]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEventCounter/SLICE_281_REG0 ( .D0(VCCI), 
    .D1(\uEventCounter/SLICE_281/uEventCounter/CountxDP_cry_0[4]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEventCounter/CountxDP_cry_0[4] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEventCounter/SLICE_281/uEventCounter/CountxDP_cry_0[4]_S0 ), 
    .S1(\uEventCounter/SLICE_281/uEventCounter/CountxDP_cry_0[4]_S1 ), .CO0(), 
    .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEventCounter_SLICE_282 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, \uEventCounter/SLICE_282/uEventCounter/CountxDP_cry_0[2]_S1 , 
         GNDI, \uEventCounter/SLICE_282/uEventCounter/CountxDP_cry_0[2]_S0 ;

  vmuxregsre \uEventCounter/SLICE_282_REG1 ( .D0(VCCI), 
    .D1(\uEventCounter/SLICE_282/uEventCounter/CountxDP_cry_0[2]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEventCounter/SLICE_282_REG0 ( .D0(VCCI), 
    .D1(\uEventCounter/SLICE_282/uEventCounter/CountxDP_cry_0[2]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEventCounter/CountxDP_cry_0[2] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEventCounter/SLICE_282/uEventCounter/CountxDP_cry_0[2]_S0 ), 
    .S1(\uEventCounter/SLICE_282/uEventCounter/CountxDP_cry_0[2]_S1 ), .CO0(), 
    .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEventCounter_SLICE_283 ( input A1, A0, output Q0, Q1, FCO );
  wire   VCCI, \uEventCounter/SLICE_283/uEventCounter/CountxDP_cry_0[0]_S1 , 
         GNDI, \uEventCounter/SLICE_283/uEventCounter/CountxDP_cry_0[0]_S0 ;

  vmuxregsre \uEventCounter/SLICE_283_REG1 ( .D0(VCCI), 
    .D1(\uEventCounter/SLICE_283/uEventCounter/CountxDP_cry_0[0]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEventCounter/SLICE_283_REG0 ( .D0(VCCI), 
    .D1(\uEventCounter/SLICE_283/uEventCounter/CountxDP_cry_0[0]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEventCounter/CountxDP_cry_0[0] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(VCCI), 
    .S0(\uEventCounter/SLICE_283/uEventCounter/CountxDP_cry_0[0]_S0 ), 
    .S1(\uEventCounter/SLICE_283/uEventCounter/CountxDP_cry_0[0]_S1 ), .CO0(), 
    .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_284 ( input A1, A0, output Q0, Q1, FCO );
  wire   VCCI, 
         \uEarlyPaketTimer/SLICE_284/uEarlyPaketTimer/CountxDP_cry_0[0]_S1 , 
         GNDI, 
         \uEarlyPaketTimer/SLICE_284/uEarlyPaketTimer/CountxDP_cry_0[0]_S0 ;

  vmuxregsre \uEarlyPaketTimer/SLICE_284_REG1 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_284/uEarlyPaketTimer/CountxDP_cry_0[0]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEarlyPaketTimer/SLICE_284_REG0 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_284/uEarlyPaketTimer/CountxDP_cry_0[0]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEarlyPaketTimer/CountxDP_cry_0[0] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(VCCI), 
    .S0(\uEarlyPaketTimer/SLICE_284/uEarlyPaketTimer/CountxDP_cry_0[0]_S0 ), 
    .S1(\uEarlyPaketTimer/SLICE_284/uEarlyPaketTimer/CountxDP_cry_0[0]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_285 ( input A0, FCI, output Q0 );
  wire   VCCI, 
         \uEarlyPaketTimer/SLICE_285/uEarlyPaketTimer/CountxDP_s_0[20]_S0 , 
         GNDI;

  vmuxregsre \uEarlyPaketTimer/SLICE_285_REG0 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_285/uEarlyPaketTimer/CountxDP_s_0[20]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20023 \uEarlyPaketTimer/CountxDP_s_0[20] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEarlyPaketTimer/SLICE_285/uEarlyPaketTimer/CountxDP_s_0[20]_S0 ), 
    .S1(), .CO0(), .CO1());

  specify
    (A0 => Q0) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_286 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \uEarlyPaketTimer/SLICE_286/uEarlyPaketTimer/CountxDP_cry_0[18]_S1 , 
         GNDI, 
         \uEarlyPaketTimer/SLICE_286/uEarlyPaketTimer/CountxDP_cry_0[18]_S0 ;

  vmuxregsre \uEarlyPaketTimer/SLICE_286_REG1 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_286/uEarlyPaketTimer/CountxDP_cry_0[18]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEarlyPaketTimer/SLICE_286_REG0 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_286/uEarlyPaketTimer/CountxDP_cry_0[18]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEarlyPaketTimer/CountxDP_cry_0[18] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEarlyPaketTimer/SLICE_286/uEarlyPaketTimer/CountxDP_cry_0[18]_S0 ), 
    .S1(\uEarlyPaketTimer/SLICE_286/uEarlyPaketTimer/CountxDP_cry_0[18]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_287 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \uEarlyPaketTimer/SLICE_287/uEarlyPaketTimer/CountxDP_cry_0[16]_S1 , 
         GNDI, 
         \uEarlyPaketTimer/SLICE_287/uEarlyPaketTimer/CountxDP_cry_0[16]_S0 ;

  vmuxregsre \uEarlyPaketTimer/SLICE_287_REG1 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_287/uEarlyPaketTimer/CountxDP_cry_0[16]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEarlyPaketTimer/SLICE_287_REG0 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_287/uEarlyPaketTimer/CountxDP_cry_0[16]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEarlyPaketTimer/CountxDP_cry_0[16] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEarlyPaketTimer/SLICE_287/uEarlyPaketTimer/CountxDP_cry_0[16]_S0 ), 
    .S1(\uEarlyPaketTimer/SLICE_287/uEarlyPaketTimer/CountxDP_cry_0[16]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_288 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \uEarlyPaketTimer/SLICE_288/uEarlyPaketTimer/CountxDP_cry_0[14]_S1 , 
         GNDI, 
         \uEarlyPaketTimer/SLICE_288/uEarlyPaketTimer/CountxDP_cry_0[14]_S0 ;

  vmuxregsre \uEarlyPaketTimer/SLICE_288_REG1 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_288/uEarlyPaketTimer/CountxDP_cry_0[14]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEarlyPaketTimer/SLICE_288_REG0 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_288/uEarlyPaketTimer/CountxDP_cry_0[14]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEarlyPaketTimer/CountxDP_cry_0[14] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEarlyPaketTimer/SLICE_288/uEarlyPaketTimer/CountxDP_cry_0[14]_S0 ), 
    .S1(\uEarlyPaketTimer/SLICE_288/uEarlyPaketTimer/CountxDP_cry_0[14]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_289 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \uEarlyPaketTimer/SLICE_289/uEarlyPaketTimer/CountxDP_cry_0[12]_S1 , 
         GNDI, 
         \uEarlyPaketTimer/SLICE_289/uEarlyPaketTimer/CountxDP_cry_0[12]_S0 ;

  vmuxregsre \uEarlyPaketTimer/SLICE_289_REG1 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_289/uEarlyPaketTimer/CountxDP_cry_0[12]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEarlyPaketTimer/SLICE_289_REG0 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_289/uEarlyPaketTimer/CountxDP_cry_0[12]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEarlyPaketTimer/CountxDP_cry_0[12] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEarlyPaketTimer/SLICE_289/uEarlyPaketTimer/CountxDP_cry_0[12]_S0 ), 
    .S1(\uEarlyPaketTimer/SLICE_289/uEarlyPaketTimer/CountxDP_cry_0[12]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_290 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \uEarlyPaketTimer/SLICE_290/uEarlyPaketTimer/CountxDP_cry_0[10]_S1 , 
         GNDI, 
         \uEarlyPaketTimer/SLICE_290/uEarlyPaketTimer/CountxDP_cry_0[10]_S0 ;

  vmuxregsre \uEarlyPaketTimer/SLICE_290_REG1 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_290/uEarlyPaketTimer/CountxDP_cry_0[10]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEarlyPaketTimer/SLICE_290_REG0 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_290/uEarlyPaketTimer/CountxDP_cry_0[10]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEarlyPaketTimer/CountxDP_cry_0[10] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEarlyPaketTimer/SLICE_290/uEarlyPaketTimer/CountxDP_cry_0[10]_S0 ), 
    .S1(\uEarlyPaketTimer/SLICE_290/uEarlyPaketTimer/CountxDP_cry_0[10]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_291 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \uEarlyPaketTimer/SLICE_291/uEarlyPaketTimer/CountxDP_cry_0[8]_S1 , 
         GNDI, 
         \uEarlyPaketTimer/SLICE_291/uEarlyPaketTimer/CountxDP_cry_0[8]_S0 ;

  vmuxregsre \uEarlyPaketTimer/SLICE_291_REG1 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_291/uEarlyPaketTimer/CountxDP_cry_0[8]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEarlyPaketTimer/SLICE_291_REG0 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_291/uEarlyPaketTimer/CountxDP_cry_0[8]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEarlyPaketTimer/CountxDP_cry_0[8] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEarlyPaketTimer/SLICE_291/uEarlyPaketTimer/CountxDP_cry_0[8]_S0 ), 
    .S1(\uEarlyPaketTimer/SLICE_291/uEarlyPaketTimer/CountxDP_cry_0[8]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_292 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \uEarlyPaketTimer/SLICE_292/uEarlyPaketTimer/CountxDP_cry_0[6]_S1 , 
         GNDI, 
         \uEarlyPaketTimer/SLICE_292/uEarlyPaketTimer/CountxDP_cry_0[6]_S0 ;

  vmuxregsre \uEarlyPaketTimer/SLICE_292_REG1 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_292/uEarlyPaketTimer/CountxDP_cry_0[6]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEarlyPaketTimer/SLICE_292_REG0 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_292/uEarlyPaketTimer/CountxDP_cry_0[6]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEarlyPaketTimer/CountxDP_cry_0[6] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEarlyPaketTimer/SLICE_292/uEarlyPaketTimer/CountxDP_cry_0[6]_S0 ), 
    .S1(\uEarlyPaketTimer/SLICE_292/uEarlyPaketTimer/CountxDP_cry_0[6]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_293 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \uEarlyPaketTimer/SLICE_293/uEarlyPaketTimer/CountxDP_cry_0[4]_S1 , 
         GNDI, 
         \uEarlyPaketTimer/SLICE_293/uEarlyPaketTimer/CountxDP_cry_0[4]_S0 ;

  vmuxregsre \uEarlyPaketTimer/SLICE_293_REG1 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_293/uEarlyPaketTimer/CountxDP_cry_0[4]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEarlyPaketTimer/SLICE_293_REG0 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_293/uEarlyPaketTimer/CountxDP_cry_0[4]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEarlyPaketTimer/CountxDP_cry_0[4] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEarlyPaketTimer/SLICE_293/uEarlyPaketTimer/CountxDP_cry_0[4]_S0 ), 
    .S1(\uEarlyPaketTimer/SLICE_293/uEarlyPaketTimer/CountxDP_cry_0[4]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_294 ( input A1, A0, FCI, output Q0, Q1, FCO );
  wire   VCCI, 
         \uEarlyPaketTimer/SLICE_294/uEarlyPaketTimer/CountxDP_cry_0[2]_S1 , 
         GNDI, 
         \uEarlyPaketTimer/SLICE_294/uEarlyPaketTimer/CountxDP_cry_0[2]_S0 ;

  vmuxregsre \uEarlyPaketTimer/SLICE_294_REG1 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_294/uEarlyPaketTimer/CountxDP_cry_0[2]_S1 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uEarlyPaketTimer/SLICE_294_REG0 ( .D0(VCCI), 
    .D1(\uEarlyPaketTimer/SLICE_294/uEarlyPaketTimer/CountxDP_cry_0[2]_S0 ), 
    .SD(VCCI), .SP(VCCI), .CK(VCCI), .LSR(GNDI), .Q(Q0));
  ccu20024 \uEarlyPaketTimer/CountxDP_cry_0[2] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(\uEarlyPaketTimer/SLICE_294/uEarlyPaketTimer/CountxDP_cry_0[2]_S0 ), 
    .S1(\uEarlyPaketTimer/SLICE_294/uEarlyPaketTimer/CountxDP_cry_0[2]_S1 ), 
    .CO0(), .CO1(FCO));

  specify
    (A1 => Q1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => Q0) = (0:0:0,0:0:0);
    (A0 => Q1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => Q0) = (0:0:0,0:0:0);
    (FCI => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_295 ( input M0, CE, LSR, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0025 \ADCStateMachine_2/StartColxSP ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_296 ( input M0, CE, LSR, CLK, output Q0 );
  wire   VCCI, GNDI, CE_NOTIN, M0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0025 \ADCStateMachine_2/StartRowxSP ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module ADCStateMachine_2_SLICE_299 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut4 \ADCStateMachine_2/CountRowxDP_lm_0[1] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \ADCStateMachine_2/CountRowxDP_lm_0[0] ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/CountRowxDP[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/CountRowxDP[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_300 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut4 \ADCStateMachine_2/CountRowxDP_lm_0[3] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \ADCStateMachine_2/CountRowxDP_lm_0[2] ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/CountRowxDP[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/CountRowxDP[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_301 ( input C1, B1, A1, B0, A0, DI0, CE, LSR, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40034 \ADCStateMachine_2/p_row.op_ge.op_ge.un1_CountRowxDPlto4_2 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \ADCStateMachine_2/CountRowxDP_lm_0[4] ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/CountRowxDP[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h7F7F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_302 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[0] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h8AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_303 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[3] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[2] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_304 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[5] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[4] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_305 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[7] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[6] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[7] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_306 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[9] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[8] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[9] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[8] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_307 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[11] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[10] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[11] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[10] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_308 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[13] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[12] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[13] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[12] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_309 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[15] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[14] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[15] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[14] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_310 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[17] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[16] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[17] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[16] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_311 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[19] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[18] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[19] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[18] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_312 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[21] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[20] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[21] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[20] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_313 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[23] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[22] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[23] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[22] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_314 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[25] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[24] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[25] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[24] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_315 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[27] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[26] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[27] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[26] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_316 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[29] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[28] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[29] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[28] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_317 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[31] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[30] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[31] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[30] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_318 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40036 \ADCStateMachine_2/un1_DividerColxDN_1_sqmuxa_1_0 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40035 \ADCStateMachine_2/DividerColxDP_lm_0[32] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerColxDP[32] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hECA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_319 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[0] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0A0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_320 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[3] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[2] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_321 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[5] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[4] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_322 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[7] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[6] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[7] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_323 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[9] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[8] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[9] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[8] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_324 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[11] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[10] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[11] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[10] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_325 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[13] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[12] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[13] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[12] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_326 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[15] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[14] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[15] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[14] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_327 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40038 \ADCStateMachine_2/un1_StateRowxDP_3_i ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40037 \ADCStateMachine_2/DividerRowxDP_lm_0[16] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/DividerRowxDP[16] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFFAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_328 ( input C1, B1, A1, DI0, LSR, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40039 \ADCStateMachine_2/p_col.un7_nobxs ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40040 \ADCStateMachine_2/ADCStateMachine_2/VCC\001/BUF1/BUF1 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0041 \ADCStateMachine_2/NoBxS ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0041 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1D INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module ADCStateMachine_2_SLICE_329 ( input M0, LSR, CLK, output Q0 );
  wire   M0_NOTIN, VCCI, GNDI, LSR_dly, CLK_dly;

  vmuxregsre0041 \ADCStateMachine_2/StartRowxSN ( .D0(M0_NOTIN), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  inverter M0_INVERTERIN( .I(M0), .Z(M0_NOTIN));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_330 ( input D1, C1, B1, A1, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40042 \ADCStateMachine_2/StateColxDP_RNO_0[9] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut4 \ADCStateMachine_2/StateColxDN_0_sqmuxa_8 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[12] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h1050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_331 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40043 \ADCStateMachine_2/StateColxDN_iv[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40043 \ADCStateMachine_2/StateColxDN_iv[0] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hAAAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_332 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40043 \ADCStateMachine_2/StateColxDN_iv[3] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40043 \ADCStateMachine_2/StateColxDN_iv[2] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_333 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40044 \ADCStateMachine_2/StateColxDN_iv[5] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40045 \ADCStateMachine_2/StateColxDP_RNO[4] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hCCC5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hB8AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_334 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40046 \ADCStateMachine_2/StateColxDN_3_sqmuxa ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40047 \ADCStateMachine_2/StateColxDP_RNO[6] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[7] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h9CCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_335 ( input C1, B1, A1, B0, A0, DI0, CE, LSR, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40048 \ADCStateMachine_2/StateColxDP_RNIHH251[8] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40049 \ADCStateMachine_2/StateColxDN_0_sqmuxa ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[8] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h5454) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_337 ( input B1, A1, B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40050 \ADCStateMachine_2/StateColxDP_RNI447I[10] ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40049 \ADCStateMachine_2/StateColxDN_0_sqmuxa_1 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[10] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_339 ( input C1, B1, A1, B0, A0, DI0, CE, LSR, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40051 \ADCStateMachine_2/ColModexD_1_0_.m2 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40052 \ADCStateMachine_2/un1_StateColxDP_2 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[13] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h1F1F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_340 ( input D1, C1, B1, A1, B0, A0, DI0, M1, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, DI0_dly, CLK_dly, M1_dly, CE_dly, LSR_dly;

  lut40053 \ADCStateMachine_2/StateColxDN_2_sqmuxa_2 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40052 \ADCStateMachine_2/un1_StateColxDP_11 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[15] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[14] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h002A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_341 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40054 \ADCStateMachine_2/StateColxDP_RNI72M21[15] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40055 \ADCStateMachine_2/StateColxDP_RNO[16] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[16] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_342 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40056 \ADCStateMachine_2/StartColxSP_RNO ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40057 \ADCStateMachine_2/StateColxDP_RNO[17] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0058 \ADCStateMachine_2/StateColxDP[17] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h00D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hCECE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0058 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module ADCStateMachine_2_SLICE_343 ( input D1, C1, B1, A1, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40046 \ADCStateMachine_2/StateRowxDP_ns_a6[10] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40059 \ADCStateMachine_2/StateRowxDP_ns[11] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hECEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_344 ( input M1, M0, CE, LSR, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CE_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP[3] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP[2] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_345 ( input C1, B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40060 \ADCStateMachine_2/StateRowxDP_RNO[5] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \ADCStateMachine_2/StateRowxDP_ns_a6[7] ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hE0E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_346 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40061 \ADCStateMachine_2/StateRowxDP_ns[4] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40062 \ADCStateMachine_2/StateRowxDP_ns[5] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP[7] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0C2E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_347 ( input M0, CE, LSR, CLK, output Q0 );
  wire   VCCI, GNDI, CE_NOTIN, M0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP[9] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_348 ( input D1, C1, B1, A1, B0, A0, DI0, LSR, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40063 \ADCStateMachine_2/StateRowxDP_ns_a2_1[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40049 \ADCStateMachine_2/StateRowxDP_0[10] ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0058 \ADCStateMachine_2/StateRowxDP[10] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_349 ( input B1, A1, D0, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40052 \ADCStateMachine_2/CountRowxDP_cry_0_RNO[0] ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40064 \ADCStateMachine_2/StateRowxDP_ns[0] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP[11] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_350 ( input C1, B1, A1, DI0, LSR, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40065 \ADCStateMachine_2/RegisterWritexEO_i_0 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40040 \ADCStateMachine_2/ADCStateMachine_2/VCC\000/BUF1/BUF1 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0041 \ADCStateMachine_2/IsAxS ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h5757) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uADCRegister_SLICE_351 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uADCRegister/StatexDP[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uADCRegister/StatexDP[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uADCRegister_SLICE_352 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uADCRegister/StatexDP[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uADCRegister/StatexDP[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uADCRegister_SLICE_353 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uADCRegister/StatexDP[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uADCRegister/StatexDP[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uADCRegister_SLICE_354 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uADCRegister/StatexDP[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uADCRegister/StatexDP[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uADCRegister_SLICE_355 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uADCRegister/StatexDP[9] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uADCRegister/StatexDP[8] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uADCRegister_SLICE_356 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uADCRegister/StatexDP[11] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uADCRegister/StatexDP[10] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uADCRegister_SLICE_357 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40066 \uADCRegister/StatexDP_ldmx[13] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40067 \uADCRegister/StatexDP_ldmx[12] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \uADCRegister/StatexDP[13] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uADCRegister/StatexDP[12] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFFA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h88F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_358 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40068 \monitorStateMachine_1/StatexDP_ns_0_a2_1[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40069 \ADCvalueReady_1/StatexDP_ns_1_0_.m6 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \ADCvalueReady_1/StatexDP[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h34E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_359 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40070 \ADCStateMachine_2/RegisterWritexEO_i ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40071 \ADCvalueReady_1/StatexDP_ns_1_0_.m4 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \ADCvalueReady_1/StatexDP[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hABAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h01F1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_360 ( input D1, C1, B1, A1, B0, A0, DI0, LSR, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40072 \ADCStateMachine_2/StateColxDP_RNO_1[17] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40073 \ADCStateMachine_2/StateRowxDP_rep0_i_0[10] ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP_rep0_i[10] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hDDDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_362 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0025 AERREQxSB( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0025 AERReqSyncxSBN( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_363 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40063 \ADCStateMachine_2/StateColxDP_RNI9K4B1[15] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40074 \ADCStateMachine_2/CDVSTestSRColClockxSO_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0025 \ADCStateMachine_2/CDVSTestSRColClockxSO ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_364 ( input D1, C1, B1, A1, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40075 \ADCStateMachine_2/StateRowxDP_ns_a6_0[4] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40052 \ADCStateMachine_2/CDVSTestSRRowClockxSO_RNO ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0025 \ADCStateMachine_2/CDVSTestSRRowClockxSO ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hF070) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_365 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40048 \ADCStateMachine_2/StateColxDP_derived_clock_RNIJ6IG[9] ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40046 \ADCStateMachine_2/StateRowxDP_ns_a6[3] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateRowxDP[8] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_366 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[97] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[96] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0076 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1D INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module shiftRegister_1_SLICE_367 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[99] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[98] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_368 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[101] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[100] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_369 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[103] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[102] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module fifoStatemachine_1_SLICE_371 ( input C1, B1, A1, D0, C0, B0, A0, DI0, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40039 \fifoStatemachine_1/StatexDP_ns_1_0_.m7 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40077 \fifoStatemachine_1/StatexDP_ns_1_0_.m8 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \fifoStatemachine_1/StatexDP[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h7F4C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uMonitorTimestampRegister_SLICE_372 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[1] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[0] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uMonitorTimestampRegister_SLICE_373 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[3] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[2] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uMonitorTimestampRegister_SLICE_374 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[5] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[4] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uMonitorTimestampRegister_SLICE_375 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[7] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[6] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uMonitorTimestampRegister_SLICE_376 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[9] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[8] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uMonitorTimestampRegister_SLICE_377 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[11] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[10] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uMonitorTimestampRegister_SLICE_378 ( input M1, M0, CE, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[13] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uMonitorTimestampRegister/StatexDP[12] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_380 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[17] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[16] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_381 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[19] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[18] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_382 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[21] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[20] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_383 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[23] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[22] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_384 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[25] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[24] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_385 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[27] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[26] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_386 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[29] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[28] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_387 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[31] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[30] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_388 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[33] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[32] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_389 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[35] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[34] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_390 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[37] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[36] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_391 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[39] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[38] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_392 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[41] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[40] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_393 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[43] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[42] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_394 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[45] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[44] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_395 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[47] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[46] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_396 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[49] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[48] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_397 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[51] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[50] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_398 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[53] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[52] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_399 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[55] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[54] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_400 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[57] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[56] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_401 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[59] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[58] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_402 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[61] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[60] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_403 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[63] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[62] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_404 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[65] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[64] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_405 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[67] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[66] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_406 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[69] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[68] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_407 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[71] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[70] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_408 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[73] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[72] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_409 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[75] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[74] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_410 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[77] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[76] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_411 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[79] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[78] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_412 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[81] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[80] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_413 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[83] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[82] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_414 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[85] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[84] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_415 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[87] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[86] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_416 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[89] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[88] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_417 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[91] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[90] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_418 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[93] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[92] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_419 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[95] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[94] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_420 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[105] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[104] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_421 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[107] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[106] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_422 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[109] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[108] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_423 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  vmuxregsre0076 \shiftRegister_1/DataOutxDO[111] ( .D0(M1), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[110] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_425 ( input D1, C1, B1, A1, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40078 \cDVSResetStateMachine_1/StatexDP_ns_0[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40050 \cDVSResetStateMachine_1/StatexDP_ns_0_a7[0] ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \cDVSResetStateMachine_1/StatexDP[1] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \cDVSResetStateMachine_1/StatexDP[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40078 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hEEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cDVSResetStateMachine_1_SLICE_426 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[0] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[1] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hCCC8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cDVSResetStateMachine_1_SLICE_427 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[3] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[2] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[3] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[2] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_428 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[5] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[4] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[5] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[4] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_429 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[7] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[6] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[7] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[6] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_430 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[9] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[8] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[9] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[8] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_431 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[11] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[10] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[11] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[10] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_432 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[13] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[12] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[13] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[12] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_433 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[15] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[14] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[15] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[14] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_434 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[17] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[16] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[17] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[16] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_435 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40080 \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40079 \cDVSResetStateMachine_1/CountxDP_lm_0[18] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \cDVSResetStateMachine_1/CountxDP[18] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module fifoStatemachine_1_SLICE_436 ( input B1, A1, D0, C0, B0, A0, DI0, M0, 
    CLK, output OFX0, Q0 );
  wire   GNDI, 
         \fifoStatemachine_1/SLICE_436/fifoStatemachine_1/SLICE_436_K1_H1 , 
         \fifoStatemachine_1/SLICE_436/fifoStatemachine_1/StatexDP_ns_1_0_.m5/GATE_H0 
         , VCCI, DI0_dly, CLK_dly;

  lut40081 \fifoStatemachine_1/SLICE_436_K1 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), 
    .Z(\fifoStatemachine_1/SLICE_436/fifoStatemachine_1/SLICE_436_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40082 \fifoStatemachine_1/StatexDP_ns_1_0_.m5/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(D0), 
    .Z(\fifoStatemachine_1/SLICE_436/fifoStatemachine_1/StatexDP_ns_1_0_.m5/GATE_H0 )
    );
  vmuxregsre0030 \fifoStatemachine_1/StatexDP[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \fifoStatemachine_1/SLICE_436_K0K1MUX ( 
    .D0(\fifoStatemachine_1/SLICE_436/fifoStatemachine_1/StatexDP_ns_1_0_.m5/GATE_H0 )
    , .D1(\fifoStatemachine_1/SLICE_436/fifoStatemachine_1/SLICE_436_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h7777) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module monitorStateMachine_1_SLICE_438 ( input D1, C1, B1, A1, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40083 \monitorStateMachine_1/StatexDP_ns_a3_0_a2[8] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40039 \monitorStateMachine_1/StatexDP_ns_a3_0_a2[9] ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_SLICE_439 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40054 \monitorStateMachine_1/StatexDP_RNILNKH[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40084 \monitorStateMachine_1/TimestampRegWritexEO_i_0_a2 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP[8] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_SLICE_440 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40080 \monitorStateMachine_1/StatexDP_ns_i_a2_i_a2_0[6] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40078 \monitorStateMachine_1/StatexDP_RNO[4] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_441 ( input D1, C1, B1, A1, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40085 \monitorStateMachine_1/StatexDP_RNO[7] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40039 \monitorStateMachine_1/StatexDN_1_sqmuxa_0_a3_0_a2 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP[7] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_SLICE_442 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40086 \monitorStateMachine_1/StatexDP_ns_0[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40087 \monitorStateMachine_1/StatexDP_ns_0[1] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0088 \monitorStateMachine_1/StatexDP[10] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP[9] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40086 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hF1F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40087 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hCCEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0088 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module monitorStateMachine_1_SLICE_443 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40063 \monitorStateMachine_1/StatexDP_ns_0_a2_0_2[0] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40089 \monitorStateMachine_1/StatexDP_RNO[5] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP[5] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40089 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hDCD0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_SLICE_444 ( input D1, C1, B1, A1, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40085 \monitorStateMachine_1/StatexDP_fast_RNO[7] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40039 \monitorStateMachine_1/StatexDN_1_sqmuxa_0_a3_0_a2_fast ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP_fast[7] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP_fast[6] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_445 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[1] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[0] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[1] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40090 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h4050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_SLICE_446 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[3] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[2] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[3] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[2] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_447 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[5] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[4] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[5] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[4] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_448 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[7] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[6] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[7] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[6] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_449 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[9] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[8] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[9] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[8] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_450 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[11] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[10] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[11] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[10] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_451 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[13] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[12] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[13] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[12] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_452 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[15] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40090 \monitorStateMachine_1/TimestampOverflowxDP_lm_0[14] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[15] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \monitorStateMachine_1/TimestampOverflowxDP[14] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_453 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40091 \monitorStateMachine_1/TimestampResetxDN_0_a2_a1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40092 \monitorStateMachine_1/TimestampResetxDN_0_a2_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/TimestampResetxDP ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40091 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h020A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40092 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_SLICE_454 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40093 \monitorStateMachine_1/StatexDP_ns_0_0[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40094 \monitorStateMachine_1/TriggerxDN ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/TriggerxDP ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40093 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hAAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40094 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h4454) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module shiftRegister_1_SLICE_456 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[1] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[0] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_457 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[3] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[2] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_458 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[5] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[4] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_459 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[7] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[6] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_460 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[9] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[8] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_461 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[11] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[10] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_462 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[13] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[12] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_463 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[15] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[14] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_464 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[17] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[16] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_465 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[19] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[18] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_466 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[21] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[20] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_467 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[23] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[22] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_468 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[25] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[24] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_469 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[27] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[26] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_470 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[29] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[28] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_471 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[31] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[30] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_472 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[33] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[32] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_473 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[35] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[34] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_474 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[37] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[36] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_475 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[39] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[38] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_476 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[41] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[40] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_477 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[43] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[42] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_478 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[45] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[44] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_479 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[47] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[46] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_480 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[49] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[48] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_481 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[51] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[50] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_482 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[53] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[52] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_483 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[55] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[54] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_484 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[57] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[56] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_485 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[59] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[58] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_486 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[61] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[60] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_487 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[63] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[62] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_488 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[65] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[64] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_489 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[67] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[66] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_490 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[69] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[68] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_491 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[71] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[70] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_492 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[73] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[72] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_493 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[75] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[74] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_494 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[77] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[76] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_495 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[79] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[78] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_496 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[81] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[80] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_497 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[83] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[82] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_498 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[85] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[84] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_499 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[87] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[86] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_500 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[89] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[88] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_501 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[91] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[90] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_502 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[93] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[92] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_503 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[95] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[94] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_504 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[97] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[96] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_505 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[99] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[98] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_506 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[101] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[100] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_507 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[103] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[102] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_508 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[105] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[104] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_509 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[107] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[106] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_510 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[109] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[108] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_511 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[111] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[110] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_512 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[113] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[112] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_513 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[115] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[114] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_514 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[117] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[116] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module shiftRegister_1_SLICE_515 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0030 \shiftRegister_1/StatexD[119] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \shiftRegister_1/StatexD[118] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_516 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40095 \uEarlyPaketTimer/CountxDP_RNIDTBL[20] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[20] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[20] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40095 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hBAFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40096 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h4500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uEarlyPaketTimer_SLICE_517 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[1] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_518 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[3] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[2] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_519 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[5] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[4] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_520 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[7] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[6] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[7] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_521 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[9] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[8] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[9] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[8] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_522 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[11] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[10] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[11] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[10] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_523 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[13] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[12] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[13] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[12] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_524 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[15] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[14] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[15] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[14] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_525 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[17] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[16] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[17] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[16] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEarlyPaketTimer_SLICE_526 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[19] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40096 \uEarlyPaketTimer/CountxDP_lm_0[18] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[19] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEarlyPaketTimer/CountxDP[18] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEventCounter_SLICE_527 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEventCounter/CountxDP_lm_0[1] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40096 \uEventCounter/CountxDP_lm_0[0] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \uEventCounter/CountxDP[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEventCounter/CountxDP[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEventCounter_SLICE_528 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEventCounter/CountxDP_lm_0[3] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40096 \uEventCounter/CountxDP_lm_0[2] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \uEventCounter/CountxDP[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEventCounter/CountxDP[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEventCounter_SLICE_529 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEventCounter/CountxDP_lm_0[5] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40096 \uEventCounter/CountxDP_lm_0[4] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \uEventCounter/CountxDP[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEventCounter/CountxDP[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEventCounter_SLICE_530 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40096 \uEventCounter/CountxDP_lm_0[7] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40096 \uEventCounter/CountxDP_lm_0[6] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \uEventCounter/CountxDP[7] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uEventCounter/CountxDP[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEventCounter_SLICE_531 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40097 \uEventCounter/p_memoryless.op_eq.countxdn15 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40096 \uEventCounter/CountxDP_lm_0[8] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0030 \uEventCounter/CountxDP[8] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40097 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_532 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[8] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[7] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[8] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[7] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40098 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hA0A2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_533 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[12] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[11] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[12] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[11] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_534 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40063 \monitorStateMachine_1/TimestampResetxDN_0_a2_a2 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[13] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[13] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_535 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40099 \uSynchronizerStateMachine_1/StatexDP_RNO[4] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40100 \uSynchronizerStateMachine_1/StatexDP_ns_0[3] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/StatexDP[4] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uSynchronizerStateMachine_1/StatexDP[2] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40099 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0C0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40100 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hDC50) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_536 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40101 \monitorStateMachine_1/TimestampResetxDN_0_a2_0_RNO ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40102 \uSynchronizerStateMachine_1/StatexDP_RNO[5] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0088 \uSynchronizerStateMachine_1/StatexDP[5] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40101 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40102 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h5554) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_538 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[1] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_539 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[2] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[3] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[2] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_540 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[5] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[4] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[5] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[4] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_541 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[9] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[6] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[9] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[6] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_542 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40103 
    \uSynchronizerStateMachine_1/p_memless.op_gt.op_gt.counterxdn21lto4_RNI34405 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40098 \uSynchronizerStateMachine_1/CounterxDP_lm_0[10] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/CounterxDP[10] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40103 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h7F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_543 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40080 \uSynchronizerStateMachine_1/DividerxDP_lm_0[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40080 \uSynchronizerStateMachine_1/DividerxDP_lm_0[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/DividerxDP[1] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uSynchronizerStateMachine_1/DividerxDP[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_544 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40080 \uSynchronizerStateMachine_1/DividerxDP_lm_0[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40080 \uSynchronizerStateMachine_1/DividerxDP_lm_0[2] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/DividerxDP[3] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uSynchronizerStateMachine_1/DividerxDP[2] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_545 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40080 \uSynchronizerStateMachine_1/DividerxDP_lm_0[5] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40080 \uSynchronizerStateMachine_1/DividerxDP_lm_0[4] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/DividerxDP[5] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0030 \uSynchronizerStateMachine_1/DividerxDP[4] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_546 ( input B1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40049 \uSynchronizerStateMachine_1/StatexDP_ns_0_a3_0[3] ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40080 \uSynchronizerStateMachine_1/DividerxDP_lm_0[6] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/DividerxDP[6] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_547 ( input B1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40052 \uSynchronizerStateMachine_1/StatexDP_ns_i_o3[2] ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40083 \uSynchronizerStateMachine_1/StatexDP_RNO[3] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \uSynchronizerStateMachine_1/StatexDP[3] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_548 ( input M1, M0, CLK, output Q0, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0025 \uSynchronizerStateMachine_1/SyncInxSB ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0025 \uSynchronizerStateMachine_1/SyncInxSBN ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uTimestampCounter_SLICE_551 ( input M0, CE, LSR, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0025 \uTimestampCounter/CountxDP_fast[14] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_FifoDataInxD_3_8__SLICE_552 ( input C1, B1, A1, 
    C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552/monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552_K1_H1 
         , 
         \monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552/monitorStateMachine_1/FifoDataInxD_3[8]/GATE_H0 
         ;

  lut40104 \monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), 
    .Z(\monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552/monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40105 \monitorStateMachine_1/FifoDataInxD_3[8]/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), 
    .Z(\monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552/monitorStateMachine_1/FifoDataInxD_3[8]/GATE_H0 )
    );
  selmux2 \monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552_K0K1MUX ( 
    .D0(\monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552/monitorStateMachine_1/FifoDataInxD_3[8]/GATE_H0 )
    , 
    .D1(\monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552/monitorStateMachine_1/FifoDataInxD_3[8]/SLICE_552_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40104 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0404) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40105 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hACAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_FifoDataInxD_3_6__SLICE_553 ( input C1, B1, A1, 
    C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553/monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553_K1_H1 
         , 
         \monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553/monitorStateMachine_1/FifoDataInxD_3[6]/GATE_H0 
         ;

  lut40104 \monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), 
    .Z(\monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553/monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40105 \monitorStateMachine_1/FifoDataInxD_3[6]/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), 
    .Z(\monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553/monitorStateMachine_1/FifoDataInxD_3[6]/GATE_H0 )
    );
  selmux2 \monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553_K0K1MUX ( 
    .D0(\monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553/monitorStateMachine_1/FifoDataInxD_3[6]/GATE_H0 )
    , 
    .D1(\monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553/monitorStateMachine_1/FifoDataInxD_3[6]/SLICE_553_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_FifoDataInxD_3_4__SLICE_554 ( input C1, B1, A1, 
    C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554/monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554_K1_H1 
         , 
         \monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554/monitorStateMachine_1/FifoDataInxD_3[4]/GATE_H0 
         ;

  lut40104 \monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), 
    .Z(\monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554/monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40105 \monitorStateMachine_1/FifoDataInxD_3[4]/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), 
    .Z(\monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554/monitorStateMachine_1/FifoDataInxD_3[4]/GATE_H0 )
    );
  selmux2 \monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554_K0K1MUX ( 
    .D0(\monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554/monitorStateMachine_1/FifoDataInxD_3[4]/GATE_H0 )
    , 
    .D1(\monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554/monitorStateMachine_1/FifoDataInxD_3[4]/SLICE_554_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_555 ( input D1, C1, B1, A1, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40106 \ADCStateMachine_2/p_col.un7_nobxs_x_RNI7CU31 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40039 \ADCStateMachine_2/p_col.un23_nobxs ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40106 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hDFCF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cDVSResetStateMachine_1_SLICE_556 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40107 \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_2_tz ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40108 \cDVSResetStateMachine_1/un1_CountxDN_0_sqmuxa_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h557F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40108 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h88A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_557 ( input C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );
  wire   GNDI;

  lut40109 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_o2[9] ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40037 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_o2_RNINF861[9] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40109 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hF9F9) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_558 ( input C1, B1, A1, D0, C0, B0, A0, M0, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40110 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_o2[0] ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40111 \uSynchronizerStateMachine_1/FifoDataInxD_3_0[12] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP[0] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40110 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hF8F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40111 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFEFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_559 ( input D1, C1, B1, A1, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40112 \ADCStateMachine_2/StateColxDP_RNO_0[6] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40113 \ADCStateMachine_2/StateColxDP_RNO_2[6] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40112 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40113 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h4545) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_560 ( input D1, C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40114 \ADCStateMachine_2/p_col.op_lt.op_lt.colmodexd4lto17 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40050 \ADCStateMachine_2/p_col.op_lt.op_lt.colmodexd4lto17_RNO ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40114 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_561 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40054 \ADCStateMachine_2/StateColxDP_derived_clock_RNI67M14[9] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40115 \ADCStateMachine_2/StateColxDP_RNO_0[17] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40115 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h004C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_562 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40116 \ADCStateMachine_2/CDVSTestColMode1xSO_1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40061 \ADCStateMachine_2/CDVSTestColMode1xSO ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40116 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hEEEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_563 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN;

  lut40117 \ADCStateMachine_2/StateColxDP_RNIP9612[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40118 \ADCStateMachine_2/StateColxDP_RNO[9] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[118] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40117 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hECCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40118 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_564 ( input C1, B1, A1, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40119 \ADCStateMachine_2/StateRowxDP_ns_a2_2[0] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40120 \ADCStateMachine_2/StateRowxDP_ns_a2_0[0] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40119 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40120 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_565 ( input B1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40050 \ADCStateMachine_2/ADCconvstxEBO_0_a2_1 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40092 \ADCStateMachine_2/ADCconvstxEBO_0_a2 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_566 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40121 \ADCStateMachine_2/StateColxDP_RNO_1[6] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40122 \ADCStateMachine_2/StateColxDP_RNO_4[6] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40121 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h1012) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40122 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hA088) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_567 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40111 \ADCStateMachine_2/StateColxDP_RNO_2[4] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40123 \ADCStateMachine_2/StateColxDP_RNO_4[4] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40123 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFEAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_568 ( input D1, C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40054 \ADCStateMachine_2/StateColxDP_RNO_0[4] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40049 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0_RNIORTF[31] ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_569 ( input C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40059 \ADCStateMachine_2/StateColxDP_RNI4E7G1[5] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40124 \ADCStateMachine_2/StateRowxDP_RNIRCTS[11] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40124 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h222A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_570 ( input C1, B1, A1, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40125 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0_RNILAMP2[31] ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40060 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0_RNI7S961[31] ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40125 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_571 ( input D1, C1, B1, A1, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40126 \ADCStateMachine_2/StateColxDP_RNI2HCD1[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40060 \ADCStateMachine_2/StateColxDP_RNIDLDS[13] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40126 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h070F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_572 ( input C1, B1, A1, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40127 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0_RNIVN7M1[31] ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40060 \ADCStateMachine_2/p_col.un1_DividerColxDP_0_cry_0_RNI7S961_0[31] 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40127 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0707) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cDVSResetStateMachine_1_SLICE_573 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40054 \cDVSResetStateMachine_1/StatexDP_ns_0_o7_1_2[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40079 \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_574 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40126 \cDVSResetStateMachine_1/StatexDP_ns_0_1_0[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40059 \cDVSResetStateMachine_1/StatexDP_ns_0_2_tz[1] ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_575 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40063 \cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_6[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40046 \cDVSResetStateMachine_1/StatexDP_ns_0_a7_1[1] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_576 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40052 \cDVSResetStateMachine_1/StatexDP_ns_0_o3[1] ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40128 \cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_0_1[1] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40128 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hEEEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cDVSResetStateMachine_1_SLICE_577 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40050 \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_0 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40114 \cDVSResetStateMachine_1/StatexDP_ns_0_a3_1[1] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cDVSResetStateMachine_1_SLICE_578 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40050 \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a1_0 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40129 \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_3_1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40129 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h00BF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cDVSResetStateMachine_1_SLICE_579 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40054 \cDVSResetStateMachine_1/StatexDP_ns_0_o7_0[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40063 \cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_9[1] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_580 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40074 \monitorStateMachine_1/AddressTimestampSelectxSO_a3_i_o2[0] ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40063 \monitorStateMachine_1/TimestampRegWritexEO_i_0_a2_RNICD4P ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_581 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40063 \monitorStateMachine_1/StatexDP_ns_i_0_a2_11[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40114 \monitorStateMachine_1/StatexDP_ns_i_0_a2[3] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_582 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40068 \monitorStateMachine_1/StatexDP_ns_0_a2_1_3[0] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40085 \monitorStateMachine_1/StatexDP_ns_0_a2_1_5[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_583 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40049 \uSynchronizerStateMachine_1/ResetTimestampxSBO_i_a3 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40102 \monitorStateMachine_1/TimestampResetxDN_0_a2_0_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_584 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40130 \monitorStateMachine_1/p_memless.op_gt.op_gt.un12_aerreqxsblto6 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40131 \monitorStateMachine_1/p_memless.op_gt.op_gt.un12_aerreqxsblto6_1 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40130 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hE0F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40131 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h007F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_585 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, output F0, F1 );

  lut40132 \uSynchronizerStateMachine_1/ResetTimestampxSBO_i_0_o2_2 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40133 \uSynchronizerStateMachine_1/ResetTimestampxSBO_i_0_o2_2_RNICSNV ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40132 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hF8FC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40133 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hF888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_586 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40134 \uSynchronizerStateMachine_1/StatexDP_RNINI3N[5] ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40135 \uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_8_RNIUA2O1 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40134 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40135 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0E0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_587 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  lut40063 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_a2_3[0] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40136 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0_RNIOIV31[0] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0030 \monitorStateMachine_1/StatexDP[3] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40136 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0023) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_588 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, output F0, F1 );

  lut40137 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40136 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0_RNIQKV31[1] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40137 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h7530) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_589 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, output F0, F1 );

  lut40137 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[2] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40136 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0_RNISMV31[2] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_590 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, output F0, F1 );

  lut40137 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40136 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0_RNIUOV31[3] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_591 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, output F0, F1 );

  lut40137 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[5] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40136 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0_RNI2TV31[5] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_592 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, output F0, F1 );

  lut40137 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[7] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40136 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0_RNI61041[7] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_593 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, output F0, F1 );

  lut40138 
    \uSynchronizerStateMachine_1/p_memless.op_gt.op_gt.dividerxdn10lto6 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40139 
    \uSynchronizerStateMachine_1/p_memless.op_gt.op_gt.dividerxdn10lto6_RNIN2C91 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40138 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hC0E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40139 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFFFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_594 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, output F0, F1 );

  lut40063 \uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_7 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40140 \uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_8 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40140 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_595 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, output F0, F1 );

  lut40072 \uSynchronizerStateMachine_1/CounterxDP_RNI7GKB1[10] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40097 \uSynchronizerStateMachine_1/CounterxDP_RNIQRIV3[11] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_596 ( input C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );
  wire   GNDI;

  lut40119 
    \uSynchronizerStateMachine_1/p_memless.op_lt.op_lt.syncoutxsbo4lto3 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40141 \uSynchronizerStateMachine_1/SyncOutxSBO_0_sqmuxa_2 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40141 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0F07) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_597 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, output F0, F1 );

  lut40142 \uSynchronizerStateMachine_1/ResetTimestampxSBO_i_0_o2_2_1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40114 \uSynchronizerStateMachine_1/p_memless.op_gt.op_gt.counterxdn5lto6 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40142 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h3F7F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_598 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40052 
    \uSynchronizerStateMachine_1/p_memless.op_gt.op_gt.counterxdn21lto4_0 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40143 
    \uSynchronizerStateMachine_1/p_memless.op_gt.op_gt.counterxdn21lto4 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40143 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFFF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_599 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40144 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0_RNO_0[16] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40145 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0_RNO[16] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40144 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h7310) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40145 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h8421) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_600 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40144 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0_RNO_0[19] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40145 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0_RNO[19] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_601 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40144 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0_RNO_2[19] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40145 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0_RNO_1[19] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_602 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40144 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0_RNO_0[23] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40145 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0_RNO[23] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_603 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    CE, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40146 \ADCStateMachine_2/p_col.un1_DividerColxDP_1_cry_0_RNI5K9V[31] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40146 \ADCStateMachine_2/StateColxDP_RNO_1[9] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[11] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40146 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hAE0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_604 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    CE, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40147 \ADCStateMachine_2/StateColxDP_derived_clock_RNI9Q2K[9] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40148 \ADCStateMachine_2/StateColxDP_derived_clock_RNI9Q2K_0[9] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0025 \ADCStateMachine_2/StateColxDP[9] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40147 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hCE0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40148 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h31F5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_605 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40036 \ADCStateMachine_2/StateColxDP_RNO_3[4] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40036 \ADCStateMachine_2/p_col.un1_DividerColxDP_10_cry_0_RNIHSV71[31] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_606 ( input C1, B1, A1, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40125 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0_RNO_2[23] ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40149 \ADCStateMachine_2/p_col.un1_DividerColxDP_11_cry_0_RNO_1[23] ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40149 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h2121) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_607 ( input C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40150 \ADCStateMachine_2/StateColxDP_RNILRUG[0] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40151 \ADCStateMachine_2/StateColxDN_cnst_i_a2[5] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40150 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40151 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h31FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_608 ( input C1, B1, A1, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40152 \ADCStateMachine_2/StateColxDN_0_sqmuxa_3 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \ADCStateMachine_2/un1_statecolxdn9 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40152 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_609 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40153 \uSynchronizerStateMachine_1/FifoDataInxD_3_0_a2[12] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40054 \monitorStateMachine_1/AddressTimestampSelectxSO_a3_i[0] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40153 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hAAA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_SLICE_610 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40063 \monitorStateMachine_1/TimestampResetxDN_0_a2_a0_1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40119 \monitorStateMachine_1/TimestampResetxDN_0_a2_a1_0_0 ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uEventCounter_SLICE_611 ( input B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40052 \uEventCounter/p_memoryless.op_eq.countxdn15_RNIQHH9 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40125 \uEventCounter/p_memoryless.op_eq.countxdn15_4 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_612 ( input D1, C1, B1, A1, B0, A0, M0, LSR, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, M0_NOTIN, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40068 \ADCStateMachine_2/ClockxC_RNIU9VN5 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40050 \ADCStateMachine_2/ADCwordWritexE_i_a2 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0025 \ADCStateMachine_2/ClockxC ( .D0(M0_NOTIN), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  inverter M0_INVERTERIN( .I(M0_dly), .Z(M0_NOTIN));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module fifoStatemachine_1_SLICE_613 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40154 \fifoStatemachine_1/StatexDP_RNIRDNA[1] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40155 \fifoStatemachine_1/FX2FifoWritexEBO_1_0 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40154 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hBBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40155 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h7777) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_SLICE_614 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40156 \monitorStateMachine_1/StatexDP_ns_0_a2_0[0] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40119 \monitorStateMachine_1/FifoWritexEO_0_a3_0_a2 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40156 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_SLICE_615 ( input C1, B1, A1, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40119 \monitorStateMachine_1/TimestampRegWritexEO_i_0_a2_0 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40157 \monitorStateMachine_1/StatexDP_ns_i_0_o2[3] ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40157 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFBFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_616 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40158 \uSynchronizerStateMachine_1/StatexDP_ns_i_a3[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40049 \uSynchronizerStateMachine_1/ResetTimestampxSBO_i_0_a2_1_1_0 ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40158 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0203) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_617 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40159 \uADCRegister/StatexDP_en[12] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40160 \ADCStateMachine_2/RegisterWritexEO_i_0_RNIPE2H ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40159 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hA8A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40160 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h5455) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_618 ( input C1, B1, A1, C0, B0, A0, M0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN;

  lut40161 \ADCStateMachine_2/StateColxDP_RNO_2[9] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40162 \ADCStateMachine_2/p_col.un15_usecxei_cry_16_0_RNIHVDP ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0076 \shiftRegister_1/DataOutxDO[119] ( .D0(M0), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK), .Z(CLK_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40161 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h5151) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40162 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uSynchronizerStateMachine_1_SLICE_619 ( input C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );
  wire   GNDI;

  lut40125 \uSynchronizerStateMachine_1/StatexDP_RNIE4NS[2] ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40163 
    \uSynchronizerStateMachine_1/p_memless.op_gt.op_gt.dividerxdn10lto6_1 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40163 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h01FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_SLICE_620 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40063 \monitorStateMachine_1/StatexDP_ns_i_0_a2_9[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40063 \monitorStateMachine_1/StatexDP_ns_i_0_a2_10[3] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_621 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40049 \ADCStateMachine_2/ColModexD_1_0_.m1 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \ADCStateMachine_2/p_col.op_lt.op_lt.colmodexd4lto17_4 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_622 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40063 \ADCStateMachine_2/p_col.op_lt.op_lt.colmodexd4lto17_5 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40063 \ADCStateMachine_2/p_col.op_lt.op_lt.colmodexd4lto17_6_0 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_623 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40052 \ADCStateMachine_2/un11_doreadxs ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40049 \ADCStateMachine_2/StateColxDN_1_sqmuxa_1_0 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_624 ( input B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40134 \monitorStateMachine_1/StatexDP_ns_i_a2_i_a2[6] ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40164 \monitorStateMachine_1/AERACKxSBO_iv_i_0 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40164 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h2A2F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cDVSResetStateMachine_1_SLICE_625 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40119 \cDVSResetStateMachine_1/CountxDN_0_sqmuxa_a0_1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40054 \cDVSResetStateMachine_1/p_memless.op_gt.op_gt.un3lto15_2 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_626 ( input B1, A1, A0, output F0, F1 );
  wire   GNDI;

  lut40052 \ADCStateMachine_2/ADCclockxCO ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40165 \ADCStateMachine_2/CountColxDP_cry_0_RNO[0] ( .A(A0), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40165 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cDVSResetStateMachine_1_SLICE_627 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40092 \cDVSResetStateMachine_1/StatexDP_ns_0_a7_1_5[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40166 \cDVSResetStateMachine_1/p_memless.op_gt.op_gt.statexdn15lto3 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40166 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hF800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_628 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40037 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_o2_RNIDENG[9] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40167 \fifoStatemachine_1/StatexDP_ns_1_0_.m2 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40167 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h0808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_629 ( input C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40074 \ADCStateMachine_2/un1_StateRowxDP_3_i_1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \ADCStateMachine_2/un1_StateRowxDP_3_i_a2 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_630 ( input B1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut4 \ADCStateMachine_2/StateColxDP_RNO_5[4] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40097 \ADCStateMachine_2/ClockxC_RNI4URR2 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_631 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40168 \monitorStateMachine_1/CDVSTestChipResetxRB ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40080 \cDVSResetStateMachine_1/StatexDP_ns_0_a7_2[1] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40168 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h44EC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_632 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40037 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_o2_RNI9ANG[9] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40052 \monitorStateMachine_1/StatexDP_fast_RNI9VKP[6] ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_633 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, output F0, F1 );

  lut40137 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_0[0] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40037 \uSynchronizerStateMachine_1/FifoDataInxD_3_i_o2_RNI78NG[9] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_634 ( input B1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut4 \ADCStateMachine_2/StateColxDP_RNO_1[4] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40169 \ADCStateMachine_2/StateColxDP_RNO_3[6] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40169 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hEAC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_635 ( input C0, B0, A0, output F0 );
  wire   GNDI;

  lut40170 \ADCStateMachine_2/ColModexD_1_0_.N_11_mux_i ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40170 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFDFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_636 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40171 \ADCStateMachine_2/un16_nobxs_axb_0 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40171 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module ADCStateMachine_2_SLICE_637 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40049 \ADCStateMachine_2/p_col.un7_nobxs_x ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCStateMachine_2_SLICE_638 ( output F0 );
  wire   GNDI;

  lut40040 \ADCStateMachine_2/VCC ( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module SLICE_639 ( input D0, C0, B0, A0, M0, CE, LSR, CLK, output F0, Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40172 \monitorStateMachine_1/TimestampOverflowxDP_cry_0_RNO[0] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0025 \uTimestampCounter/CountxDP[14] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40172 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h1FF1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module monitorStateMachine_1_SLICE_640 ( input D0, C0, B0, A0, output F0 );

  lut40063 \monitorStateMachine_1/StatexDP_ns_i_0_a2_8[3] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module monitorStateMachine_1_SLICE_641 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40050 \monitorStateMachine_1/StatexDP_fast_RNI9VKP_0[6] ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_642 ( input B0, A0, output F0 );
  wire   GNDI;

  lut40155 \uSynchronizerStateMachine_1/ADCsmRstxE_i ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_643 ( input D0, C0, B0, A0, output F0 );

  lut40054 \uSynchronizerStateMachine_1/p_memless.op_gt.op_gt.counterxdn5lto3 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uSynchronizerStateMachine_1_SLICE_644 ( input D0, C0, B0, A0, output F0 );

  lut40063 \uSynchronizerStateMachine_1/CounterxDP_RNIN1UO1[9] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module uTimestampCounter_SLICE_645 ( input B0, A0, M0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40171 \uTimestampCounter/OverflowxSO ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0025 \uTimestampCounter/MSbDelayedxDP ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uEventCounter_SLICE_646 ( input D0, C0, B0, A0, output F0 );

  lut40063 \uEventCounter/p_memoryless.op_eq.countxdn15_5 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_647 ( input A0, output F0 );
  wire   GNDI;

  lut40165 CDVSTestBiasEnablexEO_pad_RNO( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_648 ( output F0 );
  wire   GNDI;

  lut40040 VCC( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module SLICE_649 ( input A0, output F0 );
  wire   GNDI;

  lut40165 ResetxRBI_pad_RNIC1VE( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCwordxDIO_1_ ( output PADDI, input PADDT, inout ADCwordxDIO1 );
  wire   GNDI;

  mjeiobuf \ADCwordxDIO_pad[1] ( .I(GNDI), .T(PADDT), .Z(PADDI), 
    .PAD(ADCwordxDIO1), .PADI(ADCwordxDIO1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDT => ADCwordxDIO1) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (ADCwordxDIO1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCwordxDIO1, 0:0:0);
    $width (negedge ADCwordxDIO1, 0:0:0);
  endspecify

endmodule

module mjeiobuf ( input I, T, output Z, PAD, input PADI );

  IBPU INST1( .I(PADI), .O(Z));
  OBZPU INST2( .I(I), .T(T), .O(PAD));
endmodule

module ADCwordxDIO_0_ ( input PADDT, inout ADCwordxDIO0 );
  wire   GNDI;

  mjeiobuf \ADCwordxDIO_pad[0] ( .I(GNDI), .T(PADDT), .Z(), .PAD(ADCwordxDIO0), 
    .PADI(ADCwordxDIO0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDT => ADCwordxDIO0) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    $width (posedge ADCwordxDIO0, 0:0:0);
    $width (negedge ADCwordxDIO0, 0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_0_ ( input PADDO, output FX2FifoDataxDIO0 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[0] ( .I(PADDO), .PAD(FX2FifoDataxDIO0));

  specify
    (PADDO => FX2FifoDataxDIO0) = (0:0:0,0:0:0);
  endspecify

endmodule

module mjeiobuf0173 ( input I, output PAD );

  OB INST5( .I(I), .O(PAD));
endmodule

module FX2FifoInFullxSBI ( output PADDI, input FX2FifoInFullxSBI );

  mjeiobuf0174 FX2FifoInFullxSBI_pad( .Z(PADDI), .PAD(FX2FifoInFullxSBI));

  specify
    (FX2FifoInFullxSBI => PADDI) = (0:0:0,0:0:0);
    $width (posedge FX2FifoInFullxSBI, 0:0:0);
    $width (negedge FX2FifoInFullxSBI, 0:0:0);
  endspecify

endmodule

module mjeiobuf0174 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module AERMonitorAddressxDI_8_ ( output PADDI, input AERMonitorAddressxDI8 );

  mjeiobuf0175 \AERMonitorAddressxDI_pad[8] ( .Z(PADDI), 
    .PAD(AERMonitorAddressxDI8));

  specify
    (AERMonitorAddressxDI8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge AERMonitorAddressxDI8, 0:0:0);
    $width (negedge AERMonitorAddressxDI8, 0:0:0);
  endspecify

endmodule

module mjeiobuf0175 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module AERMonitorAddressxDI_7_ ( output PADDI, input AERMonitorAddressxDI7 );

  mjeiobuf0175 \AERMonitorAddressxDI_pad[7] ( .Z(PADDI), 
    .PAD(AERMonitorAddressxDI7));

  specify
    (AERMonitorAddressxDI7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge AERMonitorAddressxDI7, 0:0:0);
    $width (negedge AERMonitorAddressxDI7, 0:0:0);
  endspecify

endmodule

module AERMonitorAddressxDI_6_ ( output PADDI, input AERMonitorAddressxDI6 );

  mjeiobuf0175 \AERMonitorAddressxDI_pad[6] ( .Z(PADDI), 
    .PAD(AERMonitorAddressxDI6));

  specify
    (AERMonitorAddressxDI6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge AERMonitorAddressxDI6, 0:0:0);
    $width (negedge AERMonitorAddressxDI6, 0:0:0);
  endspecify

endmodule

module AERMonitorAddressxDI_5_ ( output PADDI, input AERMonitorAddressxDI5 );

  mjeiobuf0175 \AERMonitorAddressxDI_pad[5] ( .Z(PADDI), 
    .PAD(AERMonitorAddressxDI5));

  specify
    (AERMonitorAddressxDI5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge AERMonitorAddressxDI5, 0:0:0);
    $width (negedge AERMonitorAddressxDI5, 0:0:0);
  endspecify

endmodule

module AERMonitorAddressxDI_4_ ( output PADDI, input AERMonitorAddressxDI4 );

  mjeiobuf0175 \AERMonitorAddressxDI_pad[4] ( .Z(PADDI), 
    .PAD(AERMonitorAddressxDI4));

  specify
    (AERMonitorAddressxDI4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge AERMonitorAddressxDI4, 0:0:0);
    $width (negedge AERMonitorAddressxDI4, 0:0:0);
  endspecify

endmodule

module AERMonitorAddressxDI_3_ ( output PADDI, input AERMonitorAddressxDI3 );

  mjeiobuf0175 \AERMonitorAddressxDI_pad[3] ( .Z(PADDI), 
    .PAD(AERMonitorAddressxDI3));

  specify
    (AERMonitorAddressxDI3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge AERMonitorAddressxDI3, 0:0:0);
    $width (negedge AERMonitorAddressxDI3, 0:0:0);
  endspecify

endmodule

module AERMonitorAddressxDI_2_ ( output PADDI, input AERMonitorAddressxDI2 );

  mjeiobuf0175 \AERMonitorAddressxDI_pad[2] ( .Z(PADDI), 
    .PAD(AERMonitorAddressxDI2));

  specify
    (AERMonitorAddressxDI2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge AERMonitorAddressxDI2, 0:0:0);
    $width (negedge AERMonitorAddressxDI2, 0:0:0);
  endspecify

endmodule

module AERMonitorAddressxDI_1_ ( output PADDI, input AERMonitorAddressxDI1 );

  mjeiobuf0175 \AERMonitorAddressxDI_pad[1] ( .Z(PADDI), 
    .PAD(AERMonitorAddressxDI1));

  specify
    (AERMonitorAddressxDI1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge AERMonitorAddressxDI1, 0:0:0);
    $width (negedge AERMonitorAddressxDI1, 0:0:0);
  endspecify

endmodule

module AERMonitorAddressxDI_0_ ( output PADDI, input AERMonitorAddressxDI0 );

  mjeiobuf0175 \AERMonitorAddressxDI_pad[0] ( .Z(PADDI), 
    .PAD(AERMonitorAddressxDI0));

  specify
    (AERMonitorAddressxDI0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge AERMonitorAddressxDI0, 0:0:0);
    $width (negedge AERMonitorAddressxDI0, 0:0:0);
  endspecify

endmodule

module AERMonitorACKxSBO ( input PADDO, output AERMonitorACKxSBO );

  mjeiobuf0176 AERMonitorACKxSBO_pad( .I(PADDO), .PAD(AERMonitorACKxSBO));

  specify
    (PADDO => AERMonitorACKxSBO) = (0:0:0,0:0:0);
  endspecify

endmodule

module mjeiobuf0176 ( input I, output PAD );

  OB INST5( .I(I), .O(PAD));
endmodule

module AERMonitorREQxABI ( output PADDI, input AERMonitorREQxABI );

  mjeiobuf0174 AERMonitorREQxABI_pad( .Z(PADDI), .PAD(AERMonitorREQxABI));

  specify
    (AERMonitorREQxABI => PADDI) = (0:0:0,0:0:0);
    $width (posedge AERMonitorREQxABI, 0:0:0);
    $width (negedge AERMonitorREQxABI, 0:0:0);
  endspecify

endmodule

module DebugxSIO_15_ ( input PADDO, inout DebugxSIO15 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[15] ( .I(PADDO), .T(GNDI), .Z(), 
    .PAD(DebugxSIO15), .PADI(DebugxSIO15));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO15) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO15, 0:0:0);
    $width (negedge DebugxSIO15, 0:0:0);
  endspecify

endmodule

module mjeiobuf0177 ( input I, T, output Z, PAD, input PADI );

  IB INST1( .I(PADI), .O(Z));
  OBW INST2( .I(I), .T(T), .O(PAD));
endmodule

module DebugxSIO_14_ ( output PADDI, inout DebugxSIO14 );
  wire   GNDI, VCCI;

  mjeiobuf0178 \DebugxSIO_pad[14] ( .I(GNDI), .T(VCCI), .Z(PADDI), 
    .PAD(DebugxSIO14), .PADI(DebugxSIO14));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (DebugxSIO14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO14, 0:0:0);
    $width (negedge DebugxSIO14, 0:0:0);
  endspecify

endmodule

module mjeiobuf0178 ( input I, T, output Z, PAD, input PADI );

  IB INST1( .I(PADI), .O(Z));
  OBW INST2( .I(I), .T(T), .O(PAD));
endmodule

module DebugxSIO_13_ ( inout DebugxSIO13 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[13] ( .I(GNDI), .T(GNDI), .Z(), 
    .PAD(DebugxSIO13), .PADI(DebugxSIO13));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    $width (posedge DebugxSIO13, 0:0:0);
    $width (negedge DebugxSIO13, 0:0:0);
  endspecify

endmodule

module DebugxSIO_12_ ( input PADDO, inout DebugxSIO12 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[12] ( .I(PADDO), .T(GNDI), .Z(), 
    .PAD(DebugxSIO12), .PADI(DebugxSIO12));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO12) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO12, 0:0:0);
    $width (negedge DebugxSIO12, 0:0:0);
  endspecify

endmodule

module DebugxSIO_11_ ( input PADDO, inout DebugxSIO11 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[11] ( .I(PADDO), .T(GNDI), .Z(), 
    .PAD(DebugxSIO11), .PADI(DebugxSIO11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO11) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO11, 0:0:0);
    $width (negedge DebugxSIO11, 0:0:0);
  endspecify

endmodule

module DebugxSIO_10_ ( input PADDO, inout DebugxSIO10 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[10] ( .I(PADDO), .T(GNDI), .Z(), 
    .PAD(DebugxSIO10), .PADI(DebugxSIO10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO10) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO10, 0:0:0);
    $width (negedge DebugxSIO10, 0:0:0);
  endspecify

endmodule

module DebugxSIO_9_ ( output PADDI, inout DebugxSIO9 );
  wire   GNDI, VCCI;

  mjeiobuf0178 \DebugxSIO_pad[9] ( .I(GNDI), .T(VCCI), .Z(PADDI), 
    .PAD(DebugxSIO9), .PADI(DebugxSIO9));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (DebugxSIO9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO9, 0:0:0);
    $width (negedge DebugxSIO9, 0:0:0);
  endspecify

endmodule

module DebugxSIO_8_ ( inout DebugxSIO8 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[8] ( .I(GNDI), .T(GNDI), .Z(), .PAD(DebugxSIO8), 
    .PADI(DebugxSIO8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    $width (posedge DebugxSIO8, 0:0:0);
    $width (negedge DebugxSIO8, 0:0:0);
  endspecify

endmodule

module DebugxSIO_7_ ( input PADDO, inout DebugxSIO7 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[7] ( .I(PADDO), .T(GNDI), .Z(), .PAD(DebugxSIO7), 
    .PADI(DebugxSIO7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO7) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO7, 0:0:0);
    $width (negedge DebugxSIO7, 0:0:0);
  endspecify

endmodule

module DebugxSIO_6_ ( input PADDO, inout DebugxSIO6 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[6] ( .I(PADDO), .T(GNDI), .Z(), .PAD(DebugxSIO6), 
    .PADI(DebugxSIO6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO6) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO6, 0:0:0);
    $width (negedge DebugxSIO6, 0:0:0);
  endspecify

endmodule

module DebugxSIO_5_ ( input PADDO, inout DebugxSIO5 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[5] ( .I(PADDO), .T(GNDI), .Z(), .PAD(DebugxSIO5), 
    .PADI(DebugxSIO5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO5) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO5, 0:0:0);
    $width (negedge DebugxSIO5, 0:0:0);
  endspecify

endmodule

module DebugxSIO_4_ ( input PADDO, inout DebugxSIO4 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[4] ( .I(PADDO), .T(GNDI), .Z(), .PAD(DebugxSIO4), 
    .PADI(DebugxSIO4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO4) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO4, 0:0:0);
    $width (negedge DebugxSIO4, 0:0:0);
  endspecify

endmodule

module DebugxSIO_3_ ( input PADDO, inout DebugxSIO3 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[3] ( .I(PADDO), .T(GNDI), .Z(), .PAD(DebugxSIO3), 
    .PADI(DebugxSIO3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO3) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO3, 0:0:0);
    $width (negedge DebugxSIO3, 0:0:0);
  endspecify

endmodule

module DebugxSIO_2_ ( input PADDO, inout DebugxSIO2 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[2] ( .I(PADDO), .T(GNDI), .Z(), .PAD(DebugxSIO2), 
    .PADI(DebugxSIO2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO2) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO2, 0:0:0);
    $width (negedge DebugxSIO2, 0:0:0);
  endspecify

endmodule

module DebugxSIO_1_ ( input PADDO, inout DebugxSIO1 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[1] ( .I(PADDO), .T(GNDI), .Z(), .PAD(DebugxSIO1), 
    .PADI(DebugxSIO1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO1) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO1, 0:0:0);
    $width (negedge DebugxSIO1, 0:0:0);
  endspecify

endmodule

module DebugxSIO_0_ ( input PADDO, inout DebugxSIO0 );
  wire   GNDI;

  mjeiobuf0177 \DebugxSIO_pad[0] ( .I(PADDO), .T(GNDI), .Z(), .PAD(DebugxSIO0), 
    .PADI(DebugxSIO0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DebugxSIO0) = (0:0:0,0:0:0);
    $width (posedge DebugxSIO0, 0:0:0);
    $width (negedge DebugxSIO0, 0:0:0);
  endspecify

endmodule

module LED3xSO ( input PADDO, output LED3xSO );

  mjeiobuf0173 LED3xSO_pad( .I(PADDO), .PAD(LED3xSO));

  specify
    (PADDO => LED3xSO) = (0:0:0,0:0:0);
  endspecify

endmodule

module LED2xSO ( input PADDO, output LED2xSO );

  mjeiobuf0173 LED2xSO_pad( .I(PADDO), .PAD(LED2xSO));

  specify
    (PADDO => LED2xSO) = (0:0:0,0:0:0);
  endspecify

endmodule

module LED1xSO ( input PADDO, output LED1xSO );

  mjeiobuf0173 LED1xSO_pad( .I(PADDO), .PAD(LED1xSO));

  specify
    (PADDO => LED1xSO) = (0:0:0,0:0:0);
  endspecify

endmodule

module CDVSTestBiasDiagSelxSO ( input PADDO, output CDVSTestBiasDiagSelxSO );

  mjeiobuf0173 CDVSTestBiasDiagSelxSO_pad( .I(PADDO), 
    .PAD(CDVSTestBiasDiagSelxSO));

  specify
    (PADDO => CDVSTestBiasDiagSelxSO) = (0:0:0,0:0:0);
  endspecify

endmodule

module CDVSTestColMode1xSO ( input PADDO, output CDVSTestColMode1xSO );

  mjeiobuf0173 CDVSTestColMode1xSO_pad( .I(PADDO), .PAD(CDVSTestColMode1xSO));

  specify
    (PADDO => CDVSTestColMode1xSO) = (0:0:0,0:0:0);
  endspecify

endmodule

module CDVSTestColMode0xSO ( input PADDO, output CDVSTestColMode0xSO );

  mjeiobuf0173 CDVSTestColMode0xSO_pad( .I(PADDO), .PAD(CDVSTestColMode0xSO));

  specify
    (PADDO => CDVSTestColMode0xSO) = (0:0:0,0:0:0);
  endspecify

endmodule

module CDVSTestChipResetxRBO ( input PADDO, output CDVSTestChipResetxRBO );

  mjeiobuf0173 CDVSTestChipResetxRBO_pad( .I(PADDO), 
    .PAD(CDVSTestChipResetxRBO));

  specify
    (PADDO => CDVSTestChipResetxRBO) = (0:0:0,0:0:0);
  endspecify

endmodule

module CDVSTestBiasEnablexEO ( input PADDO, output CDVSTestBiasEnablexEO );

  mjeiobuf0173 CDVSTestBiasEnablexEO_pad( .I(PADDO), 
    .PAD(CDVSTestBiasEnablexEO));

  specify
    (PADDO => CDVSTestBiasEnablexEO) = (0:0:0,0:0:0);
  endspecify

endmodule

module CDVSTestSRColInxSO ( input PADDO, output CDVSTestSRColInxSO );

  mjeiobuf0173 CDVSTestSRColInxSO_pad( .I(PADDO), .PAD(CDVSTestSRColInxSO));

  specify
    (PADDO => CDVSTestSRColInxSO) = (0:0:0,0:0:0);
  endspecify

endmodule

module CDVSTestSRRowInxSO ( input PADDO, output CDVSTestSRRowInxSO );

  mjeiobuf0173 CDVSTestSRRowInxSO_pad( .I(PADDO), .PAD(CDVSTestSRRowInxSO));

  specify
    (PADDO => CDVSTestSRRowInxSO) = (0:0:0,0:0:0);
  endspecify

endmodule

module CDVSTestSRColClockxSO ( input PADDO, output CDVSTestSRColClockxSO );

  mjeiobuf0173 CDVSTestSRColClockxSO_pad( .I(PADDO), 
    .PAD(CDVSTestSRColClockxSO));

  specify
    (PADDO => CDVSTestSRColClockxSO) = (0:0:0,0:0:0);
  endspecify

endmodule

module CDVSTestSRRowClockxSO ( input PADDO, output CDVSTestSRRowClockxSO );

  mjeiobuf0173 CDVSTestSRRowClockxSO_pad( .I(PADDO), 
    .PAD(CDVSTestSRRowClockxSO));

  specify
    (PADDO => CDVSTestSRRowClockxSO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCbusyxSI ( output PADDI, input ADCbusyxSI );

  mjeiobuf0174 ADCbusyxSI_pad( .Z(PADDI), .PAD(ADCbusyxSI));

  specify
    (ADCbusyxSI => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCbusyxSI, 0:0:0);
    $width (negedge ADCbusyxSI, 0:0:0);
  endspecify

endmodule

module ADCconvstxEBO ( input PADDO, output ADCconvstxEBO );

  mjeiobuf0173 ADCconvstxEBO_pad( .I(PADDO), .PAD(ADCconvstxEBO));

  specify
    (PADDO => ADCconvstxEBO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCreadxEBO ( input PADDO, output ADCreadxEBO );

  mjeiobuf0173 ADCreadxEBO_pad( .I(PADDO), .PAD(ADCreadxEBO));

  specify
    (PADDO => ADCreadxEBO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCwritexEBO ( input PADDO, output ADCwritexEBO );

  mjeiobuf0173 ADCwritexEBO_pad( .I(PADDO), .PAD(ADCwritexEBO));

  specify
    (PADDO => ADCwritexEBO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ADCwordxDIO_11_ ( output PADDI, input PADDT, inout ADCwordxDIO11 );
  wire   GNDI;

  mjeiobuf \ADCwordxDIO_pad[11] ( .I(GNDI), .T(PADDT), .Z(PADDI), 
    .PAD(ADCwordxDIO11), .PADI(ADCwordxDIO11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDT => ADCwordxDIO11) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (ADCwordxDIO11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCwordxDIO11, 0:0:0);
    $width (negedge ADCwordxDIO11, 0:0:0);
  endspecify

endmodule

module ADCwordxDIO_10_ ( output PADDI, input PADDT, inout ADCwordxDIO10 );
  wire   GNDI;

  mjeiobuf \ADCwordxDIO_pad[10] ( .I(GNDI), .T(PADDT), .Z(PADDI), 
    .PAD(ADCwordxDIO10), .PADI(ADCwordxDIO10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDT => ADCwordxDIO10) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (ADCwordxDIO10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCwordxDIO10, 0:0:0);
    $width (negedge ADCwordxDIO10, 0:0:0);
  endspecify

endmodule

module ADCwordxDIO_9_ ( output PADDI, input PADDT, inout ADCwordxDIO9 );
  wire   GNDI;

  mjeiobuf \ADCwordxDIO_pad[9] ( .I(GNDI), .T(PADDT), .Z(PADDI), 
    .PAD(ADCwordxDIO9), .PADI(ADCwordxDIO9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDT => ADCwordxDIO9) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (ADCwordxDIO9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCwordxDIO9, 0:0:0);
    $width (negedge ADCwordxDIO9, 0:0:0);
  endspecify

endmodule

module ADCwordxDIO_8_ ( output PADDI, input PADDT, PADDO, inout ADCwordxDIO8 );

  mjeiobuf \ADCwordxDIO_pad[8] ( .I(PADDO), .T(PADDT), .Z(PADDI), 
    .PAD(ADCwordxDIO8), .PADI(ADCwordxDIO8));

  specify
    (PADDT => ADCwordxDIO8) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ADCwordxDIO8) = (0:0:0,0:0:0);
    (ADCwordxDIO8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCwordxDIO8, 0:0:0);
    $width (negedge ADCwordxDIO8, 0:0:0);
  endspecify

endmodule

module ADCwordxDIO_7_ ( output PADDI, input PADDT, inout ADCwordxDIO7 );
  wire   GNDI;

  mjeiobuf \ADCwordxDIO_pad[7] ( .I(GNDI), .T(PADDT), .Z(PADDI), 
    .PAD(ADCwordxDIO7), .PADI(ADCwordxDIO7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDT => ADCwordxDIO7) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (ADCwordxDIO7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCwordxDIO7, 0:0:0);
    $width (negedge ADCwordxDIO7, 0:0:0);
  endspecify

endmodule

module ADCwordxDIO_6_ ( output PADDI, input PADDT, PADDO, inout ADCwordxDIO6 );

  mjeiobuf \ADCwordxDIO_pad[6] ( .I(PADDO), .T(PADDT), .Z(PADDI), 
    .PAD(ADCwordxDIO6), .PADI(ADCwordxDIO6));

  specify
    (PADDT => ADCwordxDIO6) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ADCwordxDIO6) = (0:0:0,0:0:0);
    (ADCwordxDIO6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCwordxDIO6, 0:0:0);
    $width (negedge ADCwordxDIO6, 0:0:0);
  endspecify

endmodule

module ADCwordxDIO_5_ ( output PADDI, input PADDT, PADDO, inout ADCwordxDIO5 );

  mjeiobuf \ADCwordxDIO_pad[5] ( .I(PADDO), .T(PADDT), .Z(PADDI), 
    .PAD(ADCwordxDIO5), .PADI(ADCwordxDIO5));

  specify
    (PADDT => ADCwordxDIO5) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => ADCwordxDIO5) = (0:0:0,0:0:0);
    (ADCwordxDIO5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCwordxDIO5, 0:0:0);
    $width (negedge ADCwordxDIO5, 0:0:0);
  endspecify

endmodule

module ADCwordxDIO_4_ ( output PADDI, input PADDT, inout ADCwordxDIO4 );
  wire   GNDI;

  mjeiobuf \ADCwordxDIO_pad[4] ( .I(GNDI), .T(PADDT), .Z(PADDI), 
    .PAD(ADCwordxDIO4), .PADI(ADCwordxDIO4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDT => ADCwordxDIO4) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (ADCwordxDIO4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCwordxDIO4, 0:0:0);
    $width (negedge ADCwordxDIO4, 0:0:0);
  endspecify

endmodule

module ADCwordxDIO_3_ ( output PADDI, input PADDT, inout ADCwordxDIO3 );
  wire   GNDI;

  mjeiobuf \ADCwordxDIO_pad[3] ( .I(GNDI), .T(PADDT), .Z(PADDI), 
    .PAD(ADCwordxDIO3), .PADI(ADCwordxDIO3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDT => ADCwordxDIO3) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (ADCwordxDIO3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCwordxDIO3, 0:0:0);
    $width (negedge ADCwordxDIO3, 0:0:0);
  endspecify

endmodule

module ADCwordxDIO_2_ ( output PADDI, input PADDT, inout ADCwordxDIO2 );
  wire   GNDI;

  mjeiobuf \ADCwordxDIO_pad[2] ( .I(GNDI), .T(PADDT), .Z(PADDI), 
    .PAD(ADCwordxDIO2), .PADI(ADCwordxDIO2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDT => ADCwordxDIO2) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (ADCwordxDIO2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge ADCwordxDIO2, 0:0:0);
    $width (negedge ADCwordxDIO2, 0:0:0);
  endspecify

endmodule

module ADCclockxCO ( input PADDO, output ADCclockxCO );

  mjeiobuf0173 ADCclockxCO_pad( .I(PADDO), .PAD(ADCclockxCO));

  specify
    (PADDO => ADCclockxCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module PE3xSI ( output PADDI, input PE3xSI );

  mjeiobuf0174 PE3xSI_pad( .Z(PADDI), .PAD(PE3xSI));

  specify
    (PE3xSI => PADDI) = (0:0:0,0:0:0);
    $width (posedge PE3xSI, 0:0:0);
    $width (negedge PE3xSI, 0:0:0);
  endspecify

endmodule

module PE2xSI ( output PADDI, input PE2xSI );

  mjeiobuf0179 PE2xSI_pad( .Z(PADDI), .PAD(PE2xSI));

  specify
    (PE2xSI => PADDI) = (0:0:0,0:0:0);
    $width (posedge PE2xSI, 0:0:0);
    $width (negedge PE2xSI, 0:0:0);
  endspecify

endmodule

module mjeiobuf0179 ( output Z, input PAD );

  IB INST1( .I(PAD), .O(Z));
endmodule

module PA7xSIO ( output PADDI, input PA7xSIO );

  mjeiobuf0174 PA7xSIO_pad( .Z(PADDI), .PAD(PA7xSIO));

  specify
    (PA7xSIO => PADDI) = (0:0:0,0:0:0);
    $width (posedge PA7xSIO, 0:0:0);
    $width (negedge PA7xSIO, 0:0:0);
  endspecify

endmodule

module PA3xSIO ( output PADDI, input PA3xSIO );

  mjeiobuf0174 PA3xSIO_pad( .Z(PADDI), .PAD(PA3xSIO));

  specify
    (PA3xSIO => PADDI) = (0:0:0,0:0:0);
    $width (posedge PA3xSIO, 0:0:0);
    $width (negedge PA3xSIO, 0:0:0);
  endspecify

endmodule

module PA1xSIO ( output PADDI, input PA1xSIO );

  mjeiobuf0174 PA1xSIO_pad( .Z(PADDI), .PAD(PA1xSIO));

  specify
    (PA1xSIO => PADDI) = (0:0:0,0:0:0);
    $width (posedge PA1xSIO, 0:0:0);
    $width (negedge PA1xSIO, 0:0:0);
  endspecify

endmodule

module PA0xSIO ( output PADDI, input PA0xSIO );

  mjeiobuf0174 PA0xSIO_pad( .Z(PADDI), .PAD(PA0xSIO));

  specify
    (PA0xSIO => PADDI) = (0:0:0,0:0:0);
    $width (posedge PA0xSIO, 0:0:0);
    $width (negedge PA0xSIO, 0:0:0);
  endspecify

endmodule

module PC3xSIO ( output PADDI, input PC3xSIO );

  mjeiobuf0174 PC3xSIO_pad( .Z(PADDI), .PAD(PC3xSIO));

  specify
    (PC3xSIO => PADDI) = (0:0:0,0:0:0);
    $width (posedge PC3xSIO, 0:0:0);
    $width (negedge PC3xSIO, 0:0:0);
  endspecify

endmodule

module PC2xSIO ( output PADDI, input PC2xSIO );

  mjeiobuf0174 PC2xSIO_pad( .Z(PADDI), .PAD(PC2xSIO));

  specify
    (PC2xSIO => PADDI) = (0:0:0,0:0:0);
    $width (posedge PC2xSIO, 0:0:0);
    $width (negedge PC2xSIO, 0:0:0);
  endspecify

endmodule

module PC1xSIO ( output PADDI, input PC1xSIO );

  mjeiobuf0174 PC1xSIO_pad( .Z(PADDI), .PAD(PC1xSIO));

  specify
    (PC1xSIO => PADDI) = (0:0:0,0:0:0);
    $width (posedge PC1xSIO, 0:0:0);
    $width (negedge PC1xSIO, 0:0:0);
  endspecify

endmodule

module PC0xSIO ( output PADDI, input PC0xSIO );

  mjeiobuf0174 PC0xSIO_pad( .Z(PADDI), .PAD(PC0xSIO));

  specify
    (PC0xSIO => PADDI) = (0:0:0,0:0:0);
    $width (posedge PC0xSIO, 0:0:0);
    $width (negedge PC0xSIO, 0:0:0);
  endspecify

endmodule

module SynchOutxSBO ( input PADDO, output SynchOutxSBO );

  mjeiobuf0173 SynchOutxSBO_pad( .I(PADDO), .PAD(SynchOutxSBO));

  specify
    (PADDO => SynchOutxSBO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Sync1xABI ( output PADDI, input Sync1xABI );

  mjeiobuf0174 Sync1xABI_pad( .Z(PADDI), .PAD(Sync1xABI));

  specify
    (Sync1xABI => PADDI) = (0:0:0,0:0:0);
    $width (posedge Sync1xABI, 0:0:0);
    $width (negedge Sync1xABI, 0:0:0);
  endspecify

endmodule

module ResetxRBI ( output PADDI, input ResetxRBI );

  mjeiobuf0175 ResetxRBI_pad( .Z(PADDI), .PAD(ResetxRBI));

  specify
    (ResetxRBI => PADDI) = (0:0:0,0:0:0);
    $width (posedge ResetxRBI, 0:0:0);
    $width (negedge ResetxRBI, 0:0:0);
  endspecify

endmodule

module IfClockxCI ( output PADDI, input IfClockxCI );

  mjeiobuf0174 IfClockxCI_pad( .Z(PADDI), .PAD(IfClockxCI));

  specify
    (IfClockxCI => PADDI) = (0:0:0,0:0:0);
    $width (posedge IfClockxCI, 0:0:0);
    $width (negedge IfClockxCI, 0:0:0);
  endspecify

endmodule

module FX2FifoAddressxDO_1_ ( input PADDO, output FX2FifoAddressxDO1 );
  wire   GNDI;

  mjeiobuf0180 \FX2FifoAddressxDO_pad[1] ( .I(PADDO), .T(GNDI), 
    .PAD(FX2FifoAddressxDO1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => FX2FifoAddressxDO1) = (0:0:0,0:0:0);
  endspecify

endmodule

module mjeiobuf0180 ( input I, T, output PAD );

  OBZPU INST5( .I(I), .T(T), .O(PAD));
endmodule

module FX2FifoAddressxDO_0_ ( output FX2FifoAddressxDO0 );
  wire   GNDI;

  mjeiobuf0181 \FX2FifoAddressxDO_pad[0] ( .I(GNDI), .T(GNDI), 
    .PAD(FX2FifoAddressxDO0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module mjeiobuf0181 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module FX2FifoPktEndxSBO ( input PADDO, output FX2FifoPktEndxSBO );
  wire   GNDI;

  mjeiobuf0180 FX2FifoPktEndxSBO_pad( .I(PADDO), .T(GNDI), 
    .PAD(FX2FifoPktEndxSBO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => FX2FifoPktEndxSBO) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoReadxEBO ( input PADDO, output FX2FifoReadxEBO );
  wire   GNDI;

  mjeiobuf0180 FX2FifoReadxEBO_pad( .I(PADDO), .T(GNDI), .PAD(FX2FifoReadxEBO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => FX2FifoReadxEBO) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoWritexEBO ( input PADDO, output FX2FifoWritexEBO );
  wire   GNDI;

  mjeiobuf0180 FX2FifoWritexEBO_pad( .I(PADDO), .T(GNDI), 
    .PAD(FX2FifoWritexEBO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => FX2FifoWritexEBO) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_15_ ( input PADDO, output FX2FifoDataxDIO15 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[15] ( .I(PADDO), .PAD(FX2FifoDataxDIO15));

  specify
    (PADDO => FX2FifoDataxDIO15) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_14_ ( input PADDO, output FX2FifoDataxDIO14 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[14] ( .I(PADDO), .PAD(FX2FifoDataxDIO14));

  specify
    (PADDO => FX2FifoDataxDIO14) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_13_ ( input PADDO, output FX2FifoDataxDIO13 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[13] ( .I(PADDO), .PAD(FX2FifoDataxDIO13));

  specify
    (PADDO => FX2FifoDataxDIO13) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_12_ ( input PADDO, output FX2FifoDataxDIO12 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[12] ( .I(PADDO), .PAD(FX2FifoDataxDIO12));

  specify
    (PADDO => FX2FifoDataxDIO12) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_11_ ( input PADDO, output FX2FifoDataxDIO11 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[11] ( .I(PADDO), .PAD(FX2FifoDataxDIO11));

  specify
    (PADDO => FX2FifoDataxDIO11) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_10_ ( input PADDO, output FX2FifoDataxDIO10 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[10] ( .I(PADDO), .PAD(FX2FifoDataxDIO10));

  specify
    (PADDO => FX2FifoDataxDIO10) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_9_ ( input PADDO, output FX2FifoDataxDIO9 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[9] ( .I(PADDO), .PAD(FX2FifoDataxDIO9));

  specify
    (PADDO => FX2FifoDataxDIO9) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_8_ ( input PADDO, output FX2FifoDataxDIO8 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[8] ( .I(PADDO), .PAD(FX2FifoDataxDIO8));

  specify
    (PADDO => FX2FifoDataxDIO8) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_7_ ( input PADDO, output FX2FifoDataxDIO7 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[7] ( .I(PADDO), .PAD(FX2FifoDataxDIO7));

  specify
    (PADDO => FX2FifoDataxDIO7) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_6_ ( input PADDO, output FX2FifoDataxDIO6 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[6] ( .I(PADDO), .PAD(FX2FifoDataxDIO6));

  specify
    (PADDO => FX2FifoDataxDIO6) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_5_ ( input PADDO, output FX2FifoDataxDIO5 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[5] ( .I(PADDO), .PAD(FX2FifoDataxDIO5));

  specify
    (PADDO => FX2FifoDataxDIO5) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_4_ ( input PADDO, output FX2FifoDataxDIO4 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[4] ( .I(PADDO), .PAD(FX2FifoDataxDIO4));

  specify
    (PADDO => FX2FifoDataxDIO4) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_3_ ( input PADDO, output FX2FifoDataxDIO3 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[3] ( .I(PADDO), .PAD(FX2FifoDataxDIO3));

  specify
    (PADDO => FX2FifoDataxDIO3) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_2_ ( input PADDO, output FX2FifoDataxDIO2 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[2] ( .I(PADDO), .PAD(FX2FifoDataxDIO2));

  specify
    (PADDO => FX2FifoDataxDIO2) = (0:0:0,0:0:0);
  endspecify

endmodule

module FX2FifoDataxDIO_1_ ( input PADDO, output FX2FifoDataxDIO1 );

  mjeiobuf0173 \FX2FifoDataxDIO_pad[1] ( .I(PADDO), .PAD(FX2FifoDataxDIO1));

  specify
    (PADDO => FX2FifoDataxDIO1) = (0:0:0,0:0:0);
  endspecify

endmodule

module uFifo_AERfifo_0_1 ( input DIA8, DIA7, DIA6, DIA5, DIA4, DIA3, DIA2, 
    DIA1, DIA0, CEA, CSA2, RSTA, CEB, CSB2, RSTB, CLKA, CLKB, MORCLKA, MORCLKB, 
    output DOB0, DOB1, DOB2, DOB3, DOB4, DOB5, DOB6, DOB7, DOB8, EF, FF );
  wire   GNDI, VCCI, RSTA_NOTIN, RSTB_NOTIN, DIA8_dly, CLKA_dly, DIA7_dly, 
         DIA6_dly, DIA5_dly, DIA4_dly, DIA3_dly, DIA2_dly, DIA1_dly, DIA0_dly, 
         CEA_dly, CSA2_dly, RSTA_dly, CEB_dly, CLKB_dly, CSB2_dly, RSTB_dly;

  FIFO8KA_B \uFifo/AERfifo_0_1_FIFO8KA ( .DI0(DIA0_dly), .DI1(DIA1_dly), 
    .DI2(DIA2_dly), .DI3(DIA3_dly), .DI4(DIA4_dly), .DI5(DIA5_dly), 
    .DI6(DIA6_dly), .DI7(DIA7_dly), .DI8(DIA8_dly), .DI9(GNDI), .DI10(GNDI), 
    .DI11(GNDI), .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), 
    .DI16(GNDI), .DI17(GNDI), .DI18(GNDI), .DI19(GNDI), .DI20(GNDI), 
    .DI21(GNDI), .DI22(GNDI), .DI23(GNDI), .DI24(GNDI), .DI25(GNDI), 
    .DI26(GNDI), .DI27(GNDI), .DI28(GNDI), .DI29(GNDI), .DI30(GNDI), 
    .DI31(GNDI), .DI32(GNDI), .DI33(GNDI), .DI34(GNDI), .DI35(GNDI), 
    .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), .CSR0(VCCI), 
    .CSR1(VCCI), .WE(CEA_dly), .RE(CEB_dly), .CLKW(CLKA_dly), .CLKR(CLKB_dly), 
    .RST(RSTA_NOTIN), .RPRST(RSTB_NOTIN), .DO0(DOB0), .DO1(DOB1), .DO2(DOB2), 
    .DO3(DOB3), .DO4(DOB4), .DO5(DOB5), .DO6(DOB6), .DO7(DOB7), .DO8(DOB8), 
    .DO9(), .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), 
    .DO17(), .DO18(), .DO19(), .DO20(), .DO21(), .DO22(), .DO23(), .DO24(), 
    .DO25(), .DO26(), .DO27(), .DO28(), .DO29(), .DO30(), .DO31(), .DO32(), 
    .DO33(), .DO34(), .DO35(), .EF(EF), .AEF(), .AFF(), .FF(FF));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter RSTA_INVERTERIN( .I(RSTA_dly), .Z(RSTA_NOTIN));
  inverter RSTB_INVERTERIN( .I(RSTB_dly), .Z(RSTB_NOTIN));

  specify
    (RSTA => FF) = (0:0:0,0:0:0);
    (RSTB => DOB0) = (0:0:0,0:0:0);
    (RSTB => DOB1) = (0:0:0,0:0:0);
    (RSTB => DOB2) = (0:0:0,0:0:0);
    (RSTB => DOB3) = (0:0:0,0:0:0);
    (RSTB => DOB4) = (0:0:0,0:0:0);
    (RSTB => DOB5) = (0:0:0,0:0:0);
    (RSTB => DOB6) = (0:0:0,0:0:0);
    (RSTB => DOB7) = (0:0:0,0:0:0);
    (RSTB => DOB8) = (0:0:0,0:0:0);
    (RSTB => EF) = (0:0:0,0:0:0);
    (CLKA => FF) = (0:0:0,0:0:0);
    (CLKB => DOB0) = (0:0:0,0:0:0);
    (CLKB => DOB1) = (0:0:0,0:0:0);
    (CLKB => DOB2) = (0:0:0,0:0:0);
    (CLKB => DOB3) = (0:0:0,0:0:0);
    (CLKB => DOB4) = (0:0:0,0:0:0);
    (CLKB => DOB5) = (0:0:0,0:0:0);
    (CLKB => DOB6) = (0:0:0,0:0:0);
    (CLKB => DOB7) = (0:0:0,0:0:0);
    (CLKB => DOB8) = (0:0:0,0:0:0);
    (CLKB => EF) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA8, 0:0:0, 0:0:0,,,, CLKA_dly, DIA8_dly);
    $setuphold (posedge CLKA, DIA7, 0:0:0, 0:0:0,,,, CLKA_dly, DIA7_dly);
    $setuphold (posedge CLKA, DIA6, 0:0:0, 0:0:0,,,, CLKA_dly, DIA6_dly);
    $setuphold (posedge CLKA, DIA5, 0:0:0, 0:0:0,,,, CLKA_dly, DIA5_dly);
    $setuphold (posedge CLKA, DIA4, 0:0:0, 0:0:0,,,, CLKA_dly, DIA4_dly);
    $setuphold (posedge CLKA, DIA3, 0:0:0, 0:0:0,,,, CLKA_dly, DIA3_dly);
    $setuphold (posedge CLKA, DIA2, 0:0:0, 0:0:0,,,, CLKA_dly, DIA2_dly);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, DIA0, 0:0:0, 0:0:0,,,, CLKA_dly, DIA0_dly);
    $setuphold (posedge CLKA, CEA, 0:0:0, 0:0:0,,,, CLKA_dly, CEA_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKA, RSTA, 0:0:0, 0:0:0,,,, CLKA_dly, RSTA_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, RSTB, 0:0:0, 0:0:0,,,, CLKB_dly, RSTB_dly);
    $width (posedge RSTA, 0:0:0);
    $width (negedge RSTA, 0:0:0);
    $width (posedge RSTB, 0:0:0);
    $width (negedge RSTB, 0:0:0);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KA_B ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, DI18, DI19, DI20, DI21, 
    DI22, DI23, DI24, DI25, DI26, DI27, DI28, DI29, DI30, DI31, DI32, DI33, 
    DI34, DI35, FULLI, CSW0, CSW1, EMPTYI, CSR0, CSR1, WE, RE, CLKW, CLKR, RST, 
    RPRST, output DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, 
    DO12, DO13, DO14, DO15, DO16, DO17, DO18, DO19, DO20, DO21, DO22, DO23, 
    DO24, DO25, DO26, DO27, DO28, DO29, DO30, DO31, DO32, DO33, DO34, DO35, EF, 
    AEF, AFF, FF );

  FIFO8KA INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .DI18(DI18), .DI19(DI19), .DI20(DI20), 
    .DI21(DI21), .DI22(DI22), .DI23(DI23), .DI24(DI24), .DI25(DI25), 
    .DI26(DI26), .DI27(DI27), .DI28(DI28), .DI29(DI29), .DI30(DI30), 
    .DI31(DI31), .DI32(DI32), .DI33(DI33), .DI34(DI34), .DI35(DI35), 
    .FULLI(FULLI), .CSW0(CSW0), .CSW1(CSW1), .EMPTYI(EMPTYI), .CSR0(CSR0), 
    .CSR1(CSR1), .WE(WE), .RE(RE), .CLKW(CLKW), .CLKR(CLKR), .RST(RST), 
    .RPRST(RPRST), .DO0(DO0), .DO1(DO1), .DO2(DO2), .DO3(DO3), .DO4(DO4), 
    .DO5(DO5), .DO6(DO6), .DO7(DO7), .DO8(DO8), .DO9(DO9), .DO10(DO10), 
    .DO11(DO11), .DO12(DO12), .DO13(DO13), .DO14(DO14), .DO15(DO15), 
    .DO16(DO16), .DO17(DO17), .DO18(DO18), .DO19(DO19), .DO20(DO20), 
    .DO21(DO21), .DO22(DO22), .DO23(DO23), .DO24(DO24), .DO25(DO25), 
    .DO26(DO26), .DO27(DO27), .DO28(DO28), .DO29(DO29), .DO30(DO30), 
    .DO31(DO31), .DO32(DO32), .DO33(DO33), .DO34(DO34), .DO35(DO35), .EF(EF), 
    .AEF(AEF), .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = 14'b00000001010111;
  defparam INST10.AEPOINTER1 = 14'b00000001011111;
  defparam INST10.AFPOINTER = 14'b00011111011001;
  defparam INST10.AFPOINTER1 = 14'b00011111010001;
  defparam INST10.CSDECODE_R = 2'b11;
  defparam INST10.CSDECODE_W = 2'b11;
  defparam INST10.DATA_WIDTH_R = 9;
  defparam INST10.DATA_WIDTH_W = 9;
  defparam INST10.FULLPOINTER = 14'b01111111111001;
  defparam INST10.FULLPOINTER1 = 14'b01111111110001;
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module uFifo_AERfifo_1_0 ( input DIA6, DIA5, DIA4, DIA3, DIA2, DIA1, DIA0, CEA, 
    CSA2, RSTA, CEB, CSB2, RSTB, CLKA, CLKB, MORCLKA, MORCLKB, output DOB0, 
    DOB1, DOB2, DOB3, DOB4, DOB5, DOB6 );
  wire   GNDI, VCCI, RSTA_NOTIN, RSTB_NOTIN, DIA6_dly, CLKA_dly, DIA5_dly, 
         DIA4_dly, DIA3_dly, DIA2_dly, DIA1_dly, DIA0_dly, CEA_dly, CSA2_dly, 
         RSTA_dly, CEB_dly, CLKB_dly, CSB2_dly, RSTB_dly;

  FIFO8KA0182 \uFifo/AERfifo_1_0_FIFO8KA ( .DI0(DIA0_dly), .DI1(DIA1_dly), 
    .DI2(DIA2_dly), .DI3(DIA3_dly), .DI4(DIA4_dly), .DI5(DIA5_dly), 
    .DI6(DIA6_dly), .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), 
    .DI11(GNDI), .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), 
    .DI16(GNDI), .DI17(GNDI), .DI18(GNDI), .DI19(GNDI), .DI20(GNDI), 
    .DI21(GNDI), .DI22(GNDI), .DI23(GNDI), .DI24(GNDI), .DI25(GNDI), 
    .DI26(GNDI), .DI27(GNDI), .DI28(GNDI), .DI29(GNDI), .DI30(GNDI), 
    .DI31(GNDI), .DI32(GNDI), .DI33(GNDI), .DI34(GNDI), .DI35(GNDI), 
    .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), .CSR0(VCCI), 
    .CSR1(VCCI), .WE(CEA_dly), .RE(CEB_dly), .CLKW(CLKA_dly), .CLKR(CLKB_dly), 
    .RST(RSTA_NOTIN), .RPRST(RSTB_NOTIN), .DO0(DOB0), .DO1(DOB1), .DO2(DOB2), 
    .DO3(DOB3), .DO4(DOB4), .DO5(DOB5), .DO6(DOB6), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .DO18(), .DO19(), .DO20(), .DO21(), .DO22(), .DO23(), .DO24(), .DO25(), 
    .DO26(), .DO27(), .DO28(), .DO29(), .DO30(), .DO31(), .DO32(), .DO33(), 
    .DO34(), .DO35(), .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter RSTA_INVERTERIN( .I(RSTA_dly), .Z(RSTA_NOTIN));
  inverter RSTB_INVERTERIN( .I(RSTB_dly), .Z(RSTB_NOTIN));

  specify
    (RSTB => DOB0) = (0:0:0,0:0:0);
    (RSTB => DOB1) = (0:0:0,0:0:0);
    (RSTB => DOB2) = (0:0:0,0:0:0);
    (RSTB => DOB3) = (0:0:0,0:0:0);
    (RSTB => DOB4) = (0:0:0,0:0:0);
    (RSTB => DOB5) = (0:0:0,0:0:0);
    (RSTB => DOB6) = (0:0:0,0:0:0);
    (CLKB => DOB0) = (0:0:0,0:0:0);
    (CLKB => DOB1) = (0:0:0,0:0:0);
    (CLKB => DOB2) = (0:0:0,0:0:0);
    (CLKB => DOB3) = (0:0:0,0:0:0);
    (CLKB => DOB4) = (0:0:0,0:0:0);
    (CLKB => DOB5) = (0:0:0,0:0:0);
    (CLKB => DOB6) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA6, 0:0:0, 0:0:0,,,, CLKA_dly, DIA6_dly);
    $setuphold (posedge CLKA, DIA5, 0:0:0, 0:0:0,,,, CLKA_dly, DIA5_dly);
    $setuphold (posedge CLKA, DIA4, 0:0:0, 0:0:0,,,, CLKA_dly, DIA4_dly);
    $setuphold (posedge CLKA, DIA3, 0:0:0, 0:0:0,,,, CLKA_dly, DIA3_dly);
    $setuphold (posedge CLKA, DIA2, 0:0:0, 0:0:0,,,, CLKA_dly, DIA2_dly);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, DIA0, 0:0:0, 0:0:0,,,, CLKA_dly, DIA0_dly);
    $setuphold (posedge CLKA, CEA, 0:0:0, 0:0:0,,,, CLKA_dly, CEA_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKA, RSTA, 0:0:0, 0:0:0,,,, CLKA_dly, RSTA_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, RSTB, 0:0:0, 0:0:0,,,, CLKB_dly, RSTB_dly);
    $width (posedge RSTA, 0:0:0);
    $width (negedge RSTA, 0:0:0);
    $width (posedge RSTB, 0:0:0);
    $width (negedge RSTB, 0:0:0);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KA0182 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, DI18, DI19, DI20, DI21, 
    DI22, DI23, DI24, DI25, DI26, DI27, DI28, DI29, DI30, DI31, DI32, DI33, 
    DI34, DI35, FULLI, CSW0, CSW1, EMPTYI, CSR0, CSR1, WE, RE, CLKW, CLKR, RST, 
    RPRST, output DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, 
    DO12, DO13, DO14, DO15, DO16, DO17, DO18, DO19, DO20, DO21, DO22, DO23, 
    DO24, DO25, DO26, DO27, DO28, DO29, DO30, DO31, DO32, DO33, DO34, DO35, EF, 
    AEF, AFF, FF );

  FIFO8KA INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .DI18(DI18), .DI19(DI19), .DI20(DI20), 
    .DI21(DI21), .DI22(DI22), .DI23(DI23), .DI24(DI24), .DI25(DI25), 
    .DI26(DI26), .DI27(DI27), .DI28(DI28), .DI29(DI29), .DI30(DI30), 
    .DI31(DI31), .DI32(DI32), .DI33(DI33), .DI34(DI34), .DI35(DI35), 
    .FULLI(FULLI), .CSW0(CSW0), .CSW1(CSW1), .EMPTYI(EMPTYI), .CSR0(CSR0), 
    .CSR1(CSR1), .WE(WE), .RE(RE), .CLKW(CLKW), .CLKR(CLKR), .RST(RST), 
    .RPRST(RPRST), .DO0(DO0), .DO1(DO1), .DO2(DO2), .DO3(DO3), .DO4(DO4), 
    .DO5(DO5), .DO6(DO6), .DO7(DO7), .DO8(DO8), .DO9(DO9), .DO10(DO10), 
    .DO11(DO11), .DO12(DO12), .DO13(DO13), .DO14(DO14), .DO15(DO15), 
    .DO16(DO16), .DO17(DO17), .DO18(DO18), .DO19(DO19), .DO20(DO20), 
    .DO21(DO21), .DO22(DO22), .DO23(DO23), .DO24(DO24), .DO25(DO25), 
    .DO26(DO26), .DO27(DO27), .DO28(DO28), .DO29(DO29), .DO30(DO30), 
    .DO31(DO31), .DO32(DO32), .DO33(DO33), .DO34(DO34), .DO35(DO35), .EF(EF), 
    .AEF(AEF), .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = 14'b11111111111111;
  defparam INST10.AEPOINTER1 = 14'b00000000000000;
  defparam INST10.AFPOINTER = 14'b11111111111111;
  defparam INST10.AFPOINTER1 = 14'b00000000000000;
  defparam INST10.CSDECODE_R = 2'b11;
  defparam INST10.CSDECODE_W = 2'b11;
  defparam INST10.DATA_WIDTH_R = 9;
  defparam INST10.DATA_WIDTH_W = 9;
  defparam INST10.FULLPOINTER = 14'b11111111111111;
  defparam INST10.FULLPOINTER1 = 14'b00000000000000;
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module uClockGen_PLLCInst_0 ( input CLKI, CLKFB, CNTRST, output CLKOP );
  wire   GNDI;

  EHXPLLC_B \uClockGen/PLLCInst_0_EHXPLLC ( .CLKI(CLKI), .CLKFB(CLKFB), 
    .RST(CNTRST), .DDAMODE(GNDI), .DDAIZR(GNDI), .DDAILAG(GNDI), 
    .DDAIDEL0(GNDI), .DDAIDEL1(GNDI), .DDAIDEL2(GNDI), .CLKOP(CLKOP), .CLKOK(), 
    .CLKOS(), .CLKINTFB(), .LOCK());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLKI => CLKOP) = (0:0:0,0:0:0);
    (CLKFB => CLKOP) = (0:0:0,0:0:0);
  endspecify

endmodule

module EHXPLLC_B ( input CLKI, CLKFB, RST, DDAMODE, DDAIZR, DDAILAG, DDAIDEL0, 
    DDAIDEL1, DDAIDEL2, output CLKOP, CLKOK, CLKOS, CLKINTFB, LOCK );

  EHXPLLC INST10( .RST(RST), .CLKI(CLKI), .CLKFB(CLKFB), .DDAMODE(DDAMODE), 
    .DDAIZR(DDAIZR), .DDAILAG(DDAILAG), .DDAIDEL0(DDAIDEL0), 
    .DDAIDEL1(DDAIDEL1), .DDAIDEL2(DDAIDEL2), .CLKOP(CLKOP), .CLKOK(CLKOK), 
    .CLKOS(CLKOS), .LOCK(LOCK), .CLKINTFB(CLKINTFB));
  defparam INST10.CLKFB_DIV = 3;
  defparam INST10.CLKI_DIV = 1;
  defparam INST10.CLKOK_DIV = 2;
  defparam INST10.CLKOP_DIV = 8;
  defparam INST10.DELAY_CNTL = "STATIC";
  defparam INST10.DUTY = 4;
  defparam INST10.FDEL = 0;
  defparam INST10.FIN = "30.000000";
  defparam INST10.PHASEADJ = 0;
  defparam INST10.WAKE_ON_LOCK = "OFF";
endmodule

module GSR_INST ( input GSRNET );

  GSRJMODE GSR_INST_GSRMODE( .GSR(GSRNET));
endmodule

module GSRJMODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
