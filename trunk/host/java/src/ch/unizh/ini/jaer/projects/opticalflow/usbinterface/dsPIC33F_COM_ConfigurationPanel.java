/*
Copyright June 13, 2011 Andreas Steiner, Inst. of Neuroinformatics, UNI-ETH Zurich
*/

package ch.unizh.ini.jaer.projects.opticalflow.usbinterface;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import net.sf.jaer.hardwareinterface.HardwareInterfaceException;

/**
 *
 * this class is used by the <code>dsPIC33F_COM_OpticalFlowHardwareInterface</code> to
 * communicate important settings and show some diagnostic info via the GUI
 * <br /><br />
 * 
 * a variety of settings specific to this hardware interface (such as the delay
 * between two frames) as well as some handy shortcuts to already existing
 * configuration (such as the power-up and power-down of the on-chip bias-generator)
 * can be controlled via this interface
 * <br /><br />
 * 
 * at the same time, the controls serve as status indicators of the firmware's
 * current settings; this class also incorporates some buttons for recording
 * data from the interface...
 * 
 * @author andstein
 * @see dsPIC33F_COM_OpticalFlowHardwareInterface
 */
public class dsPIC33F_COM_ConfigurationPanel extends javax.swing.JPanel {

    private dsPIC33F_COM_OpticalFlowHardwareInterface hardwareInterface;
    private dsPIC33F_COM_CommandLineWindow commandLineWindow;
    private String lastAnalyseName= "";
    private boolean initializing;

    /** Creates new form dsPIC33F_COM_ConfigurationPanel */
    public dsPIC33F_COM_ConfigurationPanel(dsPIC33F_COM_OpticalFlowHardwareInterface hardwareInterface) {
        initializing= true;
        this.hardwareInterface= hardwareInterface;
        
        initComponents();
        
        commandLineWindow= new dsPIC33F_COM_CommandLineWindow(hardwareInterface);

        comCombo.removeAllItems();
        comCombo.addItem("");
        for(String portName : hardwareInterface.getAvailablePortNames())
            comCombo.addItem(portName);

        delaysCB.setSelectedItem( Integer.toString(hardwareInterface.getDelay1Ms()) ); // assume symmetric delays
        onChipBiasCB.setSelected( hardwareInterface.isOnChipBiases() );
        comCombo.setSelectedItem( hardwareInterface.getPortName() );
        debuggingCB.setSelected( hardwareInterface.isDebugging() );
        
        initializing= false;
    }

    public void setStatus(String status) {
        statusText.setText(status);
    }

    public void setStreaming(boolean b) {
        streamingCB.setSelected(b);
    }
    
    public void setOnChipBias(boolean b) {
        onChipBiasCB.setSelected(b);
    }
    
    public void answerReceived(final String cmd,String answer)
    {
        final String str= answer.replace(";", "\n\t"); // 'format'
        
        Runnable doUpdate= new Runnable() {
            @Override
            public void run() {
                if (commandLineWindow.isValid())
                    commandLineWindow.logString("("+cmd+") > " + str);
            }
        };
        SwingUtilities.invokeLater(doUpdate);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comCombo = new javax.swing.JComboBox();
        statusText = new javax.swing.JTextField();
        onChipBiasCB = new javax.swing.JCheckBox();
        streamingCB = new javax.swing.JCheckBox();
        resetButton = new javax.swing.JButton();
        showCmdLineButton = new javax.swing.JButton();
        analysisPanel = new javax.swing.JPanel();
        frameSaveRateCB = new javax.swing.JComboBox();
        analyseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        delaysCB = new javax.swing.JComboBox();
        debuggingCB = new javax.swing.JCheckBox();
        fpnButton = new javax.swing.JButton();

        jLabel1.setText("port to use");

        comCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "COM10", "COM11", "COM12" }));
        comCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comComboActionPerformed(evt);
            }
        });

        statusText.setEditable(false);
        statusText.setFont(new java.awt.Font("Monospaced", 0, 11));
        statusText.setText("(status)");

        onChipBiasCB.setSelected(true);
        onChipBiasCB.setText("on chip biases");
        onChipBiasCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onChipBiasCBActionPerformed(evt);
            }
        });

        streamingCB.setText("streaming");
        streamingCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streamingCBActionPerformed(evt);
            }
        });

        resetButton.setText("reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        showCmdLineButton.setText("cmds");
        showCmdLineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCmdLineButtonActionPerformed(evt);
            }
        });

        analysisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("global flow analysis"));

        frameSaveRateCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "50", "2" }));
        frameSaveRateCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frameSaveRateCBActionPerformed(evt);
            }
        });

        analyseButton.setText("start");
        analyseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyseButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("store frame data : 2/");

        javax.swing.GroupLayout analysisPanelLayout = new javax.swing.GroupLayout(analysisPanel);
        analysisPanel.setLayout(analysisPanelLayout);
        analysisPanelLayout.setHorizontalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPanelLayout.createSequentialGroup()
                .addComponent(analyseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frameSaveRateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        analysisPanelLayout.setVerticalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(analyseButton)
                .addComponent(jLabel2)
                .addComponent(frameSaveRateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel3.setText("delays [ms]");

        delaysCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "15", "20", "30", "40" }));
        delaysCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delaysCBActionPerformed(evt);
            }
        });

        debuggingCB.setText("dbg");
        debuggingCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debuggingCBActionPerformed(evt);
            }
        });

        fpnButton.setText("FPN");
        fpnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statusText, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(resetButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showCmdLineButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(debuggingCB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fpnButton, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                .addGap(111, 111, 111)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delaysCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(onChipBiasCB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(streamingCB)))
                        .addContainerGap())
                    .addComponent(analysisPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(streamingCB)
                    .addComponent(onChipBiasCB)
                    .addComponent(resetButton)
                    .addComponent(showCmdLineButton)
                    .addComponent(jLabel3)
                    .addComponent(delaysCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(debuggingCB)
                    .addComponent(fpnButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analysisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        comCombo.getAccessibleContext().setAccessibleDescription("select the port to which the MDC2Dv2 is connected");
        statusText.getAccessibleContext().setAccessibleDescription("indicates the status of the board");
        onChipBiasCB.getAccessibleContext().setAccessibleDescription("switches between external DAC and on-chip bias generator -- be sure to DISCONNECT the jumpers before selecting");
        streamingCB.getAccessibleContext().setAccessibleDescription("starts/stops the actual transmission of frame data");
        resetButton.getAccessibleContext().setAccessibleDescription("re-initialize the device -- click after reset of the microcontroller");
    }// </editor-fold>//GEN-END:initComponents

    private void comComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comComboActionPerformed
        if (initializing)
            return;
        
        String portName= (String) comCombo.getSelectedItem();

        if (portName == null)
            return;

        try {
            if (portName.length() == 0)
                hardwareInterface.setPortName(null);
            else
                hardwareInterface.setPortName(portName);
        } catch (HardwareInterfaceException ex) {
            Logger.getLogger(dsPIC33F_COM_ConfigurationPanel.class.getName())
                    .warning("could not set portname : " + ex);
        }

    }//GEN-LAST:event_comComboActionPerformed

    /**
     * toggles streaming (i.e. stops streaming data if was streaming before
     * and vice versa)
     */
    public void toggleStreaming() {
        streamingCB.setSelected(!streamingCB.isSelected());
        streamingCBActionPerformed(null);
    }
    
    private void streamingCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streamingCBActionPerformed
        if (streamingCB.isSelected())
            hardwareInterface.startStreaming();
        else
            hardwareInterface.stopStreaming();
    }//GEN-LAST:event_streamingCBActionPerformed

    private void onChipBiasCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onChipBiasCBActionPerformed
        try {
            hardwareInterface.getChip().getBiasgen().setPowerDown(!onChipBiasCB.isSelected());
        } catch (HardwareInterfaceException ex) {
            Logger.getLogger(dsPIC33F_COM_ConfigurationPanel.class.getName()).log(Level.WARNING, null, ex);
        }
    }//GEN-LAST:event_onChipBiasCBActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        try {
            hardwareInterface.doReset();
        } catch (HardwareInterfaceException ex) {
            Logger.getLogger(dsPIC33F_COM_ConfigurationPanel.class.getName()).warning("could not reset interface : " + ex);
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    private void analyseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyseButtonActionPerformed
        if (hardwareInterface.isAnalysing()) {
            hardwareInterface.stopAnalysis();
            analyseButton.setText("analyse");
        } else {
            String name = (String) JOptionPane.showInputDialog(this, "name of analysis", lastAnalyseName);
            if (name==null)
                return;
            hardwareInterface.startAnalysis(name,Integer.parseInt((String) frameSaveRateCB.getSelectedItem()));
            analyseButton.setText("stop");
            lastAnalyseName= name;
        }
    }//GEN-LAST:event_analyseButtonActionPerformed

    private void showCmdLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCmdLineButtonActionPerformed
        commandLineWindow.setVisible(true);
    }//GEN-LAST:event_showCmdLineButtonActionPerformed

    private void frameSaveRateCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frameSaveRateCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_frameSaveRateCBActionPerformed

    private void delaysCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delaysCBActionPerformed
        int ms= Integer.parseInt((String) delaysCB.getSelectedItem());
        
        if (ms < 10)
            delaysCB.setSelectedIndex(0);
        ms= Integer.parseInt((String) delaysCB.getSelectedItem());
        
        hardwareInterface.setDelayMs(ms);                
    }//GEN-LAST:event_delaysCBActionPerformed

    private void debuggingCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debuggingCBActionPerformed
        hardwareInterface.setDebugging(debuggingCB.isSelected());
    }//GEN-LAST:event_debuggingCBActionPerformed

    private void fpnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpnButtonActionPerformed
        hardwareInterface.setFPN();
    }//GEN-LAST:event_fpnButtonActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyseButton;
    private javax.swing.JPanel analysisPanel;
    private javax.swing.JComboBox comCombo;
    private javax.swing.JCheckBox debuggingCB;
    private javax.swing.JComboBox delaysCB;
    private javax.swing.JButton fpnButton;
    private javax.swing.JComboBox frameSaveRateCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JCheckBox onChipBiasCB;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton showCmdLineButton;
    private javax.swing.JTextField statusText;
    private javax.swing.JCheckBox streamingCB;
    // End of variables declaration//GEN-END:variables

}
