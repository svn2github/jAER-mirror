/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CochleaAMS1cRollingCochleagramADCDisplayMethodGainGUI.java
 *
 * Created on Sep 21, 2011, 9:48:47 AM
 */
package ch.unizh.ini.jaer.chip.cochlea;

import java.awt.Color;
import javax.swing.border.TitledBorder;

/**
 *  Gain and offset control for trace plotting
 * @author tobi
 */
public class CochleaAMS1cRollingCochleagramADCDisplayMethodGainGUI extends javax.swing.JPanel {

    private CochleaAMS1cRollingCochleagramADCDisplayMethod gui;
    int chan;
    Color[] colors={Color.red,Color.green,Color.blue, Color.yellow};

    /** Creates new form CochleaAMS1cRollingCochleagramADCDisplayMethodGainGUI */
    public CochleaAMS1cRollingCochleagramADCDisplayMethodGainGUI(CochleaAMS1cRollingCochleagramADCDisplayMethod gui, int chan) {
        this.gui = gui;
        this.chan = chan;
        initComponents();
        TitledBorder border=javax.swing.BorderFactory.createTitledBorder("Chan" + chan);
        border.setTitleColor(colors[chan]);
        setBorder(border);
        gainSp.setValue(getGain(chan));
        offsetSp.setValue(getOffset(chan));
    }

    final void setOffset(int chan, int offset) {
        getGui().setOffset(chan, offset);
    }

    final void setGain(int chan, int gain) {
        getGui().setGain(chan, gain);
    }

    final int getOffset(int chan) {
        return getGui().getOffset(chan);
    }

    final int getGain(int chan) {
        return getGui().getGain(chan);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gainSp = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        offsetSp = new javax.swing.JSpinner();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Chan"));

        gainSp.setToolTipText("ADC values are multipled by this factor after offset is added");
        gainSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gainSpStateChanged(evt);
            }
        });

        jLabel1.setText("gain");

        jLabel2.setText("offset");

        offsetSp.setToolTipText("ADC samples are offset by this value by adding it, and then multipled by gain value");
        offsetSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                offsetSpStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(offsetSp, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(gainSp)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gainSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(offsetSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void gainSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gainSpStateChanged
        try {
            int i = (Integer) gainSp.getValue();
            setGain(chan, i);
            gainSp.setForeground(Color.black);
        } catch (Exception e) {
            gainSp.setValue(getGain(chan));
            gainSp.setForeground(Color.red);
        }
    }//GEN-LAST:event_gainSpStateChanged

    private void offsetSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_offsetSpStateChanged
     try {
            int i = (Integer) offsetSp.getValue();
            setOffset(chan, i);
            offsetSp.setForeground(Color.black);
        } catch (Exception e) {
            offsetSp.setValue(getOffset(chan));
            offsetSp.setForeground(Color.red);
        } 
    }//GEN-LAST:event_offsetSpStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner gainSp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSpinner offsetSp;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the gui
     */
    public CochleaAMS1cRollingCochleagramADCDisplayMethod getGui() {
        return gui;
    }

    /**
     * @param gui the gui to set
     */
    public void setGui(CochleaAMS1cRollingCochleagramADCDisplayMethod gui) {
        this.gui = gui;
    }
}
