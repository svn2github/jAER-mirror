/*
 * Shooter.java
 * (A hack of ServoTest.java)
 *
 * Created on July 9, 2007
 */

package ch.unizh.ini.caviar.hardwareinterface.usb;

import ch.unizh.ini.caviar.hardwareinterface.*;
import ch.unizh.ini.caviar.hardwareinterface.HardwareInterfaceException;
import ch.unizh.ini.tobi.rccar.SiLabsC8051F320_USBIO_CarServoController;
import de.thesycon.usbio.*;
import de.thesycon.usbio.PnPNotify;
import de.thesycon.usbio.PnPNotifyInterface;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.event.*;

/**
 * The telluride basketball shooter robot class (can be run on its own as a GUI)
 * @author  ross
 */
public class Shooter extends javax.swing.JFrame implements PnPNotifyInterface
{
    final int MAX_SLIDER=1000;
    static Logger log=Logger.getLogger("Shooter");
    private float stopVal = (float) 1.0;
    private float startVal = (float) 0.0;
    private float aimVal = (float) 0.5;
    private int delay = 100; // the delay in ms for using with setServoSlow()
    
    ServoInterface hwInterface=null;
    float[] servoValues;
    PnPNotify pnp=null;
    
    /**
     * Creates new form Shooter
     */
    public Shooter()
    {
        initComponents();
        try
        {
            System.loadLibrary("USBIOJAVA");
            pnp=new PnPNotify(this);
            pnp.enablePnPNotification(SiLabsC8051F320_USBIO_ServoController.GUID);
            pnp.enablePnPNotification(SiLabsC8051F320_USBIO_ServoController.GUID);
        }
        catch(java.lang.UnsatisfiedLinkError e)
        {
            log.warning("USBIOJAVA library not available, probably because you are not running under Windows, continuing anyhow");
        }
        
        try
        {
            hwInterface=new SiLabsC8051F320_USBIO_ServoController();
            hwInterface.open();
            servoValues=new float[hwInterface.getNumServos()];
            setTitle("ServoController");
        }
        catch(HardwareInterfaceException e)
        {
            e.printStackTrace();
        }
        
//        int navailable=SiLabsC8051F320Factory.instance().getNumInterfacesAvailable();
//        if(navailable==0){
//            System.err.println("no interfaces available");
//            System.exit(1);
//        }
        
    }
     public Shooter(boolean noGUI)
    {
        if(!noGUI)
         initComponents();
        try
        {
            System.loadLibrary("USBIOJAVA");
            pnp=new PnPNotify(this);
            pnp.enablePnPNotification(SiLabsC8051F320_USBIO_ServoController.GUID);
            pnp.enablePnPNotification(SiLabsC8051F320_USBIO_ServoController.GUID);
        }
        catch(java.lang.UnsatisfiedLinkError e)
        {
            log.warning("USBIOJAVA library not available, probably because you are not running under Windows, continuing anyhow");
        }
        
//        int navailable=SiLabsC8051F320Factory.instance().getNumInterfacesAvailable();
//        if(navailable==0){
//            System.err.println("no interfaces available");
//            System.exit(1);
//        }
        
    }
     public boolean initServo()
     {
       boolean success=false;
         try
                    {
                        hwInterface=new SiLabsC8051F320_USBIO_ServoController();
                        hwInterface.open();
                        servoValues=new float[hwInterface.getNumServos()];
                        //setTitle("ServoController");
                        success=true; 
                        sendShooterServoVals();
                        log.info("Servo init called");
                    }
                    catch(HardwareInterfaceException e)
                    {
                        e.printStackTrace();
                    }
       return success;
     }
    /** Constructs a new controller panel using existing hardware interface
     * @param hw the interface
     */
    public Shooter(ServoInterface hw)
    {
        this();
        hwInterface=hw;
        String s=hw.getClass().getSimpleName();
        setTitle(s);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jButton1 = new javax.swing.JButton();
        servo0Panel = new javax.swing.JPanel();
        aimServo = new javax.swing.JSlider();
        servo1Panel = new javax.swing.JPanel();
        throwServoStart = new javax.swing.JSlider();
        throwServoStop = new javax.swing.JSlider();
        shootButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ServoTest");
        servo0Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Aim"));
        aimServo.setMaximum(1000);
        aimServo.setMinorTickSpacing(10);
        aimServo.setValue(500);
        aimServo.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                aimServoStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout servo0PanelLayout = new org.jdesktop.layout.GroupLayout(servo0Panel);
        servo0Panel.setLayout(servo0PanelLayout);
        servo0PanelLayout.setHorizontalGroup(
            servo0PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(servo0PanelLayout.createSequentialGroup()
                .add(aimServo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        servo0PanelLayout.setVerticalGroup(
            servo0PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(servo0PanelLayout.createSequentialGroup()
                .add(aimServo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(31, 31, 31))
        );

        servo1Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Throw"));
        throwServoStart.setMaximum(1000);
        throwServoStart.setMinorTickSpacing(10);
        throwServoStart.setValue(500);
        throwServoStart.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                throwServoStartStateChanged(evt);
            }
        });

        throwServoStop.setMaximum(1000);
        throwServoStop.setMinorTickSpacing(10);
        throwServoStop.setValue(500);
        throwServoStop.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                throwServoStopStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout servo1PanelLayout = new org.jdesktop.layout.GroupLayout(servo1Panel);
        servo1Panel.setLayout(servo1PanelLayout);
        servo1PanelLayout.setHorizontalGroup(
            servo1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(servo1PanelLayout.createSequentialGroup()
                .add(servo1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(throwServoStart, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(throwServoStop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        servo1PanelLayout.setVerticalGroup(
            servo1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(servo1PanelLayout.createSequentialGroup()
                .add(throwServoStart, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(throwServoStop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        shootButton.setText("Shoot");
        shootButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                shootButtonActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, 0));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(servo0Panel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(servo1Panel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(shootButton)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(servo0Panel, 0, 86, Short.MAX_VALUE)
                    .add(servo1Panel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(shootButton)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void sendShooterServoVals()
    {
        // this needs to be run at the beginning so the the servo states and
        // their actual positions line up.
        setServoVal(0, aimVal);
        setServoVal(1, startVal);
    }
    // setStartVal() and setAimVal have been modified so they first move the
    // servo (slowly) and then change the corresponding variable.
    
    public void shoot()
    {
        setServoVal(1, stopVal);
        
    }
    public void shooterSlowReset()
    {
        delayMs(500);
        setServoSlow(1, stopVal, startVal, delay);
    }
    private void setServoVal(int servo, float value)
    {
        try
        {
            hwInterface.setServoValue(servo, value);
        }
        catch(HardwareInterfaceException e)
        {
            e.printStackTrace();
        }
    }
    
    private void setServoSlow(int servo, float fromVal, float toVal, int msPerTick)
    {
        float inc = (float) 0.01;
        int direction;
        
        if(toVal > fromVal)
            direction = 1;
        else
            direction = -1;
        
        for(float currentVal = fromVal; Math.abs(currentVal - toVal) > inc; currentVal += inc*direction)
        {
            setServoVal(servo, currentVal);
            delayMs(msPerTick);
        }
        
        setServoVal(servo, toVal);
    }
    
    private void shootButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shootButtonActionPerformed
    {//GEN-HEADEREND:event_shootButtonActionPerformed
        startVal = (float) throwServoStart.getValue()/MAX_SLIDER;
        stopVal = (float) throwServoStop.getValue()/MAX_SLIDER;
        
        shoot();
    }//GEN-LAST:event_shootButtonActionPerformed
    
    private void throwServoStopStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_throwServoStopStateChanged
    {//GEN-HEADEREND:event_throwServoStopStateChanged
        if(throwServoStop.getValue() < throwServoStart.getValue())
        {
            throwServoStart.setValue(throwServoStop.getValue());
        }
    }//GEN-LAST:event_throwServoStopStateChanged
        
    
    void disableServo(int i)
    {
        try
        {
            hwInterface.disableServo(i);
        }
        catch(HardwareInterfaceException e)
        {
            e.printStackTrace();
        }
    }
    
    
    void setAllServos(float f) throws HardwareInterfaceException
    {
        Arrays.fill(servoValues,f);
        hwInterface.setAllServoValues(servoValues);
    }
    
    void setServo(int servo, ChangeEvent evt)
    {
        if(hwInterface==null)
        {
            log.warning("null hardware interface");
            return;
        }
        float f= (float)((JSlider)evt.getSource()).getValue()/MAX_SLIDER;
        try
        {
            hwInterface.setServoValue(servo,f);
        }
        catch(HardwareInterfaceException e)
        {
            e.printStackTrace();
        }
    }
    
    public void delayMs(int ms)
    {
        try
        {
            Thread.currentThread().sleep(ms);
        }
        catch(InterruptedException e)
        {}
    }
    
    private void throwServoStartStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_throwServoStartStateChanged
    {//GEN-HEADEREND:event_throwServoStartStateChanged
        setServo(1,evt);
        if(throwServoStop.getValue() < throwServoStart.getValue())
        {
            throwServoStop.setValue(throwServoStart.getValue());
        }
    }//GEN-LAST:event_throwServoStartStateChanged
    
    private void aimServoStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_aimServoStateChanged
    {//GEN-HEADEREND:event_aimServoStateChanged
        setServo(0, evt);
    }//GEN-LAST:event_aimServoStateChanged
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if(hwInterface!=null)
        {
            try
            {
                hwInterface.disableAllServos();
                hwInterface.close();
            }
            catch(HardwareInterfaceException e)
            {
                e.printStackTrace();
            }
        }
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Shooter().setVisible(true);
            }
        });
    }
    
    /** called when device added */
    public void onAdd()
    {
        log.info("device added, opening it");
        try
        {
            hwInterface.open();
        }
        catch(HardwareInterfaceException e)
        {
            log.warning(e.getMessage());
        }
    }
    
    public void onRemove()
    {
        log.info("device removed, closing it");
        if(hwInterface!=null && hwInterface.isOpen())
            hwInterface.close();
    }
    
    public float getStopVal()
    {
        return stopVal;
    }
    
    public void setStopVal(float stopVal)
    {
        this.stopVal = stopVal;
    }
    
    public float getStartVal()
    {
        return startVal;
    }
    
    public void setStartVal(float startVal)
    {
        setServoSlow(1, this.startVal, startVal, delay);
        this.startVal = startVal;
    }
    
    public float getAimVal()
    {
        return aimVal;
    }
    
    public void setAimVal(float aimVal)
    {
        setServoSlow(0, this.aimVal, aimVal, delay);
        this.aimVal = aimVal;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider aimServo;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel servo0Panel;
    private javax.swing.JPanel servo1Panel;
    private javax.swing.JButton shootButton;
    private javax.swing.JSlider throwServoStart;
    private javax.swing.JSlider throwServoStop;
    // End of variables declaration//GEN-END:variables
    
}
