/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PotTweaker.java
 *
 * Created on Mar 27, 2009, 9:46:12 PM
 */
package net.sf.jaer.biasgen;

import java.util.Observable;
import java.util.Observer;
import java.util.logging.Logger;
import java.util.prefs.PreferenceChangeEvent;
import java.util.prefs.PreferenceChangeListener;
import javax.swing.BorderFactory;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * This visual component bean allows control of biases or parameters around their nominal
 * values to adjust them according to some customized method.
 * This component can be added to a GUI builder palette and customized.
 * Intended for user-friendly control of Chip bias values.
 * @author tobi
 */
public class PotTweaker extends javax.swing.JPanel implements PreferenceChangeListener, Observer, ChangeListener {

    static Logger log = Logger.getLogger("PotTweaker");
    protected int maxSlider,  halfMaxSlider;
    private String name = "<name>";
    private String tooltip = null;
    TitledBorder border = BorderFactory.createTitledBorder("");

    public PotTweaker() {
        initComponents();
        setBorder(border);
        maxSlider = getSlider().getMaximum();
        halfMaxSlider = maxSlider / 2;
    }

    /** Creates new form PotTweaker.
    @param pots the pots affected by the control.
     * This list is used to add PreferenceChange events to reset the slider to its middle position when biases are saved or loaded.
     */
    public PotTweaker(String name, Pot[] pots, String tip) {
        this();
        setName(name);
        slider.setToolTipText(tip);
        slider.addChangeListener(this);
        for (Pot p : pots) {
            p.prefs.addPreferenceChangeListener(this);
            p.addObserver(this);
        }
    }

    public String prefsKey() {
        return this.getClass().getName();
    }

    /**
     * Adds a ChangeListener to the slider.
     *
     * @param l the ChangeListener to add
     * @see #fireStateChanged
     * @see #removeChangeListener
     */
    public void addChangeListener(ChangeListener listener) {
        listenerList.add(ChangeListener.class, listener);
    }

    /**
     * Removes a ChangeListener from the slider.
     *
     * @param l the ChangeListener to remove
     * @see #fireStateChanged
     * @see #addChangeListener

     */
    public void removeChangeListener(ChangeListener listener) {
        listenerList.remove(ChangeListener.class, listener);
    }

    /** Relative slider value.
     *
     * @return float from -1:1 depending on slider relative to middle.
     */
    protected float sliderValue() {
        return ((float) getSlider().getValue() - halfMaxSlider) / halfMaxSlider;
    }

    /** Called when pot changes bit value.
     *
     * @param o the pot.
     * @param arg the new value.
     */
    public void update(Observable o, Object arg) {
        log.info("Observable=" + o + " Object=" + arg);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        slider = new javax.swing.JSlider();

        setPreferredSize(new java.awt.Dimension(300, 30));
        setLayout(new java.awt.GridLayout());

        slider.setMajorTickSpacing(50);
        slider.setToolTipText("slide to tweak pot value around the preference value");
        slider.setMinimumSize(new java.awt.Dimension(36, 10));
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        add(slider);
    }// </editor-fold>//GEN-END:initComponents

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        stateChanged(evt);
}//GEN-LAST:event_sliderStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider slider;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the slider
     */
    public javax.swing.JSlider getSlider() {
        return slider;
    }

    /** Called when preferences are loaded or stored. Resets the slider to middle.
     *
     * @param evt
     */
    public void preferenceChange(PreferenceChangeEvent evt) {
        log.info(evt.toString());
        getSlider().setValue(50);
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    @Override
    public void setName(String name) {
        super.setName(name);
        this.name = name;
        border.setTitle(name);
        revalidate();
    }

    /**
     * @return the tooltip
     */
    public String getTooltip() {
        return tooltip;
    }

    /**
     * @param tooltip the tooltip to set
     */
    public void setTooltip(String tooltip) {
        this.tooltip = tooltip;
        slider.setToolTipText(tooltip);
    }
    /**
     * Only one <code>ChangeEvent</code> is needed per slider instance since the
     * event's only (read-only) state is the source property.  The source
     * of events generated here is always "this". The event is lazily
     * created the first time that an event notification is fired.
     *
     * @see #fireStateChanged
     */
    protected transient ChangeEvent changeEvent = null;

    /**
     * Send a {@code ChangeEvent}, whose source is this {@code JSlider}, to
     * all {@code ChangeListener}s that have registered interest in
     * {@code ChangeEvent}s.
     * This method is called each time a {@code ChangeEvent} is received from
     * the model.
     * <p>
     * The event instance is created if necessary, and stored in
     * {@code changeEvent}.
     *
     * @see #addChangeListener
     * @see EventListenerList
     */
    public void stateChanged(ChangeEvent e) {
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i] == ChangeListener.class) {
                if (changeEvent == null) {
                    changeEvent = new ChangeEvent(this);
                }
                ((ChangeListener) listeners[i + 1]).stateChanged(changeEvent);
            }
        }
    }

    /** The float value from -1 to 1.
     * 
     * @return value from -1:1
     */
    public float getValue() {
        return ((float) slider.getValue() - halfMaxSlider) / maxSlider;
    }
}
