/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CLCameraControlPanel.java
 *
 * Created on May 26, 2011, 1:08:46 PM
 */
package cl.eye;

import java.awt.BorderLayout;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;

/**
 * Controls camera and event generation parameters.
 * 
 * @author tobi
 */
public class CLCameraControlPanel extends javax.swing.JPanel {

    private CLRetina chip;
    private CLRetinaHardwareInterface hardware;
    private CLRawFramePanel rawCameraPanel;

    /** Creates new form CLCameraControlPanel */
    public CLCameraControlPanel(CLRetina chip) {
        this.chip = chip;
        hardware = (CLRetinaHardwareInterface) chip.getHardwareInterface();
        initComponents();
        Vector v = new Vector();
        for (int i : CLCamera.CLEYE_FRAME_RATES) {
            v.add(i);
        }
        fpsComboBox.setModel(new DefaultComboBoxModel(v));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel1 = new javax.swing.JLabel();
        gainSp = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        expSp = new javax.swing.JSpinner();
        agCB = new javax.swing.JCheckBox();
        aeCB = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        thrSp = new javax.swing.JSpinner();
        fpsComboBox = new javax.swing.JComboBox();
        rawInputPanel = new javax.swing.JPanel();
        showRawInputCB = new javax.swing.JCheckBox();

        jLabel1.setText("Gain");

        gainSp.setToolTipText("CL eye gain (0-79(");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.gain}"), gainSp, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jLabel2.setText("Exposure");

        expSp.setToolTipText("CL eye exposure value (0-511)");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.exposure}"), expSp, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        agCB.setText("Auto gain");
        agCB.setToolTipText("Enables AGC");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.autoGainEnabled}"), agCB, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        agCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agCBActionPerformed(evt);
            }
        });

        aeCB.setText("Auto exposure");
        aeCB.setToolTipText("Enables automatic exposure control");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.autoExposureEnabled}"), aeCB, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        aeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aeCBActionPerformed(evt);
            }
        });

        jLabel3.setText("Frame rate (Hz)");

        jLabel4.setText("Temporal change threshold");

        thrSp.setToolTipText("Sets threshold for temporal change events in ADC counts");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.eventThreshold}"), thrSp, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        fpsComboBox.setToolTipText("Choose PS Eye frame rate (only takes effect on reopen)");
        fpsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpsComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rawInputPanelLayout = new javax.swing.GroupLayout(rawInputPanel);
        rawInputPanel.setLayout(rawInputPanelLayout);
        rawInputPanelLayout.setHorizontalGroup(
            rawInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 368, Short.MAX_VALUE)
        );
        rawInputPanelLayout.setVerticalGroup(
            rawInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 288, Short.MAX_VALUE)
        );

        showRawInputCB.setText("Show raw input");
        showRawInputCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showRawInputCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fpsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(thrSp, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(expSp)
                            .addComponent(gainSp, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(showRawInputCB)
                            .addComponent(agCB)
                            .addComponent(aeCB)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rawInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(gainSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(expSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aeCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fpsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(thrSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showRawInputCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rawInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void fpsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpsComboBoxActionPerformed
        Object o = fpsComboBox.getModel().getSelectedItem();
        if (o == null) {
            return;
        }
        if (o instanceof Integer) {
            Integer i = (Integer) o;
            chip.setFrameRate(i);
        }
    }//GEN-LAST:event_fpsComboBoxActionPerformed

    private void agCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agCBActionPerformed
        if (agCB.isSelected() && hardware != null) {
            gainSp.setValue(hardware.getGain());
        }
    }//GEN-LAST:event_agCBActionPerformed

    private void aeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aeCBActionPerformed
        if (aeCB.isSelected() && hardware != null) {
            expSp.setValue(hardware.getExposure());
        }
    }//GEN-LAST:event_aeCBActionPerformed

    private void showRawInputCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showRawInputCBActionPerformed
        if (rawCameraPanel == null) {
            rawCameraPanel = new CLRawFramePanel(chip);
            rawInputPanel.add(rawCameraPanel, BorderLayout.CENTER);
        }
        if (showRawInputCB.isSelected()) {
            hardware.addAEListener(rawCameraPanel);
        } else {
            hardware.removeAEListener(rawCameraPanel);
        }
    }//GEN-LAST:event_showRawInputCBActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox aeCB;
    private javax.swing.JCheckBox agCB;
    private javax.swing.JSpinner expSp;
    private javax.swing.JComboBox fpsComboBox;
    private javax.swing.JSpinner gainSp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel rawInputPanel;
    private javax.swing.JCheckBox showRawInputCB;
    private javax.swing.JSpinner thrSp;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the chip
     */
    public CLRetina getChip() {
        return chip;
    }

    /**
     * @param chip the chip to set
     */
    public void setChip(CLRetina chip) {
        this.chip = chip;
    }
}
