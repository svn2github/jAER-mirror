/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * cDVSTest30DisplayControlPanel.java
 *
 * Created on Dec 5, 2010, 11:57:36 AM
 */

package eu.seebetter.ini.chips.sbret10;

import eu.seebetter.ini.chips.sbret10.SBret10.*;
import java.awt.geom.Point2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import net.sf.jaer.graphics.AEChipRenderer;
import org.jdesktop.beansbinding.Validator;

/**
 * Controls display of pixel data on SBret10.
 *
 * @author Tobi
 */
public class SBret10DisplayControlPanel extends javax.swing.JPanel implements PropertyChangeListener{

    private SBret10DisplayMethod displayMethod=null;
    private SBret10Renderer renderer=null;
    private SBret10 chip;

    /** Creates new form cDVSTest30DisplayControlPanel */
    public SBret10DisplayControlPanel(SBret10 chip) {
        this.chip=chip;
        this.displayMethod=(SBret10DisplayMethod)chip.getCanvas().getDisplayMethod();
        this.renderer=(SBret10Renderer)chip.getRenderer();
        initComponents();
        renderer.getSupport().addPropertyChangeListener(AEChipRenderer.COLOR_SCALE, this);
        renderer.getSupport().addPropertyChangeListener(SBret10.SBret10Renderer.AGC_VALUES, this);
        renderer.getSupport().addPropertyChangeListener(SBret10.SBret10Renderer.APS_INTENSITY_GAIN, this);
        renderer.getSupport().addPropertyChangeListener(SBret10.SBret10Renderer.APS_INTENSITY_OFFSET, this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        displayControlPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        displayIntensity = new javax.swing.JCheckBox();
        invertADCvalues = new javax.swing.JCheckBox();
        apsIntenCalibPanel = new javax.swing.JPanel();
        offchipCalibCB = new javax.swing.JCheckBox();
        extrapolationReset = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        agcPanel = new javax.swing.JPanel();
        agcCB = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        agcSpinner = new javax.swing.JSpinner();
        applyButton = new javax.swing.JButton();
        apsIntenStatPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        gainAGCTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        maxTF = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        minTF = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        gainLabel = new javax.swing.JLabel();
        gainSlider = new javax.swing.JSlider();
        gainTF = new javax.swing.JTextField();
        offsetLabel = new javax.swing.JLabel();
        offsetSlider = new javax.swing.JSlider();
        offTF = new javax.swing.JTextField();
        snapshotButton = new javax.swing.JButton();
        readComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        intensityChangeCB = new javax.swing.JCheckBox();
        colorScaleSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();

        displayControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("SBret10 Display"));
        displayControlPanel.setPreferredSize(new java.awt.Dimension(565, 300));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("APS"));

        displayIntensity.setText("Show APS data");
        displayIntensity.setToolTipText("Shows the scanned out static intensity values.");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.displayIntensity}"), displayIntensity, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        displayIntensity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayIntensityActionPerformed(evt);
            }
        });

        invertADCvalues.setText("Invert ADC values");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.frameData.invertADCvalues}"), invertADCvalues, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        apsIntenCalibPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Extrapolation"));

        offchipCalibCB.setText("Use DVS extrapolation");
        offchipCalibCB.setToolTipText("Use DVS extrapolation");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.frameData.useDVSExtrapolation}"), offchipCalibCB, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        extrapolationReset.setText("Reset");
        extrapolationReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extrapolationResetActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Use mismatch reduction");
        jCheckBox1.setActionCommand("");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.frameData.useMismatchCorrection}"), jCheckBox1, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout apsIntenCalibPanelLayout = new javax.swing.GroupLayout(apsIntenCalibPanel);
        apsIntenCalibPanel.setLayout(apsIntenCalibPanelLayout);
        apsIntenCalibPanelLayout.setHorizontalGroup(
            apsIntenCalibPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apsIntenCalibPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(apsIntenCalibPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(apsIntenCalibPanelLayout.createSequentialGroup()
                        .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                        .addGap(6, 6, Short.MAX_VALUE))
                    .addGroup(apsIntenCalibPanelLayout.createSequentialGroup()
                        .addGroup(apsIntenCalibPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(offchipCalibCB)
                            .addComponent(extrapolationReset))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        apsIntenCalibPanelLayout.setVerticalGroup(
            apsIntenCalibPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apsIntenCalibPanelLayout.createSequentialGroup()
                .addComponent(offchipCalibCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(extrapolationReset))
        );

        jCheckBox1.getAccessibleContext().setAccessibleName("mismatchCheckbox");

        agcPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("AGC"));

        agcCB.setText("Use AGC");
        agcCB.setToolTipText("Activates Automagitc Gain Control for log intensity display");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${renderer.agcEnabled}"), agcCB, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jLabel1.setText("AGC time constant (ms)");

        agcSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1000.0f), Float.valueOf(10.0f), null, Float.valueOf(100.0f)));
        agcSpinner.setToolTipText("Set time constant in ms for AGC");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${renderer.AGCTauMs}"), agcSpinner, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        applyButton.setText("Apply");
        applyButton.setToolTipText("Apply AGC offset and gain values to fixed values");
        applyButton.setIconTextGap(1);
        applyButton.setMargin(new java.awt.Insets(1, 3, 1, 3));
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout agcPanelLayout = new javax.swing.GroupLayout(agcPanel);
        agcPanel.setLayout(agcPanelLayout);
        agcPanelLayout.setHorizontalGroup(
            agcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agcPanelLayout.createSequentialGroup()
                .addComponent(agcCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agcSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(applyButton))
        );
        agcPanelLayout.setVerticalGroup(
            agcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(jLabel1)
                .addComponent(agcCB)
                .addComponent(agcSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(applyButton))
        );

        apsIntenStatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistics"));

        jLabel2.setText("min (offset)");

        gainAGCTF.setColumns(4);
        gainAGCTF.setEditable(false);
        gainAGCTF.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gainAGCTF.setText("4095");
        gainAGCTF.setToolTipText("gain as computed by AGC");

        jLabel5.setText("max");

        maxTF.setColumns(4);
        maxTF.setEditable(false);
        maxTF.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        maxTF.setText("4095");
        maxTF.setToolTipText("lowpass max log intensity value");

        jLabel6.setText("gain");

        minTF.setColumns(4);
        minTF.setEditable(false);
        minTF.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        minTF.setText("0");
        minTF.setToolTipText("low pass min log intensity value");

        javax.swing.GroupLayout apsIntenStatPanelLayout = new javax.swing.GroupLayout(apsIntenStatPanel);
        apsIntenStatPanel.setLayout(apsIntenStatPanelLayout);
        apsIntenStatPanelLayout.setHorizontalGroup(
            apsIntenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, apsIntenStatPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(apsIntenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(apsIntenStatPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(apsIntenStatPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(apsIntenStatPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gainAGCTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(76, 76, 76))
        );
        apsIntenStatPanelLayout.setVerticalGroup(
            apsIntenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apsIntenStatPanelLayout.createSequentialGroup()
                .addGroup(apsIntenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(gainAGCTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apsIntenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(minTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apsIntenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5)
                    .addComponent(maxTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        gainLabel.setText("gain");

        gainSlider.setMaximum(SBret10.MAX_ADC/10);
        gainSlider.setToolTipText("Sets the gain applied to ADC count. Gain=1 scales full count to white when offset=0. Gain=MAX_ADC scales a single count to full white when offset=0.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${apsIntensityGain}"), gainSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        gainTF.setColumns(6);
        gainTF.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gainSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), gainTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        offsetLabel.setText("offset");

        offsetSlider.setMaximum(SBret10.MAX_ADC);
        offsetSlider.setToolTipText("Sets the offset subtracted from ADC count. Gain=1 scales full count to white when offset=0. Offset shifts black point to offset count value.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${apsIntensityOffset}"), offsetSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        offTF.setColumns(6);
        offTF.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, offsetSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), offTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(offsetLabel)
                        .addGap(0, 0, 0)
                        .addComponent(offsetSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(gainLabel)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gainSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(204, 204, 204)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(offTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gainTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {gainLabel, offsetLabel});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gainLabel)
                    .addComponent(gainSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gainTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(offsetLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(offsetSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(offTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {gainLabel, gainSlider, gainTF});

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {offTF, offsetLabel, offsetSlider});

        snapshotButton.setText("Snapshot");
        snapshotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapshotButtonActionPerformed(evt);
            }
        });

        readComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A", "B", "C", "Diff_B", "Diff_C", "HDR" }));
        readComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(displayIntensity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(invertADCvalues)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(snapshotButton))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(agcPanel, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(apsIntenStatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(apsIntenCalibPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invertADCvalues)
                    .addComponent(snapshotButton)
                    .addComponent(readComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agcPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(apsIntenStatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(apsIntenCalibPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Events"));

        intensityChangeCB.setText("Show log intensity change events");
        intensityChangeCB.setToolTipText("Show log intensity change (temporal contrast) Brighter and Darker events.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.displayLogIntensityChangeEvents}"), intensityChangeCB, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        colorScaleSpinner.setToolTipText("Sets the full scale (white or black) event count.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.renderer.colorScale}"), colorScaleSpinner, org.jdesktop.beansbinding.BeanProperty.create("value"), "colorScale");
        bindingGroup.addBinding(binding);

        jLabel3.setText("Full scale events");

        jCheckBox2.setText("Ignore DVS events on APS readout");
        jCheckBox2.setToolTipText("Ignore DVS events during the APS readout");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${chip.ignoreReadout}"), jCheckBox2, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colorScaleSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(intensityChangeCB)
                    .addComponent(jCheckBox2))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(intensityChangeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(colorScaleSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout displayControlPanelLayout = new javax.swing.GroupLayout(displayControlPanel);
        displayControlPanel.setLayout(displayControlPanelLayout);
        displayControlPanelLayout.setHorizontalGroup(
            displayControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayControlPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );
        displayControlPanelLayout.setVerticalGroup(
            displayControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayControlPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(displayControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(displayControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        renderer.applyAGCValues();
    }//GEN-LAST:event_applyButtonActionPerformed

    private void snapshotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapshotButtonActionPerformed
        chip.takeSnapshot();
    }//GEN-LAST:event_snapshotButtonActionPerformed

    private void displayIntensityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayIntensityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_displayIntensityActionPerformed

    private void readComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readComboBoxActionPerformed
        chip.getFrameData().setDisplayRead(SBret10.Read.values()[readComboBox.getSelectedIndex()]);
    }//GEN-LAST:event_readComboBoxActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void extrapolationResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extrapolationResetActionPerformed
        chip.getFrameData().resetFrames();
    }//GEN-LAST:event_extrapolationResetActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox agcCB;
    private javax.swing.JPanel agcPanel;
    private javax.swing.JSpinner agcSpinner;
    private javax.swing.JButton applyButton;
    private javax.swing.JPanel apsIntenCalibPanel;
    private javax.swing.JPanel apsIntenStatPanel;
    private javax.swing.JSpinner colorScaleSpinner;
    private javax.swing.JPanel displayControlPanel;
    private javax.swing.JCheckBox displayIntensity;
    private javax.swing.JButton extrapolationReset;
    private javax.swing.JTextField gainAGCTF;
    private javax.swing.JLabel gainLabel;
    private javax.swing.JSlider gainSlider;
    private javax.swing.JTextField gainTF;
    private javax.swing.JCheckBox intensityChangeCB;
    private javax.swing.JCheckBox invertADCvalues;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField maxTF;
    private javax.swing.JTextField minTF;
    private javax.swing.JTextField offTF;
    private javax.swing.JCheckBox offchipCalibCB;
    private javax.swing.JLabel offsetLabel;
    private javax.swing.JSlider offsetSlider;
    private javax.swing.JComboBox readComboBox;
    private javax.swing.JButton snapshotButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the displayMethod
     */
    public SBret10DisplayMethod getDisplayMethod() {
        return displayMethod;
    }

    /**
     * @param displayMethod the displayMethod to set
     */
    public void setDisplayMethod(SBret10DisplayMethod displayMethod) {
        this.displayMethod = displayMethod;
    }

    /**
     * @return the chip
     */
    public SBret10 getChip() {
        return chip;
    }

    /**
     * @param chip the chip to set
     */
    public void setChip(SBret10 chip) {
        this.chip = chip;
    }

    public void setApsIntensityOffset(int apsIntensityOffset) {
        renderer.setApsIntensityOffset(apsIntensityOffset);
    }

    public void setApsIntensityGain(int apsIntensityGain) {
        renderer.setApsIntensityGain(apsIntensityGain);
    }

    public int getApsIntensityOffset() {
        return (int)(renderer.getApsIntensityOffset());
    }

    public int getApsIntensityGain() {
        return (int)(renderer.getApsIntensityGain());
    }

    public SBret10.Read getDisplayRead(){
        return chip.getFrameData().getDisplayRead();
    }
    
    public void setDisplayRead(SBret10.Read displayRead){
        chip.getFrameData().setDisplayRead(displayRead);
    }

    public int getColorScale(){
        if(chip==null || chip.getRenderer()==null) return 1;
        return chip.getRenderer().getColorScale();
    }

    public void setColorScale(int s){
        if(s<1) s=1;
         if (chip == null || chip.getRenderer() == null) {
            return;
        }
        chip.getRenderer().setColorScale(s);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if(evt.getPropertyName()==AEChipRenderer.COLOR_SCALE){
            colorScaleSpinner.setValue((Integer)evt.getNewValue());
        }else if(evt.getPropertyName()==SBret10.SBret10Renderer.AGC_VALUES){
            Point2D.Float f=(Point2D.Float)evt.getNewValue();
            minTF.setText(String.format("%.0f",f.x));
            maxTF.setText(String.format("%.0f",f.y));
            gainAGCTF.setText(String.format("%.0f",SBret10.MAX_ADC/(f.y-f.x)));
        }else if(evt.getPropertyName()==SBret10.SBret10Renderer.APS_INTENSITY_GAIN){
            gainSlider.setValue(renderer.getApsIntensityGain());
        }else if(evt.getPropertyName()==SBret10.SBret10Renderer.APS_INTENSITY_OFFSET){
            offsetSlider.setValue(renderer.getApsIntensityOffset());
        }
    }

    /**
     * @return the renderer
     */
    public SBret10Renderer getRenderer() {
        return renderer;
    }

}
