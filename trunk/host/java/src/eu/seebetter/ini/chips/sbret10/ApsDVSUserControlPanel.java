/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.seebetter.ini.chips.sbret10;

import ch.unizh.ini.jaer.chip.retina.DVSTweaks;
import eu.seebetter.ini.chips.APSDVSchip;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Logger;
import net.sf.jaer.biasgen.PotTweaker;
import net.sf.jaer.chip.AEChip;

/**
 * Wraps some key apsDVS sensor control in more user-friendly control panel.
 * 
 * @author tobi
 */
public class ApsDVSUserControlPanel extends javax.swing.JPanel implements PropertyChangeListener {

    APSDVSchip chip=null;
    DVSTweaks biasgen;
    private static final Logger log = Logger.getLogger("DVSFunctionalControlPanel");
    /**
     * Creates new form ApsDVSUserControlPanel
     */
    public ApsDVSUserControlPanel(AEChip chip) {
        this.chip=(APSDVSchip)chip; // will throw ClassCastException if not right kind of chip.
        
        initComponents();
        biasgen = (DVSTweaks) chip.getBiasgen();
        PotTweaker[] tweakers = {thresholdTweaker, onOffBalanceTweaker, maxFiringRateTweaker, bandwidthTweaker};
        for (PotTweaker tweaker : tweakers) {
            chip.getBiasgen().getSupport().addPropertyChangeListener(tweaker); // to reset sliders on load/save of biases
        }
        chip.getSupport().addPropertyChangeListener(this);
    }

    
    private void setFileModified() {
        if (chip != null && chip.getAeViewer() != null && chip.getAeViewer().getBiasgenFrame() != null) {
            chip.getAeViewer().getBiasgenFrame().setFileModified(true);
        }
    }
    
   @Override
    public void propertyChange(PropertyChangeEvent evt) {
        try {
            if (evt.getPropertyName() == DVSTweaks.THRESHOLD) {
                float v = (Float) evt.getNewValue();
                thresholdTweaker.setValue(v);

            } else if (evt.getPropertyName() == DVSTweaks.BANDWIDTH) {
                float v = (Float) evt.getNewValue();
                bandwidthTweaker.setValue(v);

            } else if (evt.getPropertyName() == DVSTweaks.MAX_FIRING_RATE) {
                float v = (Float) evt.getNewValue();
                maxFiringRateTweaker.setValue(v);

            } else if (evt.getPropertyName() == DVSTweaks.ON_OFF_BALANCE) {
                float v = (Float) evt.getNewValue();
                onOffBalanceTweaker.setValue(v);

            }
        } catch (Exception e) {
            log.warning("responding to property change, caught " + e.toString());
            e.printStackTrace();
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dvsPanel = new javax.swing.JPanel();
        dvsPixControl = new javax.swing.JPanel();
        bandwidthTweaker = new net.sf.jaer.biasgen.PotTweaker();
        thresholdTweaker = new net.sf.jaer.biasgen.PotTweaker();
        maxFiringRateTweaker = new net.sf.jaer.biasgen.PotTweaker();
        onOffBalanceTweaker = new net.sf.jaer.biasgen.PotTweaker();
        apsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        autoFrameRateCB = new javax.swing.JCheckBox();
        fpsSp = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        expSp = new javax.swing.JSpinner();
        autoExpCB = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();

        dvsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("DVS"));

        dvsPixControl.setLayout(new java.awt.GridLayout(0, 1));

        bandwidthTweaker.setLessDescription("Slower");
        bandwidthTweaker.setMinimumSize(new java.awt.Dimension(120, 47));
        bandwidthTweaker.setMoreDescription("Faster");
        bandwidthTweaker.setName("Bandwidth"); // NOI18N
        bandwidthTweaker.setTweakDescription("Tweaks bandwidth of pixel front end.");
        bandwidthTweaker.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bandwidthTweakerStateChanged(evt);
            }
        });
        dvsPixControl.add(bandwidthTweaker);

        thresholdTweaker.setLessDescription("Lower/more events");
        thresholdTweaker.setMinimumSize(new java.awt.Dimension(120, 47));
        thresholdTweaker.setMoreDescription("Higher/less events");
        thresholdTweaker.setName("Threshold"); // NOI18N
        thresholdTweaker.setTweakDescription("Adjusts event threshold");
        thresholdTweaker.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdTweakerStateChanged(evt);
            }
        });
        dvsPixControl.add(thresholdTweaker);

        maxFiringRateTweaker.setLessDescription("Slower");
        maxFiringRateTweaker.setMinimumSize(new java.awt.Dimension(120, 47));
        maxFiringRateTweaker.setMoreDescription("Faster");
        maxFiringRateTweaker.setName("Maximum firing rate"); // NOI18N
        maxFiringRateTweaker.setTweakDescription("Adjusts maximum pixel firing rate (1/refactory period)");
        maxFiringRateTweaker.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxFiringRateTweakerStateChanged(evt);
            }
        });
        dvsPixControl.add(maxFiringRateTweaker);

        onOffBalanceTweaker.setLessDescription("More Off events");
        onOffBalanceTweaker.setMinimumSize(new java.awt.Dimension(120, 47));
        onOffBalanceTweaker.setMoreDescription("More On events");
        onOffBalanceTweaker.setName("On/Off balance"); // NOI18N
        onOffBalanceTweaker.setTweakDescription("Adjusts balance bewteen On and Off events");
        onOffBalanceTweaker.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                onOffBalanceTweakerStateChanged(evt);
            }
        });
        dvsPixControl.add(onOffBalanceTweaker);

        javax.swing.GroupLayout dvsPanelLayout = new javax.swing.GroupLayout(dvsPanel);
        dvsPanel.setLayout(dvsPanelLayout);
        dvsPanelLayout.setHorizontalGroup(
            dvsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(dvsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dvsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(dvsPixControl, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        dvsPanelLayout.setVerticalGroup(
            dvsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 349, Short.MAX_VALUE)
            .addGroup(dvsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dvsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(dvsPixControl, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        apsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Image Sensor"));

        jLabel1.setText("Frame Rate (Hz)");

        autoFrameRateCB.setText("automatic");

        jLabel2.setText("Exposure time (ms)");

        autoExpCB.setText("automatic");

        jLabel3.setText("events/frame");

        javax.swing.GroupLayout apsPanelLayout = new javax.swing.GroupLayout(apsPanel);
        apsPanel.setLayout(apsPanelLayout);
        apsPanelLayout.setHorizontalGroup(
            apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apsPanelLayout.createSequentialGroup()
                .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fpsSp, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                    .addComponent(expSp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(apsPanelLayout.createSequentialGroup()
                        .addComponent(autoFrameRateCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(apsPanelLayout.createSequentialGroup()
                        .addComponent(autoExpCB)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        apsPanelLayout.setVerticalGroup(
            apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apsPanelLayout.createSequentialGroup()
                .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(autoFrameRateCB)
                    .addComponent(fpsSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(expSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoExpCB))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(apsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dvsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(apsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dvsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bandwidthTweakerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bandwidthTweakerStateChanged
        biasgen.setBandwidthTweak(bandwidthTweaker.getValue());
        setFileModified();
    }//GEN-LAST:event_bandwidthTweakerStateChanged

    private void thresholdTweakerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdTweakerStateChanged
        biasgen.setThresholdTweak(thresholdTweaker.getValue());
        setFileModified();
    }//GEN-LAST:event_thresholdTweakerStateChanged

    private void maxFiringRateTweakerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxFiringRateTweakerStateChanged
        biasgen.setMaxFiringRateTweak(maxFiringRateTweaker.getValue());
        setFileModified();
    }//GEN-LAST:event_maxFiringRateTweakerStateChanged

    private void onOffBalanceTweakerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_onOffBalanceTweakerStateChanged
        biasgen.setOnOffBalanceTweak(onOffBalanceTweaker.getValue());
        setFileModified();
    }//GEN-LAST:event_onOffBalanceTweakerStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel apsPanel;
    private javax.swing.JCheckBox autoExpCB;
    private javax.swing.JCheckBox autoFrameRateCB;
    private net.sf.jaer.biasgen.PotTweaker bandwidthTweaker;
    private javax.swing.JPanel dvsPanel;
    private javax.swing.JPanel dvsPixControl;
    private javax.swing.JSpinner expSp;
    private javax.swing.JSpinner fpsSp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private net.sf.jaer.biasgen.PotTweaker maxFiringRateTweaker;
    private net.sf.jaer.biasgen.PotTweaker onOffBalanceTweaker;
    private net.sf.jaer.biasgen.PotTweaker thresholdTweaker;
    // End of variables declaration//GEN-END:variables
}
