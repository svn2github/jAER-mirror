/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.seebetter.ini.chips.sbret10;

import ch.unizh.ini.jaer.chip.retina.DVSTweaks;
import ch.unizh.ini.jaer.config.cpld.CPLDInt;
import eu.seebetter.ini.chips.APSDVSchip;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Logger;
import net.sf.jaer.biasgen.PotTweaker;
import net.sf.jaer.chip.AEChip;
import net.sf.jaer.config.ApsDvsConfig;

/**
 * Wraps some key apsDVS sensor control in more user-friendly control panel.
 * 
 * @author tobi
 */
public class ApsDVSUserControlPanel extends javax.swing.JPanel implements PropertyChangeListener, Observer {

    protected APSDVSchip chip=null;
    protected ApsDvsTweaks apsDvsTweaks;
    protected ApsDvsConfig apsDvsConfig;
    SBret10config.VideoControl videoControl;
    SBret10config.ApsReadoutControl apsReadoutControl;
    
    private static final Logger log = Logger.getLogger("DVSFunctionalControlPanel");
    CPLDInt exposureCPLDInt, frameDelayCPLDInt;
    
    /**
     * Creates new form ApsDVSUserControlPanel
     */
    public ApsDVSUserControlPanel(AEChip chip) {
        this.chip=(APSDVSchip)chip; // will throw ClassCastException if not right kind of chip.
        
        apsDvsTweaks = (ApsDvsTweaks) chip.getBiasgen();
        apsDvsConfig = (ApsDvsConfig) chip.getBiasgen();
        PotTweaker[] tweakers = {thresholdTweaker, onOffBalanceTweaker, maxFiringRateTweaker, bandwidthTweaker};
        for (PotTweaker tweaker : tweakers) {
            chip.getBiasgen().getSupport().addPropertyChangeListener(tweaker); // to reset sliders on load/save of biases
        }
        chip.getSupport().addPropertyChangeListener(this); // if any property change events are generated by chip, handle them here
        initComponents();
        fdSp.setValue(apsDvsConfig.getFrameDelayMs());
        edSp.setValue(apsDvsConfig.getExposureDelayMs());
        deCB.setSelected(apsDvsConfig.isDisplayEvents());
        diCB.setSelected(apsDvsConfig.isDisplayFrames());
        if(apsDvsConfig instanceof SBret10config){
            SBret10config config=(SBret10config)apsDvsConfig;
            exposureCPLDInt=config.exposure;
            frameDelayCPLDInt=config.frameDelay;
            videoControl=config.videoControl;
            videoControl.addObserver(this); // contrast and useAutoContrast updates come here
            apsReadoutControl=config.apsReadoutControl;
            apsReadoutControl.addObserver(this);
//            config.exposure.addObserver(this);
//            config.frameDelay.addObserver(this); // TODO generates loop that resets the spinner if the new spinner value does not change the exposure in ms according to new register value
        }
    }

    
    private void setFileModified() {
        if (getChip() != null && getChip().getAeViewer() != null && getChip().getAeViewer().getBiasgenFrame() != null) {
            getChip().getAeViewer().getBiasgenFrame().setFileModified(true);
        }
    }
    
   @Override
    public void propertyChange(PropertyChangeEvent evt) {
       String name=evt.getPropertyName();
        try {
            if (name == DVSTweaks.THRESHOLD) {
                float v = (Float) evt.getNewValue();
                thresholdTweaker.setValue(v);

            } else if (name == DVSTweaks.BANDWIDTH) {
                float v = (Float) evt.getNewValue();
                bandwidthTweaker.setValue(v);

            } else if (name == DVSTweaks.MAX_FIRING_RATE) {
                float v = (Float) evt.getNewValue();
                maxFiringRateTweaker.setValue(v);

            } else if (name == DVSTweaks.ON_OFF_BALANCE) {
                float v = (Float) evt.getNewValue();
                onOffBalanceTweaker.setValue(v);

            } else if (name==APSDVSchip.PROPERTY_EXPOSURE_MS){
                exposMsTF.setText(String.format("%.3f",(Float)evt.getNewValue()));
            }else if (name==APSDVSchip.PROPERTY_FRAME_RATE_HZ){
                fpsTF.setText(String.format("%.3f",(Float)evt.getNewValue()));
            }
        } catch (Exception e) {
            log.warning("responding to property change, caught " + e.toString());
            e.printStackTrace();
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        dvsPanel = new javax.swing.JPanel();
        deCB = new javax.swing.JCheckBox();
        dvsPixControl = new javax.swing.JPanel();
        bandwidthTweaker = new net.sf.jaer.biasgen.PotTweaker();
        thresholdTweaker = new net.sf.jaer.biasgen.PotTweaker();
        maxFiringRateTweaker = new net.sf.jaer.biasgen.PotTweaker();
        onOffBalanceTweaker = new net.sf.jaer.biasgen.PotTweaker();
        apsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fdSp = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        edSp = new javax.swing.JSpinner();
        autoExpCB = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fpsTF = new javax.swing.JTextField();
        exposMsTF = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        epfSp = new javax.swing.JSpinner();
        contrastSp = new javax.swing.JSpinner();
        autoContrastCB = new javax.swing.JCheckBox();
        diCB = new javax.swing.JCheckBox();

        dvsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DVS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        dvsPanel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        deCB.setText("Display DVS events");
        deCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dvsPixControlLayout = new javax.swing.GroupLayout(dvsPixControl);
        dvsPixControl.setLayout(dvsPixControlLayout);
        dvsPixControlLayout.setHorizontalGroup(
            dvsPixControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        dvsPixControlLayout.setVerticalGroup(
            dvsPixControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 261, Short.MAX_VALUE)
        );

        bandwidthTweaker.setLessDescription("Slower");
        bandwidthTweaker.setMinimumSize(new java.awt.Dimension(80, 30));
        bandwidthTweaker.setMoreDescription("Faster");
        bandwidthTweaker.setName("Adjusts pixel bandwidth"); // NOI18N
        bandwidthTweaker.setPreferredSize(new java.awt.Dimension(250, 47));
        bandwidthTweaker.setTweakDescription("");
        bandwidthTweaker.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bandwidthTweakerStateChanged(evt);
            }
        });

        thresholdTweaker.setLessDescription("Lower/more events");
        thresholdTweaker.setMinimumSize(new java.awt.Dimension(80, 30));
        thresholdTweaker.setMoreDescription("Higher/less events");
        thresholdTweaker.setName("Adjusts event threshold"); // NOI18N
        thresholdTweaker.setPreferredSize(new java.awt.Dimension(250, 47));
        thresholdTweaker.setTweakDescription("");
        thresholdTweaker.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdTweakerStateChanged(evt);
            }
        });

        maxFiringRateTweaker.setLessDescription("Slower");
        maxFiringRateTweaker.setMinimumSize(new java.awt.Dimension(80, 30));
        maxFiringRateTweaker.setMoreDescription("Faster");
        maxFiringRateTweaker.setName("Adjusts maximum pixel firing rate (1/refactory period)"); // NOI18N
        maxFiringRateTweaker.setPreferredSize(new java.awt.Dimension(250, 47));
        maxFiringRateTweaker.setTweakDescription("");
        maxFiringRateTweaker.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxFiringRateTweakerStateChanged(evt);
            }
        });

        onOffBalanceTweaker.setLessDescription("More Off events");
        onOffBalanceTweaker.setMinimumSize(new java.awt.Dimension(80, 30));
        onOffBalanceTweaker.setMoreDescription("More On events");
        onOffBalanceTweaker.setName("Adjusts balance bewteen On and Off events"); // NOI18N
        onOffBalanceTweaker.setPreferredSize(new java.awt.Dimension(250, 47));
        onOffBalanceTweaker.setTweakDescription("");
        onOffBalanceTweaker.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                onOffBalanceTweakerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout dvsPanelLayout = new javax.swing.GroupLayout(dvsPanel);
        dvsPanel.setLayout(dvsPanelLayout);
        dvsPanelLayout.setHorizontalGroup(
            dvsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dvsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dvsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dvsPanelLayout.createSequentialGroup()
                        .addGroup(dvsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(thresholdTweaker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(maxFiringRateTweaker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(onOffBalanceTweaker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bandwidthTweaker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dvsPixControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(deCB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        dvsPanelLayout.setVerticalGroup(
            dvsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dvsPanelLayout.createSequentialGroup()
                .addComponent(deCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(dvsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dvsPixControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dvsPanelLayout.createSequentialGroup()
                        .addComponent(bandwidthTweaker, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thresholdTweaker, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxFiringRateTweaker, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(onOffBalanceTweaker, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        apsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Image Sensor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        apsPanel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel1.setText("Frame Delay (ms)");

        fdSp.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), null, null, Integer.valueOf(100)));
        fdSp.setToolTipText("Delay of starting new frame capture after last frame");
        fdSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fdSpStateChanged(evt);
            }
        });

        jLabel2.setText("Exposure delay (ms)");

        edSp.setModel(new javax.swing.SpinnerNumberModel());
        edSp.setToolTipText("The exposure delay; affects actual exposure time");
        edSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                edSpStateChanged(evt);
            }
        });

        autoExpCB.setText("Auto exposure");
        autoExpCB.setToolTipText("Automatically set pixel exposure delay");
        autoExpCB.setEnabled(false);
        autoExpCB.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        autoExpCB.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jLabel3.setText("Auto-Shot kevents/frame");
        jLabel3.setEnabled(false);

        jLabel4.setText("Frame rate (Hz)");

        jLabel5.setText("Expos. (ms)");

        fpsTF.setEditable(false);
        fpsTF.setToolTipText("Measured frame rate");

        exposMsTF.setEditable(false);
        exposMsTF.setToolTipText("Measured exposure time");
        exposMsTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposMsTFActionPerformed(evt);
            }
        });

        jLabel6.setText("Contrast");

        epfSp.setToolTipText("Set non-zero to automatically trigger APS frame captures every this many DVS events");
        epfSp.setEnabled(false);

        contrastSp.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.2f), Float.valueOf(5.0f), Float.valueOf(0.05f)));
        contrastSp.setToolTipText("Rendering contrast (1 is default)");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${apsDvsConfig.contrast}"), contrastSp, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        autoContrastCB.setText("Auto contrast");
        autoContrastCB.setToolTipText("Automatically set rendering contrast");
        autoContrastCB.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        autoContrastCB.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${apsDvsConfig.useAutoContrast}"), autoContrastCB, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        diCB.setText("Display Image");
        diCB.setToolTipText("Enables display of APS imager output");
        diCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout apsPanelLayout = new javax.swing.GroupLayout(apsPanel);
        apsPanel.setLayout(apsPanelLayout);
        apsPanelLayout.setHorizontalGroup(
            apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apsPanelLayout.createSequentialGroup()
                .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(apsPanelLayout.createSequentialGroup()
                        .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(apsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(edSp, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(apsPanelLayout.createSequentialGroup()
                                .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(diCB)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fdSp, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, apsPanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exposMsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(apsPanelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fpsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(apsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(epfSp, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(autoExpCB))
                    .addGroup(apsPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contrastSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(autoContrastCB)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        apsPanelLayout.setVerticalGroup(
            apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apsPanelLayout.createSequentialGroup()
                .addComponent(diCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fdSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(fpsTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(edSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(exposMsTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(epfSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoExpCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(contrastSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoContrastCB)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(apsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dvsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(apsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dvsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void bandwidthTweakerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bandwidthTweakerStateChanged
        getDvsTweaks().setBandwidthTweak(bandwidthTweaker.getValue());
        setFileModified();
    }//GEN-LAST:event_bandwidthTweakerStateChanged

    private void thresholdTweakerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdTweakerStateChanged
        getDvsTweaks().setThresholdTweak(thresholdTweaker.getValue());
        setFileModified();
    }//GEN-LAST:event_thresholdTweakerStateChanged

    private void maxFiringRateTweakerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxFiringRateTweakerStateChanged
        getDvsTweaks().setMaxFiringRateTweak(maxFiringRateTweaker.getValue());
        setFileModified();
    }//GEN-LAST:event_maxFiringRateTweakerStateChanged

    private void onOffBalanceTweakerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_onOffBalanceTweakerStateChanged
        getDvsTweaks().setOnOffBalanceTweak(onOffBalanceTweaker.getValue());
        setFileModified();
    }//GEN-LAST:event_onOffBalanceTweakerStateChanged

    private void exposMsTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposMsTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exposMsTFActionPerformed

    private void fdSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fdSpStateChanged
        try{
            apsDvsConfig.setFrameDelayMs((Integer)fdSp.getValue());
        }catch(Exception e){
            log.warning(e.toString());
        }
    }//GEN-LAST:event_fdSpStateChanged

    private void edSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_edSpStateChanged
        try{
            apsDvsConfig.setExposureDelayMs((Integer)edSp.getValue());
        }catch(Exception e){
            log.warning(e.toString());
        }
    }//GEN-LAST:event_edSpStateChanged

    private void diCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diCBActionPerformed
        apsDvsConfig.setDisplayFrames(diCB.isSelected());
    }//GEN-LAST:event_diCBActionPerformed

    private void deCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deCBActionPerformed
        apsDvsConfig.setDisplayEvents(deCB.isSelected());
    }//GEN-LAST:event_deCBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel apsPanel;
    private javax.swing.JCheckBox autoContrastCB;
    private javax.swing.JCheckBox autoExpCB;
    private net.sf.jaer.biasgen.PotTweaker bandwidthTweaker;
    private javax.swing.JSpinner contrastSp;
    private javax.swing.JCheckBox deCB;
    private javax.swing.JCheckBox diCB;
    private javax.swing.JPanel dvsPanel;
    private javax.swing.JPanel dvsPixControl;
    private javax.swing.JSpinner edSp;
    private javax.swing.JSpinner epfSp;
    private javax.swing.JTextField exposMsTF;
    private javax.swing.JSpinner fdSp;
    private javax.swing.JTextField fpsTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private net.sf.jaer.biasgen.PotTweaker maxFiringRateTweaker;
    private net.sf.jaer.biasgen.PotTweaker onOffBalanceTweaker;
    private net.sf.jaer.biasgen.PotTweaker thresholdTweaker;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the chip
     */
    public APSDVSchip getChip() {
        return chip;
    }

    /**
     * @return the apsDvsConfig
     */
    public ApsDvsConfig getApsDvsConfig() {
        return apsDvsConfig;
    }

    /**
     * @return the apsDvsTweaks
     */
    public DVSTweaks getDvsTweaks() {
        return apsDvsTweaks;
    }

    @Override
    public void update(Observable o, Object arg) {
        // updates to user friendly controls come from low level properties here
        if(o==exposureCPLDInt){
            edSp.setValue(apsDvsConfig.getExposureDelayMs());
        }else if(o==frameDelayCPLDInt){
            fdSp.setValue(apsDvsConfig.getFrameDelayMs());
        }else if(o==videoControl){
            contrastSp.setValue(apsDvsConfig.getContrast());
            autoContrastCB.setSelected(apsDvsConfig.isUseAutoContrast());
        }else if(o==apsReadoutControl){
            edSp.setValue(apsDvsConfig.getExposureDelayMs());
            fdSp.setValue(apsDvsConfig.getFrameDelayMs());
        }
    }
}
